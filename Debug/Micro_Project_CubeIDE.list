
Micro_Project_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080028a8  080028a8  000266d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080028a8  080028a8  000266d0  2**0
                  CONTENTS
  4 .ARM          00000000  080028a8  080028a8  000266d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028a8  080028a8  000266d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000066d0  20000000  080028b0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  200066d0  08008f80  000266d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200066ec  08008f80  000266ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000266d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000266fe  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001226  00000000  00000000  00026741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007b  00000000  00000000  00027967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000000ee  00000000  00000000  000279e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000098  00000000  00000000  00027ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000000a8  00000000  00000000  00027b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ba9  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000071  00000000  00000000  0002b7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00000f52  00000000  00000000  0002b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000058  00000000  00000000  0002c77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200066d0 	.word	0x200066d0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002890 	.word	0x08002890

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200066d4 	.word	0x200066d4
 80001d0:	08002890 	.word	0x08002890

080001d4 <TOG_PIN>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ BIT MATH OPERATIONS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R0 FOR THE REGISTER
@USES R3 FOR THE BITNUMBER
TOG_PIN:
	PUSH {R0-R3,LR}
 80001d4:	b50f      	push	{r0, r1, r2, r3, lr}
	LDR R1,[R0]
 80001d6:	6801      	ldr	r1, [r0, #0]
	LDR R2,=#0x1
 80001d8:	f04f 0201 	mov.w	r2, #1
	LSL R2,R2,R3
 80001dc:	fa02 f203 	lsl.w	r2, r2, r3
	EOR R1,R1,R2
 80001e0:	ea81 0102 	eor.w	r1, r1, r2
	STR R1,[R0]
 80001e4:	6001      	str	r1, [r0, #0]
	POP {R0-R3,PC}
 80001e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001e8 <SET_PIN>:
SET_PIN:
	PUSH {R0-R3,LR}
 80001e8:	b50f      	push	{r0, r1, r2, r3, lr}
	LDR R1,[R0]
 80001ea:	6801      	ldr	r1, [r0, #0]
	LDR R2,=#0x1
 80001ec:	f04f 0201 	mov.w	r2, #1
	LSL R2,R2,R3
 80001f0:	fa02 f203 	lsl.w	r2, r2, r3
	ORR R1,R1,R2
 80001f4:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 80001f8:	6001      	str	r1, [r0, #0]
	POP {R0-R3,PC}
 80001fa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001fc <CLR_PIN>:
CLR_PIN:
	PUSH {R0-R3,LR}
 80001fc:	b50f      	push	{r0, r1, r2, r3, lr}
	LDR R1,[R0]
 80001fe:	6801      	ldr	r1, [r0, #0]
	LDR R2,=#0x1
 8000200:	f04f 0201 	mov.w	r2, #1
	LSL R2,R2,R3
 8000204:	fa02 f203 	lsl.w	r2, r2, r3
	MVN R2,R2
 8000208:	ea6f 0202 	mvn.w	r2, r2
	AND R1,R1,R2
 800020c:	ea01 0102 	and.w	r1, r1, r2
	STR R1,[R0]
 8000210:	6001      	str	r1, [r0, #0]
	POP {R0-R3,PC}
 8000212:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000214 <VALUE_8_PINS>:
@USES R0 FOR THE REGISTER
@USES R2 FOR THE DATA
VALUE_8_PINS:
	PUSH {R0-R3,LR}
 8000214:	b50f      	push	{r0, r1, r2, r3, lr}
	LDR R1,[R0]
 8000216:	6801      	ldr	r1, [r0, #0]

	LDR R3,=0xFF
 8000218:	f04f 03ff 	mov.w	r3, #255	; 0xff
	MVN R3,R3
 800021c:	ea6f 0303 	mvn.w	r3, r3
	AND R1,R1,R3
 8000220:	ea01 0103 	and.w	r1, r1, r3
	ORR R1,R1,R2
 8000224:	ea41 0102 	orr.w	r1, r1, r2

	STR R1,[R0]
 8000228:	6001      	str	r1, [r0, #0]
	POP {R0-R3,PC}
 800022a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800022c <DELAY_MS>:



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DELAY FUNCTIONS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
DELAY_MS:
	PUSH {R8,LR}
 800022c:	e92d 4100 	stmdb	sp!, {r8, lr}
	LDR R8,=INTERVAL
 8000230:	f8df 8c14 	ldr.w	r8, [pc, #3092]	; 8000e48 <EndOfDisplayingDigit+0x2>

08000234 <DELAY_LOOP>:
DELAY_LOOP:
	SUBS R8, #1
 8000234:	f1b8 0801 	subs.w	r8, r8, #1
	CMP R8, #0
 8000238:	f1b8 0f00 	cmp.w	r8, #0
	BGE DELAY_LOOP
 800023c:	dafa      	bge.n	8000234 <DELAY_LOOP>
	POP {R8,PC}
 800023e:	e8bd 8100 	ldmia.w	sp!, {r8, pc}

08000242 <AsmMain>:


.global AsmMain
.section .text
AsmMain:
	BL SETUP
 8000242:	f000 f861 	bl	8000308 <SETUP>

	ldr r0,=0
 8000246:	f04f 0000 	mov.w	r0, #0
	LDR R1,=319
 800024a:	f240 113f 	movw	r1, #319	; 0x13f
	LDR R3,=0
 800024e:	f04f 0300 	mov.w	r3, #0
	LDR R4,=239
 8000252:	f04f 04ef 	mov.w	r4, #239	; 0xef
	LDR R10,=BLACK
 8000256:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 800025a:	f000 f9c3 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	BL MAINMENU_CHOOSEAGAME
 800025e:	f000 ff35 	bl	80010cc <MAINMENU_CHOOSEAGAME>

08000262 <APPSELECTGAME>:

APPSELECTGAME:
	LDR R0,=GAMESELECT
 8000262:	f8df 0be8 	ldr.w	r0, [pc, #3048]	; 8000e4c <EndOfDisplayingDigit+0x6>
	LDRB R0,[R0]
 8000266:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#1
 8000268:	2801      	cmp	r0, #1
	BEQ APPDrawPacmanSelected
 800026a:	d01b      	beq.n	80002a4 <APPDrawPacmanSelected>

	LDR R0,=50
 800026c:	f04f 0032 	mov.w	r0, #50	; 0x32
	LDR R1,=63
 8000270:	f04f 013f 	mov.w	r1, #63	; 0x3f
	LDR R3,=150
 8000274:	f04f 0396 	mov.w	r3, #150	; 0x96
	LDR R4,=173
 8000278:	f04f 04ad 	mov.w	r4, #173	; 0xad
	LDR R10,=BLACK
 800027c:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 8000280:	f000 f9b0 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	BL MAINMENU_PACMAN
 8000284:	f000 ff4c 	bl	8001120 <MAINMENU_PACMAN>
	BL MAINMENU_PONGSELECTED
 8000288:	f000 ffc2 	bl	8001210 <MAINMENU_PONGSELECTED>

	LDR R3,=120
 800028c:	f04f 0378 	mov.w	r3, #120	; 0x78
	BL MAINMENU_ARROW
 8000290:	f000 ffe6 	bl	8001260 <MAINMENU_ARROW>

	LDR R0,=GAMEFLAG
 8000294:	f8df 0bb8 	ldr.w	r0, [pc, #3000]	; 8000e50 <EndOfDisplayingDigit+0xa>
	LDRB R0,[R0]
 8000298:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 800029a:	2800      	cmp	r0, #0
	BEQ APPSELECTGAME
 800029c:	d0e1      	beq.n	8000262 <APPSELECTGAME>
	CMP R0,#2
 800029e:	2802      	cmp	r0, #2
	BEQ PONG_GAME_START
 80002a0:	d027      	beq.n	80002f2 <PONG_GAME_START>

	B APPSELECTGAME
 80002a2:	e7de      	b.n	8000262 <APPSELECTGAME>

080002a4 <APPDrawPacmanSelected>:
APPDrawPacmanSelected:

	LDR R0,=50
 80002a4:	f04f 0032 	mov.w	r0, #50	; 0x32
	LDR R1,=63
 80002a8:	f04f 013f 	mov.w	r1, #63	; 0x3f
	LDR R3,=120
 80002ac:	f04f 0378 	mov.w	r3, #120	; 0x78
	LDR R4,=143
 80002b0:	f04f 048f 	mov.w	r4, #143	; 0x8f
	LDR R10,=BLACK
 80002b4:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 80002b8:	f000 f994 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	BL MAINMENU_PACMANSELECTED
 80002bc:	f000 ff58 	bl	8001170 <MAINMENU_PACMANSELECTED>
	BL MAINMENU_PONG
 80002c0:	f000 ff7e 	bl	80011c0 <MAINMENU_PONG>

	LDR R3,=150
 80002c4:	f04f 0396 	mov.w	r3, #150	; 0x96
	BL MAINMENU_ARROW
 80002c8:	f000 ffca 	bl	8001260 <MAINMENU_ARROW>

	LDR R0,=GAMEFLAG
 80002cc:	f8df 0b80 	ldr.w	r0, [pc, #2944]	; 8000e50 <EndOfDisplayingDigit+0xa>
	LDRB R0,[R0]
 80002d0:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 80002d2:	2800      	cmp	r0, #0
	BEQ APPSELECTGAME
 80002d4:	d0c5      	beq.n	8000262 <APPSELECTGAME>

	CMP R0,#1
 80002d6:	2801      	cmp	r0, #1
	BNE PONG_GAME_START
 80002d8:	d10b      	bne.n	80002f2 <PONG_GAME_START>
	BL PACMAN_RESET
 80002da:	f002 f969 	bl	80025b0 <PACMAN_RESET>
	B PACMAN_GAME_START_GAME
 80002de:	e7ff      	b.n	80002e0 <PACMAN_GAME_START_GAME>

080002e0 <PACMAN_GAME_START_GAME>:
PACMAN_GAME_START_GAME:
	BL PACMAN_MOVE_DRAW
 80002e0:	f001 fdda 	bl	8001e98 <PACMAN_MOVE_DRAW>
	LDR R0,=GAMEFLAG
 80002e4:	f8df 0b68 	ldr.w	r0, [pc, #2920]	; 8000e50 <EndOfDisplayingDigit+0xa>
	LDRB R0,[R0]
 80002e8:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 80002ea:	2800      	cmp	r0, #0
	BEQ AsmMain
 80002ec:	f43f afa9 	beq.w	8000242 <AsmMain>
	B PACMAN_GAME_START_GAME
 80002f0:	e7f6      	b.n	80002e0 <PACMAN_GAME_START_GAME>

080002f2 <PONG_GAME_START>:
PONG_GAME_START:
	BL PONG_INIT
 80002f2:	f000 ffdb 	bl	80012ac <PONG_INIT>

080002f6 <PONG_GAME_START_GAME>:
PONG_GAME_START_GAME:
	BL PONG_DrawMap
 80002f6:	f001 f8ab 	bl	8001450 <PONG_DrawMap>
	LDR R0,=GAMEFLAG
 80002fa:	f8df 0b54 	ldr.w	r0, [pc, #2900]	; 8000e50 <EndOfDisplayingDigit+0xa>
	LDRB R0,[R0]
 80002fe:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 8000300:	2800      	cmp	r0, #0
	BEQ AsmMain
 8000302:	f43f af9e 	beq.w	8000242 <AsmMain>
B PONG_GAME_START_GAME
 8000306:	e7f6      	b.n	80002f6 <PONG_GAME_START_GAME>

08000308 <SETUP>:



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ STARTUP FUNCTION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
SETUP:
	PUSH {LR}
 8000308:	b500      	push	{lr}
	BL RCC_INIT
 800030a:	f000 f809 	bl	8000320 <RCC_INIT>
	BL GPIO_INIT
 800030e:	f000 f821 	bl	8000354 <GPIO_INIT>
	BL NVIC_INIT
 8000312:	f000 f864 	bl	80003de <NVIC_INIT>
	BL EXTI_INIT
 8000316:	f000 f86a 	bl	80003ee <EXTI_INIT>
	BL TFT_INIT
 800031a:	f000 f903 	bl	8000524 <TFT_INIT>
	POP {PC}
 800031e:	bd00      	pop	{pc}

08000320 <RCC_INIT>:



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ RCC INITIALIZATION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
RCC_INIT:
	PUSH {R0-R2,LR}
 8000320:	b507      	push	{r0, r1, r2, lr}

	//LDR R0,=RCC_CFGR
	//LDR R1,=0x108A
	//STR R1,[R0]

	LDR R0,=RCC_AHB1ENR
 8000322:	f8df 0b30 	ldr.w	r0, [pc, #2864]	; 8000e54 <EndOfDisplayingDigit+0xe>
	LDR R1,[R0]
 8000326:	6801      	ldr	r1, [r0, #0]
	LDR R2,=0b11
 8000328:	f04f 0203 	mov.w	r2, #3
	ORR R1,R1,R2
 800032c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 8000330:	6001      	str	r1, [r0, #0]

	LDR R0,=RCC_APB1ENR
 8000332:	f8df 0b24 	ldr.w	r0, [pc, #2852]	; 8000e58 <EndOfDisplayingDigit+0x12>
	LDR R1,[R0]
 8000336:	6801      	ldr	r1, [r0, #0]
	LDR R2,=0b111
 8000338:	f04f 0207 	mov.w	r2, #7
	ORR R1,R1,R2
 800033c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 8000340:	6001      	str	r1, [r0, #0]

	LDR R0,=RCC_APB2ENR
 8000342:	f8df 0b18 	ldr.w	r0, [pc, #2840]	; 8000e5c <EndOfDisplayingDigit+0x16>
	LDR R1,[R0]
 8000346:	6801      	ldr	r1, [r0, #0]
	LDR R2,=0x4000
 8000348:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	ORR R1,R1,R2
 800034c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 8000350:	6001      	str	r1, [r0, #0]

	POP {R0-R2,PC}
 8000352:	bd07      	pop	{r0, r1, r2, pc}

08000354 <GPIO_INIT>:



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GPIO INITIALIZATION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
GPIO_INIT:
	PUSH {R0-R2,LR}
 8000354:	b507      	push	{r0, r1, r2, lr}
	@SET PA0 --> PA10 TO OUTPUT_MODE
	LDR R0,=GPIOA_MODER
 8000356:	f8df 0b08 	ldr.w	r0, [pc, #2824]	; 8000e60 <EndOfDisplayingDigit+0x1a>
	LDR R1,[R0]
 800035a:	6801      	ldr	r1, [r0, #0]
	LDR R2,=#0x00155555
 800035c:	f8df 2b04 	ldr.w	r2, [pc, #2820]	; 8000e64 <EndOfDisplayingDigit+0x1e>
	ORR R1,R1,R2
 8000360:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 8000364:	6001      	str	r1, [r0, #0]
	@SET PB0 --> PB5 TO INPUT_PULLUP
	LDR R0,=GPIOB_PUPDR
 8000366:	f8df 0b00 	ldr.w	r0, [pc, #2816]	; 8000e68 <EndOfDisplayingDigit+0x22>
	LDR R1,[R0]
 800036a:	6801      	ldr	r1, [r0, #0]
	LDR R2,=0x555
 800036c:	f240 5255 	movw	r2, #1365	; 0x555
	ORR R1,R1,R2
 8000370:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 8000374:	6001      	str	r1, [r0, #0]
	POP {R0-R2,PC}
 8000376:	bd07      	pop	{r0, r1, r2, pc}

08000378 <PRIVILEGE>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ NVIC INITIALIZATION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PRIVILEGE:
	PUSH {R0,LR}
 8000378:	b501      	push	{r0, lr}
	AND R0,R0,#0x6
 800037a:	f000 0006 	and.w	r0, r0, #6
	MSR CONTROL,R0
 800037e:	f380 8814 	msr	CONTROL, r0
	POP {R0,PC}
 8000382:	bd01      	pop	{r0, pc}

08000384 <SetPrioGroup>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
SetPrioGroup:
	PUSH {R0-R2,LR}
 8000384:	b507      	push	{r0, r1, r2, lr}
	@ENTER PRIVILEGE MODE
	BL PRIVILEGE
 8000386:	f7ff fff7 	bl	8000378 <PRIVILEGE>
	@LOAD THE GROUPING CONFIGURATION IN AIRCR
	LDR R0,=SCB_AIRCR
 800038a:	f8df 0ae0 	ldr.w	r0, [pc, #2784]	; 8000e6c <EndOfDisplayingDigit+0x26>
	LDR R1,=VECT_KEY
 800038e:	f8df 1ae0 	ldr.w	r1, [pc, #2784]	; 8000e70 <EndOfDisplayingDigit+0x2a>
	STR R1,[R0]
 8000392:	6001      	str	r1, [r0, #0]
	LDR R2,=0b110
 8000394:	f04f 0206 	mov.w	r2, #6
	LSL R2,R2,#8
 8000398:	ea4f 2202 	mov.w	r2, r2, lsl #8
	ORR R1,R1,R2
 800039c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1,[R0]
 80003a0:	6001      	str	r1, [r0, #0]
	POP {R0-R2,PC}
 80003a2:	bd07      	pop	{r0, r1, r2, pc}

080003a4 <EnableUsedInterrupts>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
EnableUsedInterrupts:
	PUSH {R0-R1,LR}
 80003a4:	b503      	push	{r0, r1, lr}
	LDR R0,=NVIC_ISER0
 80003a6:	f8df 0acc 	ldr.w	r0, [pc, #2764]	; 8000e74 <EndOfDisplayingDigit+0x2e>
	LDR R1,=0x708007C0
 80003aa:	f8df 1acc 	ldr.w	r1, [pc, #2764]	; 8000e78 <EndOfDisplayingDigit+0x32>
	STR R1,[R0]
 80003ae:	6001      	str	r1, [r0, #0]
	POP {R0-R1,PC}
 80003b0:	bd03      	pop	{r0, r1, pc}

080003b2 <SetPriorities>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ALL TIMs WILL HAVE PRIO G1SG1
@ALL EXTIs WILL HAVE PRIO G2SG1
SetPriorities:
	PUSH {R0-R1,LR}
 80003b2:	b503      	push	{r0, r1, lr}

	LDR R0,=NVIC_IPR1
 80003b4:	f8df 0ac4 	ldr.w	r0, [pc, #2756]	; 8000e7c <EndOfDisplayingDigit+0x36>
	LDR R1,=0x20200000
 80003b8:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 8000e80 <EndOfDisplayingDigit+0x3a>
	STR R1,[R0]
 80003bc:	6001      	str	r1, [r0, #0]

	LDR R0,=NVIC_IPR2
 80003be:	f8df 0ac4 	ldr.w	r0, [pc, #2756]	; 8000e84 <EndOfDisplayingDigit+0x3e>
	LDR R1,=0x202020
 80003c2:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 8000e88 <EndOfDisplayingDigit+0x42>
	STR R1,[R0]
 80003c6:	6001      	str	r1, [r0, #0]

	LDR R0,=NVIC_IPR5
 80003c8:	f8df 0ac0 	ldr.w	r0, [pc, #2752]	; 8000e8c <EndOfDisplayingDigit+0x46>
	LDR R1,=0x20000000
 80003cc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	STR R1,[R0]
 80003d0:	6001      	str	r1, [r0, #0]

	LDR R0,=NVIC_IPR7
 80003d2:	f8df 0abc 	ldr.w	r0, [pc, #2748]	; 8000e90 <EndOfDisplayingDigit+0x4a>
	LDR R1,=0x101010
 80003d6:	f8df 1abc 	ldr.w	r1, [pc, #2748]	; 8000e94 <EndOfDisplayingDigit+0x4e>
	STR R1,[R0]
 80003da:	6001      	str	r1, [r0, #0]

	POP {R0-R1,PC}
 80003dc:	bd03      	pop	{r0, r1, pc}

080003de <NVIC_INIT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
NVIC_INIT:
	PUSH {R0-R1,LR}
 80003de:	b503      	push	{r0, r1, lr}
	BL SetPrioGroup
 80003e0:	f7ff ffd0 	bl	8000384 <SetPrioGroup>
	BL EnableUsedInterrupts
 80003e4:	f7ff ffde 	bl	80003a4 <EnableUsedInterrupts>
	BL SetPriorities
 80003e8:	f7ff ffe3 	bl	80003b2 <SetPriorities>
	POP {R0-R1,PC}
 80003ec:	bd03      	pop	{r0, r1, pc}

080003ee <EXTI_INIT>:



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ EXTI INITIALIZATION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
EXTI_INIT:
	PUSH {R0-R1,LR}
 80003ee:	b503      	push	{r0, r1, lr}

	LDR R0,=SYSCFG_EXTICR1
 80003f0:	f8df 0aa4 	ldr.w	r0, [pc, #2724]	; 8000e98 <EndOfDisplayingDigit+0x52>
	LDR R1,=#0x00001111
 80003f4:	f241 1111 	movw	r1, #4369	; 0x1111
	STR R1,[R0]
 80003f8:	6001      	str	r1, [r0, #0]

	LDR R0,=SYSCFG_EXTICR2
 80003fa:	f8df 0aa0 	ldr.w	r0, [pc, #2720]	; 8000e9c <EndOfDisplayingDigit+0x56>
	LDR R1,=#0x00000011
 80003fe:	f04f 0111 	mov.w	r1, #17
	STR R1,[R0]
 8000402:	6001      	str	r1, [r0, #0]

	LDR R0,=EXTI_IMR
 8000404:	f8df 0a98 	ldr.w	r0, [pc, #2712]	; 8000ea0 <EndOfDisplayingDigit+0x5a>
	LDR R1,=#0x0000003F
 8000408:	f04f 013f 	mov.w	r1, #63	; 0x3f
	STR R1,[R0]
 800040c:	6001      	str	r1, [r0, #0]

	LDR R0,=EXTI_RTSR
 800040e:	f8df 0a94 	ldr.w	r0, [pc, #2708]	; 8000ea4 <EndOfDisplayingDigit+0x5e>
	LDR R1,=#0x0000003F
 8000412:	f04f 013f 	mov.w	r1, #63	; 0x3f
	STR R1,[R0]
 8000416:	6001      	str	r1, [r0, #0]

	POP {R0-R1,PC}
 8000418:	bd03      	pop	{r0, r1, pc}

0800041a <TIM2_START_IT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ TIM INITIALIZATION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS TICKS
TIM2_START_IT:
	PUSH {R0-R4,LR}
 800041a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	LDR R0,=TIM2_PSC
 800041c:	f8df 0a88 	ldr.w	r0, [pc, #2696]	; 8000ea8 <EndOfDisplayingDigit+0x62>
	LDR R1,=0xF
 8000420:	f04f 010f 	mov.w	r1, #15
	STR R1,[R0]
 8000424:	6001      	str	r1, [r0, #0]

	LDR R0,=TIM2_ARR
 8000426:	f8df 0a84 	ldr.w	r0, [pc, #2692]	; 8000eac <EndOfDisplayingDigit+0x66>
	STR R2,[R0]
 800042a:	6002      	str	r2, [r0, #0]

	LDR R0,=TIM2_CR1
 800042c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R3,=#0
 8000430:	f04f 0300 	mov.w	r3, #0
	BL SET_PIN
 8000434:	f7ff fed8 	bl	80001e8 <SET_PIN>

	LDR R0,=TIM2_DIER
 8000438:	f8df 0a74 	ldr.w	r0, [pc, #2676]	; 8000eb0 <EndOfDisplayingDigit+0x6a>
	LDR R1,=0x1
 800043c:	f04f 0101 	mov.w	r1, #1
	STR R1,[R0]
 8000440:	6001      	str	r1, [r0, #0]

	POP {R0-R4,PC}
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <TIM3_START_IT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS TICKS
TIM3_START_IT:
	PUSH {R0-R4,LR}
 8000444:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	LDR R0,=TIM3_PSC
 8000446:	f8df 0a6c 	ldr.w	r0, [pc, #2668]	; 8000eb4 <EndOfDisplayingDigit+0x6e>
	LDR R1,=0xF
 800044a:	f04f 010f 	mov.w	r1, #15
	STR R1,[R0]
 800044e:	6001      	str	r1, [r0, #0]

	LDR R0,=TIM3_ARR
 8000450:	f8df 0a64 	ldr.w	r0, [pc, #2660]	; 8000eb8 <EndOfDisplayingDigit+0x72>
	STR R2,[R0]
 8000454:	6002      	str	r2, [r0, #0]

	LDR R0,=TIM3_CR1
 8000456:	f8df 0a64 	ldr.w	r0, [pc, #2660]	; 8000ebc <EndOfDisplayingDigit+0x76>
	LDR R3,=#0
 800045a:	f04f 0300 	mov.w	r3, #0
	BL SET_PIN
 800045e:	f7ff fec3 	bl	80001e8 <SET_PIN>

	LDR R0,=TIM3_DIER
 8000462:	f8df 0a5c 	ldr.w	r0, [pc, #2652]	; 8000ec0 <EndOfDisplayingDigit+0x7a>
	LDR R1,=0x1
 8000466:	f04f 0101 	mov.w	r1, #1
	STR R1,[R0]
 800046a:	6001      	str	r1, [r0, #0]

	POP {R0-R4,PC}
 800046c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800046e <TIM2_STOP_IT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS TICKS
TIM2_STOP_IT:
	PUSH {R0,R3,LR}
 800046e:	b509      	push	{r0, r3, lr}

	LDR R0,=TIM2_CR1
 8000470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R3,=#0
 8000474:	f04f 0300 	mov.w	r3, #0
	BL CLR_PIN
 8000478:	f7ff fec0 	bl	80001fc <CLR_PIN>

	POP {R0,R3,PC}
 800047c:	bd09      	pop	{r0, r3, pc}

0800047e <TIM3_STOP_IT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS TICKS
TIM3_STOP_IT:
	PUSH {R0,R3,LR}
 800047e:	b509      	push	{r0, r3, lr}

	LDR R0,=TIM3_CR1
 8000480:	f8df 0a38 	ldr.w	r0, [pc, #2616]	; 8000ebc <EndOfDisplayingDigit+0x76>
	LDR R3,=#0
 8000484:	f04f 0300 	mov.w	r3, #0
	BL CLR_PIN
 8000488:	f7ff feb8 	bl	80001fc <CLR_PIN>

	POP {R0,R3,PC}
 800048c:	bd09      	pop	{r0, r3, pc}

0800048e <TIM4_START_IT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS TICKS
TIM4_START_IT:
	PUSH {R0-R4,LR}
 800048e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	LDR R0,=TIM4_PSC
 8000490:	f8df 0a30 	ldr.w	r0, [pc, #2608]	; 8000ec4 <EndOfDisplayingDigit+0x7e>
	LDR R1,=0xF
 8000494:	f04f 010f 	mov.w	r1, #15
	STR R1,[R0]
 8000498:	6001      	str	r1, [r0, #0]

	LDR R0,=TIM4_ARR
 800049a:	f8df 0a2c 	ldr.w	r0, [pc, #2604]	; 8000ec8 <EndOfDisplayingDigit+0x82>
	STR R2,[R0]
 800049e:	6002      	str	r2, [r0, #0]

	LDR R0,=TIM4_CR1
 80004a0:	f8df 0a28 	ldr.w	r0, [pc, #2600]	; 8000ecc <EndOfDisplayingDigit+0x86>
	LDR R3,=#0
 80004a4:	f04f 0300 	mov.w	r3, #0
	BL SET_PIN
 80004a8:	f7ff fe9e 	bl	80001e8 <SET_PIN>

	LDR R0,=TIM4_DIER
 80004ac:	f8df 0a20 	ldr.w	r0, [pc, #2592]	; 8000ed0 <EndOfDisplayingDigit+0x8a>
	LDR R1,=0x1
 80004b0:	f04f 0101 	mov.w	r1, #1
	STR R1,[R0]
 80004b4:	6001      	str	r1, [r0, #0]

	POP {R0-R4,PC}
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <TFT_WRITE>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ TFT FUNCTIONS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS DATA TO WRITE
TFT_WRITE:
	PUSH {R0-R3,LR}
 80004b8:	b50f      	push	{r0, r1, r2, r3, lr}
	@RESET WR (PIN10)
	LDR R0,=GPIOA_ODR
 80004ba:	f8df 0a18 	ldr.w	r0, [pc, #2584]	; 8000ed4 <EndOfDisplayingDigit+0x8e>
	LDR R3,=10
 80004be:	f04f 030a 	mov.w	r3, #10
	BL CLR_PIN
 80004c2:	f7ff fe9b 	bl	80001fc <CLR_PIN>
	@WRITE DATA [R0 is already ODR, and R2 should already contain the data]
	BL VALUE_8_PINS
 80004c6:	f7ff fea5 	bl	8000214 <VALUE_8_PINS>
	@SET WR (PIN10)
	BL SET_PIN
 80004ca:	f7ff fe8d 	bl	80001e8 <SET_PIN>
	POP {R0-R3,PC}
 80004ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080004d0 <TFT_WRITE_DATA>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS DATA TO WRITE
TFT_WRITE_DATA:
	PUSH {R0-R3,LR}
 80004d0:	b50f      	push	{r0, r1, r2, r3, lr}
	@SET RS (PIN9)
	LDR R0,=GPIOA_ODR
 80004d2:	f8df 0a00 	ldr.w	r0, [pc, #2560]	; 8000ed4 <EndOfDisplayingDigit+0x8e>
	LDR R3,=9
 80004d6:	f04f 0309 	mov.w	r3, #9
	BL SET_PIN
 80004da:	f7ff fe85 	bl	80001e8 <SET_PIN>
	@CALL FUNCTION TFT_WRITE
	BL TFT_WRITE
 80004de:	f7ff ffeb 	bl	80004b8 <TFT_WRITE>
	POP {R0-R3,PC}
 80004e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080004e4 <TFT_WRITE_COMMAND>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@USES R2 AS DATA TO WRITE
TFT_WRITE_COMMAND:
	PUSH {R0-R3,LR}
 80004e4:	b50f      	push	{r0, r1, r2, r3, lr}
	@RESET RS (PIN9)
	LDR R0,=GPIOA_ODR
 80004e6:	f8df 09ec 	ldr.w	r0, [pc, #2540]	; 8000ed4 <EndOfDisplayingDigit+0x8e>
	LDR R3,=9
 80004ea:	f04f 0309 	mov.w	r3, #9
	BL CLR_PIN
 80004ee:	f7ff fe85 	bl	80001fc <CLR_PIN>
	@CALL FUNCTION TFT_WRITE
	BL TFT_WRITE
 80004f2:	f7ff ffe1 	bl	80004b8 <TFT_WRITE>
	POP {R0-R3,PC}
 80004f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080004f8 <TFT_RESET_SEQUENCE>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
TFT_RESET_SEQUENCE:
	PUSH {R0,R3,LR}
 80004f8:	b509      	push	{r0, r3, lr}
	@SET RST (PIN8) THEN DELAY
	LDR R0,=GPIOA_ODR
 80004fa:	f8df 09d8 	ldr.w	r0, [pc, #2520]	; 8000ed4 <EndOfDisplayingDigit+0x8e>
	LDR R3,=8
 80004fe:	f04f 0308 	mov.w	r3, #8
	BL SET_PIN
 8000502:	f7ff fe71 	bl	80001e8 <SET_PIN>
	BL DELAY_MS
 8000506:	f7ff fe91 	bl	800022c <DELAY_MS>
	@RESET RST (PIN8) THEN DELAY
	BL CLR_PIN
 800050a:	f7ff fe77 	bl	80001fc <CLR_PIN>
	BL DELAY_MS
 800050e:	f7ff fe8d 	bl	800022c <DELAY_MS>
	@SET RST (PIN8) THEN DELAY
	BL SET_PIN
 8000512:	f7ff fe69 	bl	80001e8 <SET_PIN>
	BL DELAY_MS
 8000516:	f7ff fe89 	bl	800022c <DELAY_MS>
	LDR R2,=0x01
 800051a:	f04f 0201 	mov.w	r2, #1
	BL TFT_WRITE_COMMAND
 800051e:	f7ff ffe1 	bl	80004e4 <TFT_WRITE_COMMAND>
	POP {R0,R3,PC}
 8000522:	bd09      	pop	{r0, r3, pc}

08000524 <TFT_INIT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
TFT_INIT:
	PUSH {R0-R3,LR}
 8000524:	b50f      	push	{r0, r1, r2, r3, lr}
	@RESET SEQUENCE
	BL TFT_RESET_SEQUENCE
 8000526:	f7ff ffe7 	bl	80004f8 <TFT_RESET_SEQUENCE>
	@DISPLAY OFF COMMAND (0x28)
	LDR R2,=0x28
 800052a:	f04f 0228 	mov.w	r2, #40	; 0x28
	BL TFT_WRITE_COMMAND
 800052e:	f7ff ffd9 	bl	80004e4 <TFT_WRITE_COMMAND>
	@CONTRAST SETTINGS COMMAND (0xC5)
	LDR R2,=0xC5
 8000532:	f04f 02c5 	mov.w	r2, #197	; 0xc5
	BL TFT_WRITE_COMMAND
 8000536:	f7ff ffd5 	bl	80004e4 <TFT_WRITE_COMMAND>
	LDR R2,=0x54
 800053a:	f04f 0254 	mov.w	r2, #84	; 0x54
	BL TFT_WRITE_DATA
 800053e:	f7ff ffc7 	bl	80004d0 <TFT_WRITE_DATA>
	LDR R2,=0x00
 8000542:	f04f 0200 	mov.w	r2, #0
	BL TFT_WRITE_DATA
 8000546:	f7ff ffc3 	bl	80004d0 <TFT_WRITE_DATA>
	@MEMORY ACCESS COMMAND (0x36)
	LDR R2,=0x36
 800054a:	f04f 0236 	mov.w	r2, #54	; 0x36
	BL TFT_WRITE_COMMAND
 800054e:	f7ff ffc9 	bl	80004e4 <TFT_WRITE_COMMAND>
	LDR R2,=0x68
 8000552:	f04f 0268 	mov.w	r2, #104	; 0x68
	BL TFT_WRITE_DATA
 8000556:	f7ff ffbb 	bl	80004d0 <TFT_WRITE_DATA>
	@PIXEL FORMAT COMMAND (0x3A)
	LDR R2,=0x3A
 800055a:	f04f 023a 	mov.w	r2, #58	; 0x3a
	BL TFT_WRITE_COMMAND
 800055e:	f7ff ffc1 	bl	80004e4 <TFT_WRITE_COMMAND>
	LDR R2,=0x55
 8000562:	f04f 0255 	mov.w	r2, #85	; 0x55
	BL TFT_WRITE_DATA
 8000566:	f7ff ffb3 	bl	80004d0 <TFT_WRITE_DATA>
	@INVERT SCREEN COMMAND (0x20)
	LDR R2,=0x20
 800056a:	f04f 0220 	mov.w	r2, #32
	BL TFT_WRITE_COMMAND
 800056e:	f7ff ffb9 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SLEEP OUT COMMAND (0x11)
	LDR R2,=0x11
 8000572:	f04f 0211 	mov.w	r2, #17
	BL TFT_WRITE_COMMAND
 8000576:	f7ff ffb5 	bl	80004e4 <TFT_WRITE_COMMAND>
	BL DELAY_MS
 800057a:	f7ff fe57 	bl	800022c <DELAY_MS>
	@DISPLAY ON COMMAND (0x29)
	LDR R2,=0x29
 800057e:	f04f 0229 	mov.w	r2, #41	; 0x29
	BL TFT_WRITE_COMMAND
 8000582:	f7ff ffaf 	bl	80004e4 <TFT_WRITE_COMMAND>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8000586:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 800058a:	f7ff ffab 	bl	80004e4 <TFT_WRITE_COMMAND>
	POP {R0-R3,PC}
 800058e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000590 <TFT_SET_DRAWING_AREA>:
@USES R0 AS X1
@USES R1 AS X2
@USES R3 AS Y1
@USES R4 AS Y2
TFT_SET_DRAWING_AREA:
	PUSH {R0-R4,LR}
 8000590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	@COLUMN ADDRESS SET COMMAND (0x2A)
	LDR R2,=0x2A
 8000592:	f04f 022a 	mov.w	r2, #42	; 0x2a
	BL TFT_WRITE_COMMAND
 8000596:	f7ff ffa5 	bl	80004e4 <TFT_WRITE_COMMAND>
	@WRITE HIGHER X1
	LSR R2,R0,#8
 800059a:	ea4f 2210 	mov.w	r2, r0, lsr #8
	BL TFT_WRITE_DATA
 800059e:	f7ff ff97 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE LOWER X1
	AND R2,R0,#0xFF
 80005a2:	f000 02ff 	and.w	r2, r0, #255	; 0xff
	BL TFT_WRITE_DATA
 80005a6:	f7ff ff93 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE HIGHER X2
	LSR R2,R1,#8
 80005aa:	ea4f 2211 	mov.w	r2, r1, lsr #8
	BL TFT_WRITE_DATA
 80005ae:	f7ff ff8f 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE LOWER X2
	AND R2,R1,#0xFF
 80005b2:	f001 02ff 	and.w	r2, r1, #255	; 0xff
	BL TFT_WRITE_DATA
 80005b6:	f7ff ff8b 	bl	80004d0 <TFT_WRITE_DATA>

	@PAGE ADDRESS SET COMMAND (0x2A)
	LDR R2,=0x2B
 80005ba:	f04f 022b 	mov.w	r2, #43	; 0x2b
	BL TFT_WRITE_COMMAND
 80005be:	f7ff ff91 	bl	80004e4 <TFT_WRITE_COMMAND>
	@WRITE HIGHER X1
	LSR R2,R3,#8
 80005c2:	ea4f 2213 	mov.w	r2, r3, lsr #8
	BL TFT_WRITE_DATA
 80005c6:	f7ff ff83 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE LOWER X1
	AND R2,R3,#0xFF
 80005ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
	BL TFT_WRITE_DATA
 80005ce:	f7ff ff7f 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE HIGHER X2
	LSR R2,R4,#8
 80005d2:	ea4f 2214 	mov.w	r2, r4, lsr #8
	BL TFT_WRITE_DATA
 80005d6:	f7ff ff7b 	bl	80004d0 <TFT_WRITE_DATA>
	@WRITE LOWER X2
	AND R2,R4,#0xFF
 80005da:	f004 02ff 	and.w	r2, r4, #255	; 0xff
	BL TFT_WRITE_DATA
 80005de:	f7ff ff77 	bl	80004d0 <TFT_WRITE_DATA>

	POP {R0-R4,PC}
 80005e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080005e4 <TFT_DRAW_RECTANGLE>:
@USES R1 AS X2
@USES R3 AS Y1
@USES R4 AS Y2
@USES R10 AS COLOR
TFT_DRAW_RECTANGLE:
	PUSH {R0-R6,R10,LR}
 80005e4:	e92d 447f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, sl, lr}
	BL TFT_SET_DRAWING_AREA
 80005e8:	f7ff ffd2 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@GET THE DIFFERENCE IN X
	SUB R5,R1,R0
 80005ec:	eba1 0500 	sub.w	r5, r1, r0
	@GET THE DIFFERENCE IN Y
	SUB R6,R4,R3
 80005f0:	eba4 0603 	sub.w	r6, r4, r3
	@ADD ONE IN EACH DIFFERENCE
	ADD R5,R5,#1
 80005f4:	f105 0501 	add.w	r5, r5, #1
	ADD R6,R6,#1
 80005f8:	f106 0601 	add.w	r6, r6, #1
	MUL R6,R6,R5
 80005fc:	fb06 f605 	mul.w	r6, r6, r5
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8000600:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 8000604:	f7ff ff6e 	bl	80004e4 <TFT_WRITE_COMMAND>

08000608 <DisplaySquare>:
	@ITERATE AND DISPLAY
DisplaySquare:
	LSR R2,R10,#8
 8000608:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 800060c:	f7ff ff60 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 8000610:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8000614:	f7ff ff5c 	bl	80004d0 <TFT_WRITE_DATA>

	SUB R6,R6,#1
 8000618:	f1a6 0601 	sub.w	r6, r6, #1
	CMP R6,#0
 800061c:	2e00      	cmp	r6, #0
	BNE DisplaySquare
 800061e:	d1f3      	bne.n	8000608 <DisplaySquare>

	POP {R0-R6,R10,PC}
 8000620:	e8bd 847f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, sl, pc}

08000624 <TFT_DRAW_CIRCLE>:
@USES R5 AS X CENTER
@USES R6 AS Y CENTER
@USES R7 AS THE LENGTH OF THERADIUS
@USES R10 AS THE COLOUR OF THE CIRCLE
TFT_DRAW_CIRCLE:
	PUSH {R0-R11,LR}
 8000624:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	@GET THE BOX
	SUB R0,R5,R7	@START X
 8000628:	eba5 0007 	sub.w	r0, r5, r7
	ADD R1,R5,R7	@END X
 800062c:	eb05 0107 	add.w	r1, r5, r7
	SUB R3,R6,R7	@START Y
 8000630:	eba6 0307 	sub.w	r3, r6, r7
	ADD R4,R6,R7	@END Y
 8000634:	eb06 0407 	add.w	r4, r6, r7
	BL TFT_SET_DRAWING_AREA
 8000638:	f7ff ffaa 	bl	8000590 <TFT_SET_DRAWING_AREA>

	MOV R8,R5
 800063c:	46a8      	mov	r8, r5
	MOV R11,R6
 800063e:	46b3      	mov	fp, r6

	MUL R9,R7,R7
 8000640:	fb07 f907 	mul.w	r9, r7, r7
	MOV R5,R3
 8000644:	461d      	mov	r5, r3
	MOV R3,R0
 8000646:	4603      	mov	r3, r0

	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8000648:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 800064c:	f7ff ff4a 	bl	80004e4 <TFT_WRITE_COMMAND>
	@R7 CONTAINS y^2
	@R8 CONTAINS X CENTER
	@R9 CONTAINS r^2
	@R10 CONTAINS COLOUR
	@R11 CONTAINS Y CENTER
	B MoveOnX
 8000650:	e7ff      	b.n	8000652 <MoveOnX>

08000652 <MoveOnX>:
MoveOnX:
	@GET x^2 AND y^2
	PUSH {R3,R5}
 8000652:	b428      	push	{r3, r5}
	SUB R3,R3,R8
 8000654:	eba3 0308 	sub.w	r3, r3, r8
	MUL R6,R3,R3
 8000658:	fb03 f603 	mul.w	r6, r3, r3
	SUB R5,R5,R11
 800065c:	eba5 050b 	sub.w	r5, r5, fp
	MUL R7,R5,R5
 8000660:	fb05 f705 	mul.w	r7, r5, r5
	POP {R5,R3}
 8000664:	bc28      	pop	{r3, r5}
	@GET x^2 + y^2
	ADD R6,R6,R7
 8000666:	443e      	add	r6, r7
	CMP R6,R9		@if x^2 + y^2 <= r^2, display
 8000668:	454e      	cmp	r6, r9
	BHI DontDisplayCircle
 800066a:	d808      	bhi.n	800067e <DontDisplayCircle>
	@IF DIDN'T JUMP, DISPLAY
	LSR R2,R10,#8
 800066c:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 8000670:	f7ff ff2e 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 8000674:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8000678:	f7ff ff2a 	bl	80004d0 <TFT_WRITE_DATA>
	B SkipBlackCircle
 800067c:	e008      	b.n	8000690 <SkipBlackCircle>

0800067e <DontDisplayCircle>:
DontDisplayCircle:
	LDR R2,=0x00
 800067e:	f04f 0200 	mov.w	r2, #0
	BL TFT_WRITE_DATA
 8000682:	f7ff ff25 	bl	80004d0 <TFT_WRITE_DATA>
	LDR R2,=0x00
 8000686:	f04f 0200 	mov.w	r2, #0
	BL TFT_WRITE_DATA
 800068a:	f7ff ff21 	bl	80004d0 <TFT_WRITE_DATA>
	B SkipBlackCircle
 800068e:	e7ff      	b.n	8000690 <SkipBlackCircle>

08000690 <SkipBlackCircle>:
SkipBlackCircle:
	@INCREMENT MOVING X
	ADD R3,R3,#1
 8000690:	f103 0301 	add.w	r3, r3, #1
	CMP R3,R1		@if X moving <= X end, KEEP GOING
 8000694:	428b      	cmp	r3, r1
	BLE MoveOnX
 8000696:	dddc      	ble.n	8000652 <MoveOnX>
	@IF it didnt jump, this means that X moving has reached it's limits
	@reset it firstly,
	MOV R3,R0
 8000698:	4603      	mov	r3, r0
	@Then, increment current Y position
	ADD R5,R5,#1
 800069a:	f105 0501 	add.w	r5, r5, #1
	@CHECK IF Y reached it's limit
	CMP R5,R4	    @if Y moving <= Y end, KEEP GOING
 800069e:	42a5      	cmp	r5, r4
	BLE MoveOnX
 80006a0:	ddd7      	ble.n	8000652 <MoveOnX>
	POP {R0-R11,PC}
 80006a2:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006a6 <TFT_DISPLAY_PARALLEL_RECTANGLES>:
@USES R7 AS X1EMPTY
@USES R8 AS X2EMPTY
@USES R11 AS THE EMPTINESS BETWEEN THEM
@USES R12 AS COLOR
TFT_DISPLAY_PARALLEL_RECTANGLES:
	PUSH {R0-R2,R10,LR}
 80006a6:	e92d 4407 	stmdb	sp!, {r0, r1, r2, sl, lr}
	@FIRSTLY, DRAW THE FIRST RECTANGLE
	MOV R0,R5
 80006aa:	4628      	mov	r0, r5
	SUB R1,R7,#1
 80006ac:	f1a7 0101 	sub.w	r1, r7, #1
	MOV R10,R12
 80006b0:	46e2      	mov	sl, ip
	BL TFT_DRAW_RECTANGLE
 80006b2:	f7ff ff97 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@NOW, DRAW THE EMPTY "RECTANGLE"
	MOV R0,R7
 80006b6:	4638      	mov	r0, r7
	MOV R1,R8
 80006b8:	4641      	mov	r1, r8
	MOV R10,R11
 80006ba:	46da      	mov	sl, fp
	BL TFT_DRAW_RECTANGLE
 80006bc:	f7ff ff92 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@NOW, DRAW THE SECOND RECTANGLE
	ADD R0,R8,#1
 80006c0:	f108 0001 	add.w	r0, r8, #1
	MOV R1,R6
 80006c4:	4631      	mov	r1, r6
	MOV R10,R12
 80006c6:	46e2      	mov	sl, ip
	BL TFT_DRAW_RECTANGLE
 80006c8:	f7ff ff8c 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0-R2,R10,PC}
 80006cc:	e8bd 8407 	ldmia.w	sp!, {r0, r1, r2, sl, pc}

080006d0 <TFT_DISPLAY_LEFTSIDE_RECTANGLE>:
@USES R6 AS X2
@USES R7 AS X1EMPTY
@USES R11 AS THE EMPTINESS BETWEEN THEM
@USES R12 AS COLOR
TFT_DISPLAY_LEFTSIDE_RECTANGLE:
	PUSH {R0-R2,R10,LR}
 80006d0:	e92d 4407 	stmdb	sp!, {r0, r1, r2, sl, lr}
	@FIRSTLY, DRAW THE RECTANGLE
	MOV R0,R5
 80006d4:	4628      	mov	r0, r5
	SUB R1,R7,#1
 80006d6:	f1a7 0101 	sub.w	r1, r7, #1
	MOV R10,R12
 80006da:	46e2      	mov	sl, ip
	BL TFT_DRAW_RECTANGLE
 80006dc:	f7ff ff82 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@NOW, DRAW THE EMPTY "RECTANGLE"
	MOV R0,R7
 80006e0:	4638      	mov	r0, r7
	MOV R1,R6
 80006e2:	4631      	mov	r1, r6
	MOV R10,R11
 80006e4:	46da      	mov	sl, fp
	BL TFT_DRAW_RECTANGLE
 80006e6:	f7ff ff7d 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0-R2,R10,PC}
 80006ea:	e8bd 8407 	ldmia.w	sp!, {r0, r1, r2, sl, pc}

080006ee <TFT_DISPLAY_RIGHTSIDE_RECTANGLE>:
@USES R6 AS X2
@USES R7 AS X1EMPTY
@USES R11 AS THE EMPTINESS BETWEEN THEM
@USES R12 AS COLOR
TFT_DISPLAY_RIGHTSIDE_RECTANGLE:
	PUSH {R0-R2,R10,LR}
 80006ee:	e92d 4407 	stmdb	sp!, {r0, r1, r2, sl, lr}
	@FIRSTY, DRAW THE EMPTY "RECTANGLE"
	MOV R0,R5
 80006f2:	4628      	mov	r0, r5
	MOV R1,R7
 80006f4:	4639      	mov	r1, r7
	MOV R10,R11
 80006f6:	46da      	mov	sl, fp
	BL TFT_DRAW_RECTANGLE
 80006f8:	f7ff ff74 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@THEN, DRAW THE RECTANGLE
	ADD R0,R7,#1
 80006fc:	f107 0001 	add.w	r0, r7, #1
	MOV R1,R6
 8000700:	4631      	mov	r1, r6
	MOV R10,R12
 8000702:	46e2      	mov	sl, ip
	BL TFT_DRAW_RECTANGLE
 8000704:	f7ff ff6e 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0-R2,R10,PC}
 8000708:	e8bd 8407 	ldmia.w	sp!, {r0, r1, r2, sl, pc}

0800070c <TFT_DISPLAY_DIGIT>:
@NOTE THAT: HEIGHT OF A NUMBER = 20, WIDTH = 10
@USES R1 FOR DIGIT
@USES R10 FOR COLOUR
@USES R11 FOR EMPTY COLOUR
TFT_DISPLAY_DIGIT:
	PUSH {R0-R3,LR}
 800070c:	b50f      	push	{r0, r1, r2, r3, lr}
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 800070e:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 8000712:	f7ff fee7 	bl	80004e4 <TFT_WRITE_COMMAND>

08000716 <DisplayDigit0>:
DisplayDigit0:
	CMP R1,#0
 8000716:	2900      	cmp	r1, #0
	BHI DisplayDigit1
 8000718:	d841      	bhi.n	800079e <DisplayDigit1>
	@if number = 0
	LDR R0,=50
 800071a:	f04f 0032 	mov.w	r0, #50	; 0x32

0800071e <IterationOf00>:
	IterationOf00:
		LSR R2,R10,#8
 800071e:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000722:	f7ff fed5 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000726:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800072a:	f7ff fed1 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 800072e:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000732:	2800      	cmp	r0, #0
		BHI IterationOf00
 8000734:	d8f3      	bhi.n	800071e <IterationOf00>
		LDR R0,=0
 8000736:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 800073a:	f04f 0300 	mov.w	r3, #0

0800073e <IterationOf01>:
	IterationOf01:
		CMP R0,#2
 800073e:	2802      	cmp	r0, #2
		BLO DisplayNumber01
 8000740:	d302      	bcc.n	8000748 <DisplayNumber01>
		CMP R0,#7
 8000742:	2807      	cmp	r0, #7
		BHI DisplayNumber01
 8000744:	d800      	bhi.n	8000748 <DisplayNumber01>
		B DontDisplayNumber01
 8000746:	e008      	b.n	800075a <DontDisplayNumber01>

08000748 <DisplayNumber01>:
	DisplayNumber01:
		LSR R2,R10,#8
 8000748:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 800074c:	f7ff fec0 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000750:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000754:	f7ff febc 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber01
 8000758:	e008      	b.n	800076c <SkipNumber01>

0800075a <DontDisplayNumber01>:
	DontDisplayNumber01:
		LSR R2,R11,#8
 800075a:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 800075e:	f7ff feb7 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000762:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000766:	f7ff feb3 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber01
 800076a:	e7ff      	b.n	800076c <SkipNumber01>

0800076c <SkipNumber01>:
	SkipNumber01:
		ADD R0,R0,#1
 800076c:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000770:	280a      	cmp	r0, #10
		BLO IterationOf01
 8000772:	d3e4      	bcc.n	800073e <IterationOf01>
		LDR R0,=0
 8000774:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000778:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#10
 800077c:	2b0a      	cmp	r3, #10
		BLO IterationOf01
 800077e:	d3de      	bcc.n	800073e <IterationOf01>
		LDR R0,=50
 8000780:	f04f 0032 	mov.w	r0, #50	; 0x32

08000784 <IterationOf02>:
	IterationOf02:
		LSR R2,R10,#8
 8000784:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000788:	f7ff fea2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 800078c:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000790:	f7ff fe9e 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000794:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000798:	2800      	cmp	r0, #0
		BHI IterationOf02
 800079a:	d8f3      	bhi.n	8000784 <IterationOf02>
		@END OF DISPLAY DIGIT 0
		B EndOfDisplayingDigit
 800079c:	e353      	b.n	8000e46 <EndOfDisplayingDigit>

0800079e <DisplayDigit1>:
DisplayDigit1:
		CMP R1,#1
 800079e:	2901      	cmp	r1, #1
		BHI DisplayDigit2
 80007a0:	d830      	bhi.n	8000804 <DisplayDigit2>
		@if number = 1
		LDR R0,=0
 80007a2:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 80007a6:	f04f 0300 	mov.w	r3, #0

080007aa <IterationOf10>:
	IterationOf10:
		CMP R0,#7
 80007aa:	2807      	cmp	r0, #7
		BLO DontDisplayNumber10
 80007ac:	d308      	bcc.n	80007c0 <DontDisplayNumber10>
		LSR R2,R10,#8
 80007ae:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80007b2:	f7ff fe8d 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80007b6:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80007ba:	f7ff fe89 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber10
 80007be:	e008      	b.n	80007d2 <SkipNumber10>

080007c0 <DontDisplayNumber10>:
	DontDisplayNumber10:
		LSR R2,R11,#8
 80007c0:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 80007c4:	f7ff fe84 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 80007c8:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 80007cc:	f7ff fe80 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber10
 80007d0:	e7ff      	b.n	80007d2 <SkipNumber10>

080007d2 <SkipNumber10>:
	SkipNumber10:
		ADD R0,R0,#1
 80007d2:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 80007d6:	280a      	cmp	r0, #10
		BLO IterationOf10
 80007d8:	d3e7      	bcc.n	80007aa <IterationOf10>
		LDR R0,=0
 80007da:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 80007de:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#14
 80007e2:	2b0e      	cmp	r3, #14
		BLO IterationOf10
 80007e4:	d3e1      	bcc.n	80007aa <IterationOf10>
		LDR R0,=50
 80007e6:	f04f 0032 	mov.w	r0, #50	; 0x32

080007ea <IterationOf11>:
	IterationOf11:
		LSR R2,R10,#8
 80007ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80007ee:	f7ff fe6f 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80007f2:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80007f6:	f7ff fe6b 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 80007fa:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 80007fe:	2800      	cmp	r0, #0
		BHI IterationOf11
 8000800:	d8f3      	bhi.n	80007ea <IterationOf11>
		@END OF DISPLAY DIGIT 1
		B EndOfDisplayingDigit
 8000802:	e320      	b.n	8000e46 <EndOfDisplayingDigit>

08000804 <DisplayDigit2>:
DisplayDigit2:
		CMP R1,#2
 8000804:	2902      	cmp	r1, #2
		BHI DisplayDigit3
 8000806:	d86e      	bhi.n	80008e6 <DisplayDigit3>
		@if number = 2
		LDR R0,=40
 8000808:	f04f 0028 	mov.w	r0, #40	; 0x28

0800080c <IterationOf20>:
	IterationOf20:
		LSR R2,R10,#8
 800080c:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000810:	f7ff fe5e 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000814:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000818:	f7ff fe5a 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 800081c:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000820:	2800      	cmp	r0, #0
		BHI IterationOf20
 8000822:	d8f3      	bhi.n	800080c <IterationOf20>
		LDR R0,=0
 8000824:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000828:	f04f 0300 	mov.w	r3, #0

0800082c <IterationOf21>:
	IterationOf21:
		CMP R0,#3
 800082c:	2803      	cmp	r0, #3
		BHI DontDisplayNumber21
 800082e:	d808      	bhi.n	8000842 <DontDisplayNumber21>
		LSR R2,R10,#8
 8000830:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000834:	f7ff fe4c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000838:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800083c:	f7ff fe48 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber21
 8000840:	e008      	b.n	8000854 <SkipNumber21>

08000842 <DontDisplayNumber21>:
	DontDisplayNumber21:
		LSR R2,R11,#8
 8000842:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000846:	f7ff fe43 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 800084a:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 800084e:	f7ff fe3f 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber21
 8000852:	e7ff      	b.n	8000854 <SkipNumber21>

08000854 <SkipNumber21>:
	SkipNumber21:
		ADD R0,R0,#1
 8000854:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000858:	280a      	cmp	r0, #10
		BLO IterationOf21
 800085a:	d3e7      	bcc.n	800082c <IterationOf21>
		LDR R0,=0
 800085c:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000860:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 8000864:	2b03      	cmp	r3, #3
		BLO IterationOf21
 8000866:	d3e1      	bcc.n	800082c <IterationOf21>
		LDR R0,=40
 8000868:	f04f 0028 	mov.w	r0, #40	; 0x28

0800086c <IterationOf22>:
	IterationOf22:
		LSR R2,R10,#8
 800086c:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000870:	f7ff fe2e 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000874:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000878:	f7ff fe2a 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 800087c:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000880:	2800      	cmp	r0, #0
		BHI IterationOf22
 8000882:	d8f3      	bhi.n	800086c <IterationOf22>
		LDR R0,=0
 8000884:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000888:	f04f 0300 	mov.w	r3, #0

0800088c <IterationOf23>:
	IterationOf23:
		CMP R0,#7
 800088c:	2807      	cmp	r0, #7
		BLO DontDisplayNumber23
 800088e:	d308      	bcc.n	80008a2 <DontDisplayNumber23>
		LSR R2,R10,#8
 8000890:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000894:	f7ff fe1c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000898:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800089c:	f7ff fe18 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber23
 80008a0:	e008      	b.n	80008b4 <SkipNumber23>

080008a2 <DontDisplayNumber23>:
	DontDisplayNumber23:
		LSR R2,R11,#8
 80008a2:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 80008a6:	f7ff fe13 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 80008aa:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 80008ae:	f7ff fe0f 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber23
 80008b2:	e7ff      	b.n	80008b4 <SkipNumber23>

080008b4 <SkipNumber23>:
	SkipNumber23:
		ADD R0,R0,#1
 80008b4:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 80008b8:	280a      	cmp	r0, #10
		BLO IterationOf23
 80008ba:	d3e7      	bcc.n	800088c <IterationOf23>
		LDR R0,=0
 80008bc:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 80008c0:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 80008c4:	2b03      	cmp	r3, #3
		BLO IterationOf23
 80008c6:	d3e1      	bcc.n	800088c <IterationOf23>
		LDR R0,=40
 80008c8:	f04f 0028 	mov.w	r0, #40	; 0x28

080008cc <IterationOf24>:
	IterationOf24:
		LSR R2,R10,#8
 80008cc:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80008d0:	f7ff fdfe 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80008d4:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80008d8:	f7ff fdfa 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 80008dc:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 80008e0:	2800      	cmp	r0, #0
		BHI IterationOf24
 80008e2:	d8f3      	bhi.n	80008cc <IterationOf24>
		@END OF DISPLAY DIGIT 2
		B EndOfDisplayingDigit
 80008e4:	e2af      	b.n	8000e46 <EndOfDisplayingDigit>

080008e6 <DisplayDigit3>:
DisplayDigit3:
		CMP R1,#3
 80008e6:	2903      	cmp	r1, #3
		BHI DisplayDigit4
 80008e8:	d86e      	bhi.n	80009c8 <DisplayDigit4>
		@if number = 3
		LDR R0,=40
 80008ea:	f04f 0028 	mov.w	r0, #40	; 0x28

080008ee <IterationOf30>:
	IterationOf30:
		LSR R2,R10,#8
 80008ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80008f2:	f7ff fded 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80008f6:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80008fa:	f7ff fde9 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 80008fe:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000902:	2800      	cmp	r0, #0
		BHI IterationOf30
 8000904:	d8f3      	bhi.n	80008ee <IterationOf30>
		LDR R0,=0
 8000906:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 800090a:	f04f 0300 	mov.w	r3, #0

0800090e <IterationOf31>:
	IterationOf31:
		CMP R0,#7
 800090e:	2807      	cmp	r0, #7
		BLO DontDisplayNumber31
 8000910:	d308      	bcc.n	8000924 <DontDisplayNumber31>
		LSR R2,R10,#8
 8000912:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000916:	f7ff fddb 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 800091a:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800091e:	f7ff fdd7 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber31
 8000922:	e008      	b.n	8000936 <SkipNumber31>

08000924 <DontDisplayNumber31>:
	DontDisplayNumber31:
		LSR R2,R11,#8
 8000924:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000928:	f7ff fdd2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 800092c:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000930:	f7ff fdce 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber31
 8000934:	e7ff      	b.n	8000936 <SkipNumber31>

08000936 <SkipNumber31>:
	SkipNumber31:
		ADD R0,R0,#1
 8000936:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 800093a:	280a      	cmp	r0, #10
		BLO IterationOf31
 800093c:	d3e7      	bcc.n	800090e <IterationOf31>
		LDR R0,=0
 800093e:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000942:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 8000946:	2b03      	cmp	r3, #3
		BLO IterationOf31
 8000948:	d3e1      	bcc.n	800090e <IterationOf31>
		LDR R0,=40
 800094a:	f04f 0028 	mov.w	r0, #40	; 0x28

0800094e <IterationOf32>:
	IterationOf32:
		LSR R2,R10,#8
 800094e:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000952:	f7ff fdbd 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000956:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800095a:	f7ff fdb9 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 800095e:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000962:	2800      	cmp	r0, #0
		BHI IterationOf32
 8000964:	d8f3      	bhi.n	800094e <IterationOf32>
		LDR R0,=0
 8000966:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 800096a:	f04f 0300 	mov.w	r3, #0

0800096e <IterationOf33>:
	IterationOf33:
		CMP R0,#7
 800096e:	2807      	cmp	r0, #7
		BLO DontDisplayNumber33
 8000970:	d308      	bcc.n	8000984 <DontDisplayNumber33>
		LSR R2,R10,#8
 8000972:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000976:	f7ff fdab 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 800097a:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 800097e:	f7ff fda7 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber33
 8000982:	e008      	b.n	8000996 <SkipNumber33>

08000984 <DontDisplayNumber33>:
	DontDisplayNumber33:
		LSR R2,R11,#8
 8000984:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000988:	f7ff fda2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 800098c:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000990:	f7ff fd9e 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber33
 8000994:	e7ff      	b.n	8000996 <SkipNumber33>

08000996 <SkipNumber33>:
	SkipNumber33:
		ADD R0,R0,#1
 8000996:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 800099a:	280a      	cmp	r0, #10
		BLO IterationOf33
 800099c:	d3e7      	bcc.n	800096e <IterationOf33>
		LDR R0,=0
 800099e:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 80009a2:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 80009a6:	2b03      	cmp	r3, #3
		BLO IterationOf33
 80009a8:	d3e1      	bcc.n	800096e <IterationOf33>
		LDR R0,=40
 80009aa:	f04f 0028 	mov.w	r0, #40	; 0x28

080009ae <IterationOf34>:
	IterationOf34:
		LSR R2,R10,#8
 80009ae:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80009b2:	f7ff fd8d 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80009b6:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80009ba:	f7ff fd89 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 80009be:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 80009c2:	2800      	cmp	r0, #0
		BHI IterationOf34
 80009c4:	d8f3      	bhi.n	80009ae <IterationOf34>
		@END OF DISPLAY DIGIT 3
		B EndOfDisplayingDigit
 80009c6:	e23e      	b.n	8000e46 <EndOfDisplayingDigit>

080009c8 <DisplayDigit4>:
DisplayDigit4:
		CMP R1,#4
 80009c8:	2904      	cmp	r1, #4
		BHI DisplayDigit5
 80009ca:	d855      	bhi.n	8000a78 <DisplayDigit5>
		@if number = 4
		LDR R0,=0
 80009cc:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 80009d0:	f04f 0300 	mov.w	r3, #0

080009d4 <IterationOf40>:
	IterationOf40:
		CMP R0,#7
 80009d4:	2807      	cmp	r0, #7
		BLO DontDisplayNumber40
 80009d6:	d308      	bcc.n	80009ea <DontDisplayNumber40>
		LSR R2,R10,#8
 80009d8:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 80009dc:	f7ff fd78 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 80009e0:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 80009e4:	f7ff fd74 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber40
 80009e8:	e008      	b.n	80009fc <SkipNumber40>

080009ea <DontDisplayNumber40>:
	DontDisplayNumber40:
		LSR R2,R11,#8
 80009ea:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 80009ee:	f7ff fd6f 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 80009f2:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 80009f6:	f7ff fd6b 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber40
 80009fa:	e7ff      	b.n	80009fc <SkipNumber40>

080009fc <SkipNumber40>:
	SkipNumber40:
		ADD R0,R0,#1
 80009fc:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000a00:	280a      	cmp	r0, #10
		BLO IterationOf40
 8000a02:	d3e7      	bcc.n	80009d4 <IterationOf40>
		LDR R0,=0
 8000a04:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000a08:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#7
 8000a0c:	2b07      	cmp	r3, #7
		BLO IterationOf40
 8000a0e:	d3e1      	bcc.n	80009d4 <IterationOf40>
		LDR R0,=60
 8000a10:	f04f 003c 	mov.w	r0, #60	; 0x3c

08000a14 <IterationOf41>:
	IterationOf41:
		LSR R2,R10,#8
 8000a14:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000a18:	f7ff fd5a 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000a1c:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000a20:	f7ff fd56 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000a24:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000a28:	2800      	cmp	r0, #0
		BHI IterationOf41
 8000a2a:	d8f3      	bhi.n	8000a14 <IterationOf41>
		LDR R0,=0
 8000a2c:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000a30:	f04f 0300 	mov.w	r3, #0

08000a34 <IterationOf42>:
	IterationOf42:
		CMP R0,#3
 8000a34:	2803      	cmp	r0, #3
		BLO DisplayNumber42
 8000a36:	d302      	bcc.n	8000a3e <DisplayNumber42>
		CMP R0,#6
 8000a38:	2806      	cmp	r0, #6
		BHI DisplayNumber42
 8000a3a:	d800      	bhi.n	8000a3e <DisplayNumber42>
		B DontDisplayNumber42
 8000a3c:	e008      	b.n	8000a50 <DontDisplayNumber42>

08000a3e <DisplayNumber42>:
	DisplayNumber42:
		LSR R2,R10,#8
 8000a3e:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000a42:	f7ff fd45 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000a46:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000a4a:	f7ff fd41 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber42
 8000a4e:	e008      	b.n	8000a62 <SkipNumber42>

08000a50 <DontDisplayNumber42>:
	DontDisplayNumber42:
		LSR R2,R11,#8
 8000a50:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000a54:	f7ff fd3c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000a58:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000a5c:	f7ff fd38 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber42
 8000a60:	e7ff      	b.n	8000a62 <SkipNumber42>

08000a62 <SkipNumber42>:
	SkipNumber42:
		ADD R0,R0,#1
 8000a62:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000a66:	280a      	cmp	r0, #10
		BLO IterationOf42
 8000a68:	d3e4      	bcc.n	8000a34 <IterationOf42>
		LDR R0,=0
 8000a6a:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000a6e:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#7
 8000a72:	2b07      	cmp	r3, #7
		BLO IterationOf42
 8000a74:	d3de      	bcc.n	8000a34 <IterationOf42>
		@END OF DISPLAY DIGIT 4
		B EndOfDisplayingDigit
 8000a76:	e1e6      	b.n	8000e46 <EndOfDisplayingDigit>

08000a78 <DisplayDigit5>:
DisplayDigit5:
		CMP R1,#5
 8000a78:	2905      	cmp	r1, #5
		BHI DisplayDigit6
 8000a7a:	d870      	bhi.n	8000b5e <DisplayDigit6>
		@if number = 5
		LDR R0,=40
 8000a7c:	f04f 0028 	mov.w	r0, #40	; 0x28

08000a80 <IterationOf50>:
	IterationOf50:
		LSR R2,R10,#8
 8000a80:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000a84:	f7ff fd24 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000a88:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000a8c:	f7ff fd20 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000a90:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000a94:	2800      	cmp	r0, #0
		BHI IterationOf50
 8000a96:	d8f3      	bhi.n	8000a80 <IterationOf50>
		LDR R0,=0
 8000a98:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000a9c:	f04f 0300 	mov.w	r3, #0

08000aa0 <IterationOf51>:
	IterationOf51:
		CMP R0,#7
 8000aa0:	2807      	cmp	r0, #7
		BLO DontDisplayNumber51
 8000aa2:	d308      	bcc.n	8000ab6 <DontDisplayNumber51>
		LSR R2,R10,#8
 8000aa4:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000aa8:	f7ff fd12 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000aac:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000ab0:	f7ff fd0e 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber51
 8000ab4:	e00a      	b.n	8000acc <SkipNumber51>

08000ab6 <DontDisplayNumber51>:
	DontDisplayNumber51:
		LDR R2,=0
 8000ab6:	f04f 0200 	mov.w	r2, #0
		LSR R2,R11,#8
 8000aba:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000abe:	f7ff fd07 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000ac2:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000ac6:	f7ff fd03 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber51
 8000aca:	e7ff      	b.n	8000acc <SkipNumber51>

08000acc <SkipNumber51>:
	SkipNumber51:
		ADD R0,R0,#1
 8000acc:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000ad0:	280a      	cmp	r0, #10
		BLO IterationOf51
 8000ad2:	d3e5      	bcc.n	8000aa0 <IterationOf51>
		LDR R0,=0
 8000ad4:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000ad8:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 8000adc:	2b03      	cmp	r3, #3
		BLO IterationOf51
 8000ade:	d3df      	bcc.n	8000aa0 <IterationOf51>
		LDR R0,=40
 8000ae0:	f04f 0028 	mov.w	r0, #40	; 0x28

08000ae4 <IterationOf52>:
	IterationOf52:
		LSR R2,R10,#8
 8000ae4:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000ae8:	f7ff fcf2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000aec:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000af0:	f7ff fcee 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000af4:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000af8:	2800      	cmp	r0, #0
		BHI IterationOf52
 8000afa:	d8f3      	bhi.n	8000ae4 <IterationOf52>
		LDR R0,=0
 8000afc:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000b00:	f04f 0300 	mov.w	r3, #0

08000b04 <IterationOf53>:
	IterationOf53:
		CMP R0,#3
 8000b04:	2803      	cmp	r0, #3
		BHI DontDisplayNumber53
 8000b06:	d808      	bhi.n	8000b1a <DontDisplayNumber53>
		LSR R2,R10,#8
 8000b08:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000b0c:	f7ff fce0 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000b10:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000b14:	f7ff fcdc 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber53
 8000b18:	e008      	b.n	8000b2c <SkipNumber53>

08000b1a <DontDisplayNumber53>:
	DontDisplayNumber53:
		LSR R2,R11,#8
 8000b1a:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000b1e:	f7ff fcd7 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000b22:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000b26:	f7ff fcd3 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber53
 8000b2a:	e7ff      	b.n	8000b2c <SkipNumber53>

08000b2c <SkipNumber53>:
	SkipNumber53:
		ADD R0,R0,#1
 8000b2c:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000b30:	280a      	cmp	r0, #10
		BLO IterationOf53
 8000b32:	d3e7      	bcc.n	8000b04 <IterationOf53>
		LDR R0,=0
 8000b34:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000b38:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#3
 8000b3c:	2b03      	cmp	r3, #3
		BLO IterationOf53
 8000b3e:	d3e1      	bcc.n	8000b04 <IterationOf53>
		LDR R0,=40
 8000b40:	f04f 0028 	mov.w	r0, #40	; 0x28

08000b44 <IterationOf54>:
	IterationOf54:
		LSR R2,R10,#8
 8000b44:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000b48:	f7ff fcc2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000b4c:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000b50:	f7ff fcbe 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000b54:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000b58:	2800      	cmp	r0, #0
		BHI IterationOf54
 8000b5a:	d8f3      	bhi.n	8000b44 <IterationOf54>
		@END OF DISPLAY DIGIT 5
		B EndOfDisplayingDigit
 8000b5c:	e173      	b.n	8000e46 <EndOfDisplayingDigit>

08000b5e <DisplayDigit6>:
DisplayDigit6:
		CMP R1,#6
 8000b5e:	2906      	cmp	r1, #6
		BHI DisplayDigit7
 8000b60:	d863      	bhi.n	8000c2a <DisplayDigit7>
		@if number = 6
		LDR R0,=40
 8000b62:	f04f 0028 	mov.w	r0, #40	; 0x28

08000b66 <IterationOf60>:
	IterationOf60:
		LSR R2,R10,#8
 8000b66:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000b6a:	f7ff fcb1 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000b6e:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000b72:	f7ff fcad 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000b76:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000b7a:	2800      	cmp	r0, #0
		BHI IterationOf60
 8000b7c:	d8f3      	bhi.n	8000b66 <IterationOf60>
		LDR R0,=0
 8000b7e:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000b82:	f04f 0300 	mov.w	r3, #0

08000b86 <IterationOf61>:
	IterationOf61:
		CMP R0,#3
 8000b86:	2803      	cmp	r0, #3
		BLO DisplayNumber61
 8000b88:	d302      	bcc.n	8000b90 <DisplayNumber61>
		CMP R0,#6
 8000b8a:	2806      	cmp	r0, #6
		BHI DisplayNumber61
 8000b8c:	d800      	bhi.n	8000b90 <DisplayNumber61>
		B DontDisplayNumber61
 8000b8e:	e008      	b.n	8000ba2 <DontDisplayNumber61>

08000b90 <DisplayNumber61>:
	DisplayNumber61:
		LSR R2,R10,#8
 8000b90:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000b94:	f7ff fc9c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000b98:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000b9c:	f7ff fc98 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber61
 8000ba0:	e008      	b.n	8000bb4 <SkipNumber61>

08000ba2 <DontDisplayNumber61>:
	DontDisplayNumber61:
		LSR R2,R11,#8
 8000ba2:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000ba6:	f7ff fc93 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000baa:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000bae:	f7ff fc8f 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber61
 8000bb2:	e7ff      	b.n	8000bb4 <SkipNumber61>

08000bb4 <SkipNumber61>:
	SkipNumber61:
		ADD R0,R0,#1
 8000bb4:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000bb8:	280a      	cmp	r0, #10
		BLO IterationOf61
 8000bba:	d3e4      	bcc.n	8000b86 <IterationOf61>
		LDR R0,=0
 8000bbc:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000bc0:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#6
 8000bc4:	2b06      	cmp	r3, #6
		BLO IterationOf61
 8000bc6:	d3de      	bcc.n	8000b86 <IterationOf61>
		LDR R0,=40
 8000bc8:	f04f 0028 	mov.w	r0, #40	; 0x28

08000bcc <IterationOf62>:
	IterationOf62:
		LSR R2,R10,#8
 8000bcc:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000bd0:	f7ff fc7e 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000bd4:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000bd8:	f7ff fc7a 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000bdc:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000be0:	2800      	cmp	r0, #0
		BHI IterationOf62
 8000be2:	d8f3      	bhi.n	8000bcc <IterationOf62>
		LDR R0,=0
 8000be4:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000be8:	f04f 0300 	mov.w	r3, #0

08000bec <IterationOf63>:
	IterationOf63:
		CMP R0,#3
 8000bec:	2803      	cmp	r0, #3
		BHI DontDisplayNumber63
 8000bee:	d808      	bhi.n	8000c02 <DontDisplayNumber63>
		LSR R2,R10,#8
 8000bf0:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000bf4:	f7ff fc6c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000bf8:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000bfc:	f7ff fc68 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber63
 8000c00:	e008      	b.n	8000c14 <SkipNumber63>

08000c02 <DontDisplayNumber63>:
	DontDisplayNumber63:
		LSR R2,R11,#8
 8000c02:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000c06:	f7ff fc63 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000c0a:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000c0e:	f7ff fc5f 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber63
 8000c12:	e7ff      	b.n	8000c14 <SkipNumber63>

08000c14 <SkipNumber63>:
	SkipNumber63:
		ADD R0,R0,#1
 8000c14:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000c18:	280a      	cmp	r0, #10
		BLO IterationOf63
 8000c1a:	d3e7      	bcc.n	8000bec <IterationOf63>
		LDR R0,=0
 8000c1c:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000c20:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#6
 8000c24:	2b06      	cmp	r3, #6
		BLO IterationOf63
 8000c26:	d3e1      	bcc.n	8000bec <IterationOf63>
		@END OF DISPLAY DIGIT 6
		B EndOfDisplayingDigit
 8000c28:	e10d      	b.n	8000e46 <EndOfDisplayingDigit>

08000c2a <DisplayDigit7>:
DisplayDigit7:
		CMP R1,#7
 8000c2a:	2907      	cmp	r1, #7
		BHI DisplayDigit8
 8000c2c:	d830      	bhi.n	8000c90 <DisplayDigit8>
		@if number = 7
		LDR R0,=0
 8000c2e:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000c32:	f04f 0300 	mov.w	r3, #0

08000c36 <IterationOf70>:
	IterationOf70:
		CMP R0,#7
 8000c36:	2807      	cmp	r0, #7
		BLO DontDisplayNumber70
 8000c38:	d308      	bcc.n	8000c4c <DontDisplayNumber70>
		LSR R2,R10,#8
 8000c3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000c3e:	f7ff fc47 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000c42:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000c46:	f7ff fc43 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber70
 8000c4a:	e008      	b.n	8000c5e <SkipNumber70>

08000c4c <DontDisplayNumber70>:
	DontDisplayNumber70:
		LSR R2,R11,#8
 8000c4c:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000c50:	f7ff fc3e 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000c54:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000c58:	f7ff fc3a 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber70
 8000c5c:	e7ff      	b.n	8000c5e <SkipNumber70>

08000c5e <SkipNumber70>:
	SkipNumber70:
		ADD R0,R0,#1
 8000c5e:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000c62:	280a      	cmp	r0, #10
		BLO IterationOf70
 8000c64:	d3e7      	bcc.n	8000c36 <IterationOf70>
		LDR R0,=0
 8000c66:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000c6a:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#14
 8000c6e:	2b0e      	cmp	r3, #14
		BLO IterationOf70
 8000c70:	d3e1      	bcc.n	8000c36 <IterationOf70>
		LDR R0,=50
 8000c72:	f04f 0032 	mov.w	r0, #50	; 0x32

08000c76 <IterationOf71>:
	IterationOf71:
		LSR R2,R10,#8
 8000c76:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000c7a:	f7ff fc29 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000c7e:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000c82:	f7ff fc25 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000c86:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000c8a:	2800      	cmp	r0, #0
		BHI IterationOf71
 8000c8c:	d8f3      	bhi.n	8000c76 <IterationOf71>
		@END OF DISPLAY DIGIT 7
		B EndOfDisplayingDigit
 8000c8e:	e0da      	b.n	8000e46 <EndOfDisplayingDigit>

08000c90 <DisplayDigit8>:
DisplayDigit8:
		CMP R1,#8
 8000c90:	2908      	cmp	r1, #8
		BHI DisplayDigit9
 8000c92:	d874      	bhi.n	8000d7e <DisplayDigit9>
		@if number = 8
		LDR R0,=40
 8000c94:	f04f 0028 	mov.w	r0, #40	; 0x28

08000c98 <IterationOf80>:
	IterationOf80:
		LSR R2,R10,#8
 8000c98:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000c9c:	f7ff fc18 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000ca0:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000ca4:	f7ff fc14 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000ca8:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000cac:	2800      	cmp	r0, #0
		BHI IterationOf80
 8000cae:	d8f3      	bhi.n	8000c98 <IterationOf80>
		LDR R0,=0
 8000cb0:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000cb4:	f04f 0300 	mov.w	r3, #0

08000cb8 <IterationOf81>:
	IterationOf81:
		CMP R0,#3
 8000cb8:	2803      	cmp	r0, #3
		BLO DisplayNumber81
 8000cba:	d302      	bcc.n	8000cc2 <DisplayNumber81>
		CMP R0,#6
 8000cbc:	2806      	cmp	r0, #6
		BHI DisplayNumber81
 8000cbe:	d800      	bhi.n	8000cc2 <DisplayNumber81>
		B DontDisplayNumber81
 8000cc0:	e008      	b.n	8000cd4 <DontDisplayNumber81>

08000cc2 <DisplayNumber81>:
	DisplayNumber81:
		LSR R2,R10,#8
 8000cc2:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000cc6:	f7ff fc03 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000cca:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000cce:	f7ff fbff 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber81
 8000cd2:	e008      	b.n	8000ce6 <SkipNumber81>

08000cd4 <DontDisplayNumber81>:
	DontDisplayNumber81:
		LSR R2,R11,#8
 8000cd4:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000cd8:	f7ff fbfa 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000cdc:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000ce0:	f7ff fbf6 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber81
 8000ce4:	e7ff      	b.n	8000ce6 <SkipNumber81>

08000ce6 <SkipNumber81>:
	SkipNumber81:
		ADD R0,R0,#1
 8000ce6:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000cea:	280a      	cmp	r0, #10
		BLO IterationOf81
 8000cec:	d3e4      	bcc.n	8000cb8 <IterationOf81>
		LDR R0,=0
 8000cee:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000cf2:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#4
 8000cf6:	2b04      	cmp	r3, #4
		BLO IterationOf81
 8000cf8:	d3de      	bcc.n	8000cb8 <IterationOf81>
		LDR R0,=40
 8000cfa:	f04f 0028 	mov.w	r0, #40	; 0x28

08000cfe <IterationOf82>:
	IterationOf82:
		LSR R2,R10,#8
 8000cfe:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000d02:	f7ff fbe5 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000d06:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000d0a:	f7ff fbe1 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000d0e:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000d12:	2800      	cmp	r0, #0
		BHI IterationOf82
 8000d14:	d8f3      	bhi.n	8000cfe <IterationOf82>
		LDR R0,=0
 8000d16:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000d1a:	f04f 0300 	mov.w	r3, #0

08000d1e <IterationOf83>:
	IterationOf83:
		CMP R0,#3
 8000d1e:	2803      	cmp	r0, #3
		BLO DisplayNumber83
 8000d20:	d302      	bcc.n	8000d28 <DisplayNumber83>
		CMP R0,#6
 8000d22:	2806      	cmp	r0, #6
		BHI DisplayNumber83
 8000d24:	d800      	bhi.n	8000d28 <DisplayNumber83>
		B DontDisplayNumber83
 8000d26:	e008      	b.n	8000d3a <DontDisplayNumber83>

08000d28 <DisplayNumber83>:
	DisplayNumber83:
		LSR R2,R10,#8
 8000d28:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000d2c:	f7ff fbd0 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000d30:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000d34:	f7ff fbcc 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber83
 8000d38:	e008      	b.n	8000d4c <SkipNumber83>

08000d3a <DontDisplayNumber83>:
	DontDisplayNumber83:
		LSR R2,R11,#8
 8000d3a:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000d3e:	f7ff fbc7 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000d42:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000d46:	f7ff fbc3 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber83
 8000d4a:	e7ff      	b.n	8000d4c <SkipNumber83>

08000d4c <SkipNumber83>:
	SkipNumber83:
		ADD R0,R0,#1
 8000d4c:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000d50:	280a      	cmp	r0, #10
		BLO IterationOf83
 8000d52:	d3e4      	bcc.n	8000d1e <IterationOf83>
		LDR R0,=0
 8000d54:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000d58:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#4
 8000d5c:	2b04      	cmp	r3, #4
		BLO IterationOf83
 8000d5e:	d3de      	bcc.n	8000d1e <IterationOf83>
		LDR R0,=40
 8000d60:	f04f 0028 	mov.w	r0, #40	; 0x28

08000d64 <IterationOf84>:
	IterationOf84:
		LSR R2,R10,#8
 8000d64:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000d68:	f7ff fbb2 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000d6c:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000d70:	f7ff fbae 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000d74:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000d78:	2800      	cmp	r0, #0
		BHI IterationOf84
 8000d7a:	d8f3      	bhi.n	8000d64 <IterationOf84>
		@END OF DISPLAY DIGIT 8
		B EndOfDisplayingDigit
 8000d7c:	e063      	b.n	8000e46 <EndOfDisplayingDigit>

08000d7e <DisplayDigit9>:
DisplayDigit9:
		LDR R0,=0
 8000d7e:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000d82:	f04f 0300 	mov.w	r3, #0

08000d86 <IterationOf90>:
	IterationOf90:
		CMP R0,#6
 8000d86:	2806      	cmp	r0, #6
		BLO DontDisplayNumber90
 8000d88:	d308      	bcc.n	8000d9c <DontDisplayNumber90>
		LSR R2,R10,#8
 8000d8a:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000d8e:	f7ff fb9f 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000d92:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000d96:	f7ff fb9b 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber90
 8000d9a:	e008      	b.n	8000dae <SkipNumber90>

08000d9c <DontDisplayNumber90>:
	DontDisplayNumber90:
		LSR R2,R11,#8
 8000d9c:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000da0:	f7ff fb96 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000da4:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000da8:	f7ff fb92 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber90
 8000dac:	e7ff      	b.n	8000dae <SkipNumber90>

08000dae <SkipNumber90>:
	SkipNumber90:
		ADD R0,R0,#1
 8000dae:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000db2:	280a      	cmp	r0, #10
		BLO IterationOf90
 8000db4:	d3e7      	bcc.n	8000d86 <IterationOf90>
		LDR R0,=0
 8000db6:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000dba:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#7
 8000dbe:	2b07      	cmp	r3, #7
		BLO IterationOf90
 8000dc0:	d3e1      	bcc.n	8000d86 <IterationOf90>
		LDR R0,=40
 8000dc2:	f04f 0028 	mov.w	r0, #40	; 0x28

08000dc6 <IterationOf91>:
	IterationOf91:
		LSR R2,R10,#8
 8000dc6:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000dca:	f7ff fb81 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000dce:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000dd2:	f7ff fb7d 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000dd6:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000dda:	2800      	cmp	r0, #0
		BHI IterationOf91
 8000ddc:	d8f3      	bhi.n	8000dc6 <IterationOf91>
		LDR R0,=0
 8000dde:	f04f 0000 	mov.w	r0, #0
		LDR R3,=0
 8000de2:	f04f 0300 	mov.w	r3, #0

08000de6 <IterationOf92>:
	IterationOf92:
		CMP R0,#3
 8000de6:	2803      	cmp	r0, #3
		BLO DisplayNumber92
 8000de8:	d302      	bcc.n	8000df0 <DisplayNumber92>
		CMP R0,#6
 8000dea:	2806      	cmp	r0, #6
		BHI DisplayNumber92
 8000dec:	d800      	bhi.n	8000df0 <DisplayNumber92>
		B DontDisplayNumber92
 8000dee:	e008      	b.n	8000e02 <DontDisplayNumber92>

08000df0 <DisplayNumber92>:
	DisplayNumber92:
		LSR R2,R10,#8
 8000df0:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000df4:	f7ff fb6c 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000df8:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000dfc:	f7ff fb68 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber92
 8000e00:	e008      	b.n	8000e14 <SkipNumber92>

08000e02 <DontDisplayNumber92>:
	DontDisplayNumber92:
		LSR R2,R11,#8
 8000e02:	ea4f 221b 	mov.w	r2, fp, lsr #8
		BL TFT_WRITE_DATA
 8000e06:	f7ff fb63 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R11,#0xFF
 8000e0a:	f00b 02ff 	and.w	r2, fp, #255	; 0xff
		BL TFT_WRITE_DATA
 8000e0e:	f7ff fb5f 	bl	80004d0 <TFT_WRITE_DATA>
		B SkipNumber92
 8000e12:	e7ff      	b.n	8000e14 <SkipNumber92>

08000e14 <SkipNumber92>:
	SkipNumber92:
		ADD R0,R0,#1
 8000e14:	f100 0001 	add.w	r0, r0, #1
		CMP R0,#10
 8000e18:	280a      	cmp	r0, #10
		BLO IterationOf92
 8000e1a:	d3e4      	bcc.n	8000de6 <IterationOf92>
		LDR R0,=0
 8000e1c:	f04f 0000 	mov.w	r0, #0
		ADD R3,R3,#1
 8000e20:	f103 0301 	add.w	r3, r3, #1
		CMP R3,#5
 8000e24:	2b05      	cmp	r3, #5
		BLO IterationOf92
 8000e26:	d3de      	bcc.n	8000de6 <IterationOf92>
		LDR R0,=40
 8000e28:	f04f 0028 	mov.w	r0, #40	; 0x28

08000e2c <IterationOf93>:
	IterationOf93:
		LSR R2,R10,#8
 8000e2c:	ea4f 221a 	mov.w	r2, sl, lsr #8
		BL TFT_WRITE_DATA
 8000e30:	f7ff fb4e 	bl	80004d0 <TFT_WRITE_DATA>
		AND R2,R10,#0xFF
 8000e34:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
		BL TFT_WRITE_DATA
 8000e38:	f7ff fb4a 	bl	80004d0 <TFT_WRITE_DATA>
		SUB R0,R0,#1
 8000e3c:	f1a0 0001 	sub.w	r0, r0, #1
		CMP R0,#0
 8000e40:	2800      	cmp	r0, #0
		BHI IterationOf93
 8000e42:	d8f3      	bhi.n	8000e2c <IterationOf93>
		@END OF DISPLAY DIGIT 9
		B EndOfDisplayingDigit
 8000e44:	e7ff      	b.n	8000e46 <EndOfDisplayingDigit>

08000e46 <EndOfDisplayingDigit>:
EndOfDisplayingDigit:
	POP {R0-R3,PC}
 8000e46:	bd0f      	pop	{r0, r1, r2, r3, pc}
	LDR R8,=INTERVAL
 8000e48:	00186004 	.word	0x00186004
	LDR R0,=GAMESELECT
 8000e4c:	200066b6 	.word	0x200066b6
	LDR R0,=GAMEFLAG
 8000e50:	200066b5 	.word	0x200066b5
	LDR R0,=RCC_AHB1ENR
 8000e54:	40023830 	.word	0x40023830
	LDR R0,=RCC_APB1ENR
 8000e58:	40023840 	.word	0x40023840
	LDR R0,=RCC_APB2ENR
 8000e5c:	40023844 	.word	0x40023844
	LDR R0,=GPIOA_MODER
 8000e60:	40020000 	.word	0x40020000
	LDR R2,=#0x00155555
 8000e64:	00155555 	.word	0x00155555
	LDR R0,=GPIOB_PUPDR
 8000e68:	4002040c 	.word	0x4002040c
	LDR R0,=SCB_AIRCR
 8000e6c:	e000ed0c 	.word	0xe000ed0c
	LDR R1,=VECT_KEY
 8000e70:	05fa0000 	.word	0x05fa0000
	LDR R0,=NVIC_ISER0
 8000e74:	e000e100 	.word	0xe000e100
	LDR R1,=0x708007C0
 8000e78:	708007c0 	.word	0x708007c0
	LDR R0,=NVIC_IPR1
 8000e7c:	e000e404 	.word	0xe000e404
	LDR R1,=0x20200000
 8000e80:	20200000 	.word	0x20200000
	LDR R0,=NVIC_IPR2
 8000e84:	e000e408 	.word	0xe000e408
	LDR R1,=0x202020
 8000e88:	00202020 	.word	0x00202020
	LDR R0,=NVIC_IPR5
 8000e8c:	e000e414 	.word	0xe000e414
	LDR R0,=NVIC_IPR7
 8000e90:	e000e41c 	.word	0xe000e41c
	LDR R1,=0x101010
 8000e94:	00101010 	.word	0x00101010
	LDR R0,=SYSCFG_EXTICR1
 8000e98:	40013808 	.word	0x40013808
	LDR R0,=SYSCFG_EXTICR2
 8000e9c:	4001380c 	.word	0x4001380c
	LDR R0,=EXTI_IMR
 8000ea0:	40013c00 	.word	0x40013c00
	LDR R0,=EXTI_RTSR
 8000ea4:	40013c08 	.word	0x40013c08
	LDR R0,=TIM2_PSC
 8000ea8:	40000028 	.word	0x40000028
	LDR R0,=TIM2_ARR
 8000eac:	4000002c 	.word	0x4000002c
	LDR R0,=TIM2_DIER
 8000eb0:	4000000c 	.word	0x4000000c
	LDR R0,=TIM3_PSC
 8000eb4:	40000428 	.word	0x40000428
	LDR R0,=TIM3_ARR
 8000eb8:	4000042c 	.word	0x4000042c
	LDR R0,=TIM3_CR1
 8000ebc:	40000400 	.word	0x40000400
	LDR R0,=TIM3_DIER
 8000ec0:	4000040c 	.word	0x4000040c
	LDR R0,=TIM4_PSC
 8000ec4:	40000828 	.word	0x40000828
	LDR R0,=TIM4_ARR
 8000ec8:	4000082c 	.word	0x4000082c
	LDR R0,=TIM4_CR1
 8000ecc:	40000800 	.word	0x40000800
	LDR R0,=TIM4_DIER
 8000ed0:	4000080c 	.word	0x4000080c
	LDR R0,=GPIOA_ODR
 8000ed4:	40020014 	.word	0x40020014

08000ed8 <EXTI0_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.EXTI0_IRQHandler
  .weak EXTI0_IRQHandler
  .type EXTI0_IRQHandler, %function
EXTI0_IRQHandler:
	PUSH {R0-R5,LR}
 8000ed8:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	@WRITE FUNCTION HERE
	LDR R0,=GAMEFLAG
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <EXTI0_END+0xe>)
	LDRB R0,[R0]
 8000edc:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 8000ede:	2800      	cmp	r0, #0
	BNE EXTI0_GAMES
 8000ee0:	d104      	bne.n	8000eec <EXTI0_GAMES>
	LDR R0,=GAMESELECT
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <EXTI0_END+0x12>)
	LDR R1,=1
 8000ee4:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 8000ee8:	7001      	strb	r1, [r0, #0]
	B EXTI0_END
 8000eea:	e00e      	b.n	8000f0a <EXTI0_END>

08000eec <EXTI0_GAMES>:
EXTI0_GAMES:
	CMP R0,#2
 8000eec:	2802      	cmp	r0, #2
	BNE EXTI_0_PACMAN
 8000eee:	d102      	bne.n	8000ef6 <EXTI_0_PACMAN>
	BL PONG_MoveOSUp
 8000ef0:	f000 fb8c 	bl	800160c <PONG_MoveOSUp>
	B EXTI0_END
 8000ef4:	e009      	b.n	8000f0a <EXTI0_END>

08000ef6 <EXTI_0_PACMAN>:
EXTI_0_PACMAN:
	LDR R5,=delay_1_pacman
 8000ef6:	4d0a      	ldr	r5, [pc, #40]	; (8000f20 <EXTI0_END+0x16>)
	LDRB R4,[R5,#1]
 8000ef8:	786c      	ldrb	r4, [r5, #1]
	CMP R4,#1
 8000efa:	2c01      	cmp	r4, #1
	BEQ EXTI0_END
 8000efc:	d005      	beq.n	8000f0a <EXTI0_END>
	LDR R4,=1
 8000efe:	f04f 0401 	mov.w	r4, #1
	STRB R4,[R5,#1]
 8000f02:	706c      	strb	r4, [r5, #1]
	BL PACMAN_MOVE_RIGHT
 8000f04:	f000 fe38 	bl	8001b78 <PACMAN_MOVE_RIGHT>
	B EXTI0_END
 8000f08:	e7ff      	b.n	8000f0a <EXTI0_END>

08000f0a <EXTI0_END>:
EXTI0_END:
	@SET PENDING FLAG
	LDR R0,=EXTI_PR
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <EXTI0_END+0x1a>)
	LDR R3,=#0
 8000f0c:	f04f 0300 	mov.w	r3, #0
	BL SET_PIN
 8000f10:	f7ff f96a 	bl	80001e8 <SET_PIN>
	POP {R0-R5,PC}
 8000f14:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}
 8000f16:	0000      	.short	0x0000
	LDR R0,=GAMEFLAG
 8000f18:	200066b5 	.word	0x200066b5
	LDR R0,=GAMESELECT
 8000f1c:	200066b6 	.word	0x200066b6
	LDR R5,=delay_1_pacman
 8000f20:	20000002 	.word	0x20000002
	LDR R0,=EXTI_PR
 8000f24:	40013c14 	.word	0x40013c14

08000f28 <EXTI1_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.EXTI1_IRQHandler
  .weak EXTI1_IRQHandler
  .type EXTI1_IRQHandler, %function
EXTI1_IRQHandler:
	PUSH {R0-R5,LR}
 8000f28:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
	@WRITE FUNCTION HERE
	LDR R0,=GAMEFLAG
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <EXTI1_END+0xe>)
	LDRB R0,[R0]
 8000f2c:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#0
 8000f2e:	2800      	cmp	r0, #0
	BNE EXTI1_GAMES
 8000f30:	d104      	bne.n	8000f3c <EXTI1_GAMES>
	LDR R0,=GAMESELECT
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <EXTI1_END+0x12>)
	LDR R1,=2
 8000f34:	f04f 0102 	mov.w	r1, #2
	STRB R1,[R0]
 8000f38:	7001      	strb	r1, [r0, #0]
	B EXTI1_END
 8000f3a:	e00e      	b.n	8000f5a <EXTI1_END>

08000f3c <EXTI1_GAMES>:
EXTI1_GAMES:
	CMP R0,#2
 8000f3c:	2802      	cmp	r0, #2
	BNE EXTI_1_PACMAN
 8000f3e:	d102      	bne.n	8000f46 <EXTI_1_PACMAN>
	BL PONG_MoveOSDown
 8000f40:	f000 fb36 	bl	80015b0 <PONG_MoveOSDown>
	B EXTI1_END
 8000f44:	e009      	b.n	8000f5a <EXTI1_END>

08000f46 <EXTI_1_PACMAN>:
EXTI_1_PACMAN:
	LDR R5,=delay_1_pacman
 8000f46:	4d0a      	ldr	r5, [pc, #40]	; (8000f70 <EXTI1_END+0x16>)
	LDRB R4,[R5,#1]
 8000f48:	786c      	ldrb	r4, [r5, #1]
	CMP R4,#1
 8000f4a:	2c01      	cmp	r4, #1
	BEQ EXTI1_END
 8000f4c:	d005      	beq.n	8000f5a <EXTI1_END>
	LDR R4,=1
 8000f4e:	f04f 0401 	mov.w	r4, #1
	STRB R4,[R5,#1]
 8000f52:	706c      	strb	r4, [r5, #1]
	BL PACMAN_MOVE_LEFT
 8000f54:	f000 fe74 	bl	8001c40 <PACMAN_MOVE_LEFT>
	B EXTI1_END
 8000f58:	e7ff      	b.n	8000f5a <EXTI1_END>

08000f5a <EXTI1_END>:
EXTI1_END:
	@SET PENDING FLAG
	LDR R0,=EXTI_PR
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <EXTI1_END+0x1a>)
	LDR R3,=#1
 8000f5c:	f04f 0301 	mov.w	r3, #1
	BL SET_PIN
 8000f60:	f7ff f942 	bl	80001e8 <SET_PIN>
	POP {R0-R5,PC}
 8000f64:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}
 8000f66:	0000      	.short	0x0000
	LDR R0,=GAMEFLAG
 8000f68:	200066b5 	.word	0x200066b5
	LDR R0,=GAMESELECT
 8000f6c:	200066b6 	.word	0x200066b6
	LDR R5,=delay_1_pacman
 8000f70:	20000002 	.word	0x20000002
	LDR R0,=EXTI_PR
 8000f74:	40013c14 	.word	0x40013c14

08000f78 <EXTI3_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.EXTI3_IRQHandler
  .weak EXTI3_IRQHandler
  .type EXTI3_IRQHandler, %function
EXTI3_IRQHandler:
	PUSH {R0-R5,LR}
 8000f78:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	@WRITE FUNCTION HERE
	LDR R5,=delay_1_pacman
 8000f7a:	4d08      	ldr	r5, [pc, #32]	; (8000f9c <EXTI3_PACMAN_SKIP+0xe>)
	LDRB R4,[R5,#1]
 8000f7c:	786c      	ldrb	r4, [r5, #1]
	CMP R4,#1
 8000f7e:	2c01      	cmp	r4, #1
	BEQ EXTI3_PACMAN_SKIP
 8000f80:	d005      	beq.n	8000f8e <EXTI3_PACMAN_SKIP>
	LDR R4,=1
 8000f82:	f04f 0401 	mov.w	r4, #1
	STRB R4,[R5,#1]
 8000f86:	706c      	strb	r4, [r5, #1]
	BL PACMAN_MOVE_UP
 8000f88:	f000 febe 	bl	8001d08 <PACMAN_MOVE_UP>
	B EXTI3_PACMAN_SKIP
 8000f8c:	e7ff      	b.n	8000f8e <EXTI3_PACMAN_SKIP>

08000f8e <EXTI3_PACMAN_SKIP>:
EXTI3_PACMAN_SKIP:

	@SET PENDING FLAG
	LDR R0,=EXTI_PR
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <EXTI3_PACMAN_SKIP+0x12>)
	LDR R3,=#3
 8000f90:	f04f 0303 	mov.w	r3, #3
	BL SET_PIN
 8000f94:	f7ff f928 	bl	80001e8 <SET_PIN>
	POP {R0-R5,PC}
 8000f98:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}
 8000f9a:	0000      	.short	0x0000
	LDR R5,=delay_1_pacman
 8000f9c:	20000002 	.word	0x20000002
	LDR R0,=EXTI_PR
 8000fa0:	40013c14 	.word	0x40013c14

08000fa4 <EXTI4_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.EXTI4_IRQHandler
  .weak EXTI4_IRQHandler
  .type EXTI4_IRQHandler, %function
EXTI4_IRQHandler:
	PUSH {R0-R5,LR}
 8000fa4:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	@WRITE FUNCTION HERE
	LDR R5,=delay_1_pacman
 8000fa6:	4d08      	ldr	r5, [pc, #32]	; (8000fc8 <EXTI4_PACMAN_SKIP+0xe>)
	LDRB R4,[R5,#1]
 8000fa8:	786c      	ldrb	r4, [r5, #1]
	CMP R4,#1
 8000faa:	2c01      	cmp	r4, #1
	BEQ EXTI4_PACMAN_SKIP
 8000fac:	d005      	beq.n	8000fba <EXTI4_PACMAN_SKIP>
	LDR R4,=1
 8000fae:	f04f 0401 	mov.w	r4, #1
	STRB R4,[R5,#1]
 8000fb2:	706c      	strb	r4, [r5, #1]
	BL PACMAN_MOVE_DOWN
 8000fb4:	f000 ff0c 	bl	8001dd0 <PACMAN_MOVE_DOWN>
	B EXTI4_PACMAN_SKIP
 8000fb8:	e7ff      	b.n	8000fba <EXTI4_PACMAN_SKIP>

08000fba <EXTI4_PACMAN_SKIP>:
EXTI4_PACMAN_SKIP:

	@SET PENDING FLAG
	LDR R0,=EXTI_PR
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <EXTI4_PACMAN_SKIP+0x12>)
	LDR R3,=#4
 8000fbc:	f04f 0304 	mov.w	r3, #4
	BL SET_PIN
 8000fc0:	f7ff f912 	bl	80001e8 <SET_PIN>
	POP {R0-R5,PC}
 8000fc4:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}
 8000fc6:	0000      	.short	0x0000
	LDR R5,=delay_1_pacman
 8000fc8:	20000002 	.word	0x20000002
	LDR R0,=EXTI_PR
 8000fcc:	40013c14 	.word	0x40013c14

08000fd0 <EXTI9_5_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.EXTI9_5_IRQHandler
  .weak EXTI9_5_IRQHandler
  .type EXTI9_5_IRQHandler, %function
EXTI9_5_IRQHandler:
	PUSH {R0-R3,LR}
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}

	@WRITE FUNCTION HERE
	LDR R1,=GAMEFLAG
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <EXTI5_END+0xe>)
	LDRB R0,[R1]
 8000fd4:	7808      	ldrb	r0, [r1, #0]
	CMP R0,#0
 8000fd6:	2800      	cmp	r0, #0
	BEQ PONG_PACMAN_SELECT
 8000fd8:	d009      	beq.n	8000fee <PONG_PACMAN_SELECT>
	LDR R0,=0
 8000fda:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1]
 8000fde:	7008      	strb	r0, [r1, #0]
	LDR R0,=GAMESELECT
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <EXTI5_END+0x12>)
	LDR R1,=1
 8000fe2:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 8000fe6:	7001      	strb	r1, [r0, #0]
	BL TIM2_STOP_IT
 8000fe8:	f7ff fa41 	bl	800046e <TIM2_STOP_IT>
	B EXTI5_END
 8000fec:	e003      	b.n	8000ff6 <EXTI5_END>

08000fee <PONG_PACMAN_SELECT>:
PONG_PACMAN_SELECT:
	LDR R2,=GAMESELECT
 8000fee:	4a06      	ldr	r2, [pc, #24]	; (8001008 <EXTI5_END+0x12>)
	LDRB R0,[R2]
 8000ff0:	7810      	ldrb	r0, [r2, #0]
	STRB R0,[R1]
 8000ff2:	7008      	strb	r0, [r1, #0]
	B EXTI5_END
 8000ff4:	e7ff      	b.n	8000ff6 <EXTI5_END>

08000ff6 <EXTI5_END>:
EXTI5_END:
	@SET PENDING FLAG
	LDR R0,=EXTI_PR
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <EXTI5_END+0x16>)
	LDR R3,=#5
 8000ff8:	f04f 0305 	mov.w	r3, #5
	BL SET_PIN
 8000ffc:	f7ff f8f4 	bl	80001e8 <SET_PIN>
	POP {R0-R3,PC}
 8001000:	bd0f      	pop	{r0, r1, r2, r3, pc}
 8001002:	0000      	.short	0x0000
	LDR R1,=GAMEFLAG
 8001004:	200066b5 	.word	0x200066b5
	LDR R0,=GAMESELECT
 8001008:	200066b6 	.word	0x200066b6
	LDR R0,=EXTI_PR
 800100c:	40013c14 	.word	0x40013c14

08001010 <TIM2_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.TIM2_IRQHandler
  .weak TIM2_IRQHandler
  .type TIM2_IRQHandler, %function
TIM2_IRQHandler:
	PUSH {R0-R9,LR}
 8001010:	e92d 43ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}

	@WRITE FUNCTION HERE
	LDR R0,=GAMEFLAG
 8001014:	4818      	ldr	r0, [pc, #96]	; (8001078 <RESPAWN_DELAY_SKIP+0xc>)
	LDRB R0,[R0]
 8001016:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#1
 8001018:	2801      	cmp	r0, #1
	BEQ TIM2_PACMAN
 800101a:	d002      	beq.n	8001022 <TIM2_PACMAN>
	BL PONG_MoveBall
 800101c:	f000 fb58 	bl	80016d0 <PONG_MoveBall>
	B RESPAWN_DELAY_SKIP
 8001020:	e024      	b.n	800106c <RESPAWN_DELAY_SKIP>

08001022 <TIM2_PACMAN>:
TIM2_PACMAN:
	LDR R9,=delay_1_pacman
 8001022:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800107c <RESPAWN_DELAY_SKIP+0x10>
	LDR R8,=0
 8001026:	f04f 0800 	mov.w	r8, #0
	STRB R8,[R9,#1]
 800102a:	f889 8001 	strb.w	r8, [r9, #1]
	LDRB R8,[R9]
 800102e:	f899 8000 	ldrb.w	r8, [r9]
	CMP R8,#0
 8001032:	f1b8 0f00 	cmp.w	r8, #0
	BNE PACMAN_RESPAWN_DELAY
 8001036:	d114      	bne.n	8001062 <PACMAN_RESPAWN_DELAY>
	LDR R7,=frightened
 8001038:	4f11      	ldr	r7, [pc, #68]	; (8001080 <RESPAWN_DELAY_SKIP+0x14>)
	LDRB R4,[R7]
 800103a:	783c      	ldrb	r4, [r7, #0]
	CMP R4,#0
 800103c:	2c00      	cmp	r4, #0
	BEQ PACMAN_TIM2_SKIP
 800103e:	d00b      	beq.n	8001058 <PACMAN_TIM2_SKIP>
	LDRB R6,[R7,#1]
 8001040:	787e      	ldrb	r6, [r7, #1]
	SUB R6,R6,#1
 8001042:	f1a6 0601 	sub.w	r6, r6, #1
	STRB R6,[R7,#1]
 8001046:	707e      	strb	r6, [r7, #1]
	CMP R6,#0
 8001048:	2e00      	cmp	r6, #0
	BNE PACMAN_TIM2_SKIP
 800104a:	d105      	bne.n	8001058 <PACMAN_TIM2_SKIP>
	LDR R6,=8
 800104c:	f04f 0608 	mov.w	r6, #8
	STRB R6,[R7,#1]
 8001050:	707e      	strb	r6, [r7, #1]
	LDR R4,=0
 8001052:	f04f 0400 	mov.w	r4, #0
	STRB R4,[R7]
 8001056:	703c      	strb	r4, [r7, #0]

08001058 <PACMAN_TIM2_SKIP>:
PACMAN_TIM2_SKIP:
	BL GHOST_MOVE_CHASE_ESCAPE
 8001058:	f001 fa84 	bl	8002564 <GHOST_MOVE_CHASE_ESCAPE>
	BL GHOST_MOVE_DRAW
 800105c:	f001 fa8d 	bl	800257a <GHOST_MOVE_DRAW>
	B RESPAWN_DELAY_SKIP
 8001060:	e004      	b.n	800106c <RESPAWN_DELAY_SKIP>

08001062 <PACMAN_RESPAWN_DELAY>:
PACMAN_RESPAWN_DELAY:
	SUB R8,R8,#1
 8001062:	f1a8 0801 	sub.w	r8, r8, #1
	STRB R8,[R9]
 8001066:	f889 8000 	strb.w	r8, [r9]
	B RESPAWN_DELAY_SKIP
 800106a:	e7ff      	b.n	800106c <RESPAWN_DELAY_SKIP>

0800106c <RESPAWN_DELAY_SKIP>:
RESPAWN_DELAY_SKIP:
	@CLEAR FLAG
	LDR R0,=TIM2_SR
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <RESPAWN_DELAY_SKIP+0x18>)
	LDR R1,=0
 800106e:	f04f 0100 	mov.w	r1, #0
	STR R1,[R0]
 8001072:	6001      	str	r1, [r0, #0]
	POP {R0-R9,PC}
 8001074:	e8bd 83ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	LDR R0,=GAMEFLAG
 8001078:	200066b5 	.word	0x200066b5
	LDR R9,=delay_1_pacman
 800107c:	20000002 	.word	0x20000002
	LDR R7,=frightened
 8001080:	20000000 	.word	0x20000000
	LDR R0,=TIM2_SR
 8001084:	40000010 	.word	0x40000010

08001088 <TIM3_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.TIM3_IRQHandler
  .weak TIM3_IRQHandler
  .type TIM3_IRQHandler, %function
TIM3_IRQHandler:
	PUSH {R0-R1,LR}
 8001088:	b503      	push	{r0, r1, lr}
	@WRITE FUNCTION HERE
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	LDR R0,=PONG_FREEZE
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <TIM3_ENDCODE+0xc>)
	LDRB R1,[R0]
 800108c:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#255
 800108e:	29ff      	cmp	r1, #255	; 0xff
	BEQ TIM3_WORKNORMAL
 8001090:	d009      	beq.n	80010a6 <TIM3_WORKNORMAL>
	SUB R1,R1,#1
 8001092:	f1a1 0101 	sub.w	r1, r1, #1
	CMP R1,#0
 8001096:	2900      	cmp	r1, #0
	BEQ TIM3_REMFREEZE
 8001098:	d001      	beq.n	800109e <TIM3_REMFREEZE>
	STRB R1,[R0]
 800109a:	7001      	strb	r1, [r0, #0]
	B TIM3_ENDCODE
 800109c:	e006      	b.n	80010ac <TIM3_ENDCODE>

0800109e <TIM3_REMFREEZE>:
TIM3_REMFREEZE:
	LDR R1,=255
 800109e:	f04f 01ff 	mov.w	r1, #255	; 0xff
	STRB R1,[R0]
 80010a2:	7001      	strb	r1, [r0, #0]
	B TIM3_ENDCODE
 80010a4:	e002      	b.n	80010ac <TIM3_ENDCODE>

080010a6 <TIM3_WORKNORMAL>:
TIM3_WORKNORMAL:
	BL PONG_MoveES
 80010a6:	f000 fadf 	bl	8001668 <PONG_MoveES>
	B TIM3_ENDCODE
 80010aa:	e7ff      	b.n	80010ac <TIM3_ENDCODE>

080010ac <TIM3_ENDCODE>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	@CLEAR FLAG
TIM3_ENDCODE:
	LDR R0,=TIM3_SR
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <TIM3_ENDCODE+0x10>)
	LDR R1,=0
 80010ae:	f04f 0100 	mov.w	r1, #0
	STR R1,[R0]
 80010b2:	6001      	str	r1, [r0, #0]
	POP {R0-R1,PC}
 80010b4:	bd03      	pop	{r0, r1, pc}
 80010b6:	0000      	.short	0x0000
	LDR R0,=PONG_FREEZE
 80010b8:	200066c7 	.word	0x200066c7
	LDR R0,=TIM3_SR
 80010bc:	40000410 	.word	0x40000410

080010c0 <TIM4_IRQHandler>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  .section .text.TIM4_IRQHandler
  .weak TIM4_IRQHandler
  .type TIM4_IRQHandler, %function
TIM4_IRQHandler:
	PUSH {R0-R3,LR}
 80010c0:	b50f      	push	{r0, r1, r2, r3, lr}
	@WRITE FUNCTION HERE
	@CLEAR FLAG
	LDR R0,=TIM4_SR
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <MAINMENU_CHOOSEAGAMEForLoop+0x26>)
	LDR R1,=0
 80010c4:	f04f 0100 	mov.w	r1, #0
	STR R1,[R0]
 80010c8:	6001      	str	r1, [r0, #0]
	POP {R0-R3,PC}
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <MAINMENU_CHOOSEAGAME>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ MAIN MENU @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_CHOOSEAGAME:
	PUSH {R0-R5,R10,LR}
 80010cc:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=67
 80010d0:	f04f 0043 	mov.w	r0, #67	; 0x43
	ADD R1,R0,#184
 80010d4:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
	LDR R3,=200
 80010d8:	f04f 03c8 	mov.w	r3, #200	; 0xc8
	ADD R4,R3,#20
 80010dc:	f103 0414 	add.w	r4, r3, #20
	BL TFT_SET_DRAWING_AREA
 80010e0:	f7ff fa56 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 80010e4:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 80010e8:	f7ff f9fc 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=3700
 80010ec:	f640 6574 	movw	r5, #3700	; 0xe74
	LDR R0,=CHOOSEAGAME
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <MAINMENU_CHOOSEAGAMEForLoop+0x2a>)

080010f2 <MAINMENU_CHOOSEAGAMEForLoop>:
MAINMENU_CHOOSEAGAMEForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 80010f2:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 80010f6:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 80010fa:	f7ff f9e9 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 80010fe:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8001102:	f7ff f9e5 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 8001106:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 800110a:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 800110e:	2d00      	cmp	r5, #0
	BNE MAINMENU_CHOOSEAGAMEForLoop
 8001110:	d1ef      	bne.n	80010f2 <MAINMENU_CHOOSEAGAMEForLoop>
	POP {R0-R5,R10,PC}
 8001112:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 8001116:	0000      	.short	0x0000
	LDR R0,=TIM4_SR
 8001118:	40000810 	.word	0x40000810
	LDR R0,=CHOOSEAGAME
 800111c:	200006fd 	.word	0x200006fd

08001120 <MAINMENU_PACMAN>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_PACMAN:
	PUSH {R0-R5,R10,LR}
 8001120:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=67
 8001124:	f04f 0043 	mov.w	r0, #67	; 0x43
	ADD R1,R0,#114
 8001128:	f100 0172 	add.w	r1, r0, #114	; 0x72
	LDR R3,=150
 800112c:	f04f 0396 	mov.w	r3, #150	; 0x96
	ADD R4,R3,#22
 8001130:	f103 0416 	add.w	r4, r3, #22
	BL TFT_SET_DRAWING_AREA
 8001134:	f7ff fa2c 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8001138:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 800113c:	f7ff f9d2 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=2530
 8001140:	f640 15e2 	movw	r5, #2530	; 0x9e2
	LDR R0,=PACMANNOTSELECTED
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <MAINMENU_PACMANForLoop+0x26>)

08001146 <MAINMENU_PACMANForLoop>:
MAINMENU_PACMANForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 8001146:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 800114a:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 800114e:	f7ff f9bf 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 8001152:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8001156:	f7ff f9bb 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 800115a:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 800115e:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 8001162:	2d00      	cmp	r5, #0
	BNE MAINMENU_PACMANForLoop
 8001164:	d1ef      	bne.n	8001146 <MAINMENU_PACMANForLoop>
	POP {R0-R5,R10,PC}
 8001166:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 800116a:	0000      	.short	0x0000
	LDR R0,=PACMANNOTSELECTED
 800116c:	200023e3 	.word	0x200023e3

08001170 <MAINMENU_PACMANSELECTED>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_PACMANSELECTED:
	PUSH {R0-R5,R10,LR}
 8001170:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=67
 8001174:	f04f 0043 	mov.w	r0, #67	; 0x43
	ADD R1,R0,#114
 8001178:	f100 0172 	add.w	r1, r0, #114	; 0x72
	LDR R3,=150
 800117c:	f04f 0396 	mov.w	r3, #150	; 0x96
	ADD R4,R3,#22
 8001180:	f103 0416 	add.w	r4, r3, #22
	BL TFT_SET_DRAWING_AREA
 8001184:	f7ff fa04 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8001188:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 800118c:	f7ff f9aa 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=2530
 8001190:	f640 15e2 	movw	r5, #2530	; 0x9e2
	LDR R0,=PACMANSELECTED
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <MAINMENU_PACMANSELECTEDForLoop+0x26>)

08001196 <MAINMENU_PACMANSELECTEDForLoop>:
MAINMENU_PACMANSELECTEDForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 8001196:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 800119a:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 800119e:	f7ff f997 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 80011a2:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 80011a6:	f7ff f993 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 80011aa:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 80011ae:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 80011b2:	2d00      	cmp	r5, #0
	BNE MAINMENU_PACMANSELECTEDForLoop
 80011b4:	d1ef      	bne.n	8001196 <MAINMENU_PACMANSELECTEDForLoop>
	POP {R0-R5,R10,PC}
 80011b6:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 80011ba:	0000      	.short	0x0000
	LDR R0,=PACMANSELECTED
 80011bc:	200037a5 	.word	0x200037a5

080011c0 <MAINMENU_PONG>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_PONG:
	PUSH {R0-R5,R10,LR}
 80011c0:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=67
 80011c4:	f04f 0043 	mov.w	r0, #67	; 0x43
	ADD R1,R0,#72
 80011c8:	f100 0148 	add.w	r1, r0, #72	; 0x48
	LDR R3,=120
 80011cc:	f04f 0378 	mov.w	r3, #120	; 0x78
	ADD R4,R3,#22
 80011d0:	f103 0416 	add.w	r4, r3, #22
	BL TFT_SET_DRAWING_AREA
 80011d4:	f7ff f9dc 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 80011d8:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 80011dc:	f7ff f982 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=1606
 80011e0:	f240 6546 	movw	r5, #1606	; 0x646
	LDR R0,=PONGNOTSELECTED
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <MAINMENU_PONGForLoop+0x26>)

080011e6 <MAINMENU_PONGForLoop>:
MAINMENU_PONGForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 80011e6:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 80011ea:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 80011ee:	f7ff f96f 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 80011f2:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 80011f6:	f7ff f96b 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 80011fa:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 80011fe:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 8001202:	2d00      	cmp	r5, #0
	BNE MAINMENU_PONGForLoop
 8001204:	d1ef      	bne.n	80011e6 <MAINMENU_PONGForLoop>
	POP {R0-R5,R10,PC}
 8001206:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 800120a:	0000      	.short	0x0000
	LDR R0,=PONGNOTSELECTED
 800120c:	20004b67 	.word	0x20004b67

08001210 <MAINMENU_PONGSELECTED>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_PONGSELECTED:
	PUSH {R0-R5,R10,LR}
 8001210:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=67
 8001214:	f04f 0043 	mov.w	r0, #67	; 0x43
	ADD R1,R0,#72
 8001218:	f100 0148 	add.w	r1, r0, #72	; 0x48
	LDR R3,=120
 800121c:	f04f 0378 	mov.w	r3, #120	; 0x78
	ADD R4,R3,#22
 8001220:	f103 0416 	add.w	r4, r3, #22
	BL TFT_SET_DRAWING_AREA
 8001224:	f7ff f9b4 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8001228:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 800122c:	f7ff f95a 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=1606
 8001230:	f240 6546 	movw	r5, #1606	; 0x646
	LDR R0,=PONGSELECTED
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <MAINMENU_PONGSELECTEDForLoop+0x26>)

08001236 <MAINMENU_PONGSELECTEDForLoop>:
MAINMENU_PONGSELECTEDForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 8001236:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 800123a:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 800123e:	f7ff f947 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 8001242:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8001246:	f7ff f943 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 800124a:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 800124e:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 8001252:	2d00      	cmp	r5, #0
	BNE MAINMENU_PONGSELECTEDForLoop
 8001254:	d1ef      	bne.n	8001236 <MAINMENU_PONGSELECTEDForLoop>
	POP {R0-R5,R10,PC}
 8001256:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 800125a:	0000      	.short	0x0000
	LDR R0,=PONGSELECTED
 800125c:	200057f1 	.word	0x200057f1

08001260 <MAINMENU_ARROW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
MAINMENU_ARROW:
	PUSH {R0-R5,R10,LR}
 8001260:	e92d 443f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, sl, lr}
	@SET THE DRAWING AREA
	LDR R0,=50
 8001264:	f04f 0032 	mov.w	r0, #50	; 0x32
	ADD R1,R0,#12
 8001268:	f100 010c 	add.w	r1, r0, #12
	ADD R4,R3,#22
 800126c:	f103 0416 	add.w	r4, r3, #22
	BL TFT_SET_DRAWING_AREA
 8001270:	f7ff f98e 	bl	8000590 <TFT_SET_DRAWING_AREA>
	@MEMORY WRITE COMMAND (0x2C)
	LDR R2,=0x2C
 8001274:	f04f 022c 	mov.w	r2, #44	; 0x2c
	BL TFT_WRITE_COMMAND
 8001278:	f7ff f934 	bl	80004e4 <TFT_WRITE_COMMAND>
	@SET THE FOR LOOP
	LDR R5,=286
 800127c:	f44f 758f 	mov.w	r5, #286	; 0x11e
	LDR R0,=MAINARROW
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <MAINMENU_ARROWForLoop+0x26>)

08001282 <MAINMENU_ARROWForLoop>:
MAINMENU_ARROWForLoop:
	@FETCH THE DATA
	LDRH R10,[R0]
 8001282:	f8b0 a000 	ldrh.w	sl, [r0]
	@DRAW THE PIXEL
	LSR R2,R10,#8
 8001286:	ea4f 221a 	mov.w	r2, sl, lsr #8
	BL TFT_WRITE_DATA
 800128a:	f7ff f921 	bl	80004d0 <TFT_WRITE_DATA>
	AND R2,R10,#0xFF
 800128e:	f00a 02ff 	and.w	r2, sl, #255	; 0xff
	BL TFT_WRITE_DATA
 8001292:	f7ff f91d 	bl	80004d0 <TFT_WRITE_DATA>
	@GET THE NEXT ADDRESS
	ADD R0,R0,#2
 8001296:	f100 0002 	add.w	r0, r0, #2
	SUB R5,R5,#1
 800129a:	f1a5 0501 	sub.w	r5, r5, #1
	CMP R5,#0
 800129e:	2d00      	cmp	r5, #0
	BNE MAINMENU_ARROWForLoop
 80012a0:	d1ef      	bne.n	8001282 <MAINMENU_ARROWForLoop>
	POP {R0-R5,R10,PC}
 80012a2:	e8bd 843f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, sl, pc}
 80012a6:	0000      	.short	0x0000
	LDR R0,=MAINARROW
 80012a8:	2000647b 	.word	0x2000647b

080012ac <PONG_INIT>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ PONG GAME @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PONG_INIT:
	PUSH {R0-R3,LR}
 80012ac:	b50f      	push	{r0, r1, r2, r3, lr}
	@INITIALIZE VARIABLES
	LDR R0,=PONG_OSP
 80012ae:	4855      	ldr	r0, [pc, #340]	; (8001404 <PONG_INIT+0x158>)
	LDR R1,=110
 80012b0:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 80012b4:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_OSPM
 80012b6:	4854      	ldr	r0, [pc, #336]	; (8001408 <PONG_INIT+0x15c>)
	LDR R1,=0
 80012b8:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80012bc:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_ESP
 80012be:	4853      	ldr	r0, [pc, #332]	; (800140c <PONG_INIT+0x160>)
	LDR R1,=110
 80012c0:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 80012c4:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_ESPM
 80012c6:	4852      	ldr	r0, [pc, #328]	; (8001410 <PONG_INIT+0x164>)
	LDR R1,=0
 80012c8:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80012cc:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BXP
 80012ce:	4851      	ldr	r0, [pc, #324]	; (8001414 <PONG_INIT+0x168>)
	LDR R1,=160
 80012d0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
	STRH R1,[R0]
 80012d4:	8001      	strh	r1, [r0, #0]

	LDR R0,=PONG_BYP
 80012d6:	4850      	ldr	r0, [pc, #320]	; (8001418 <PONG_INIT+0x16c>)
	LDR R1,=110
 80012d8:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 80012dc:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BPXP
 80012de:	484f      	ldr	r0, [pc, #316]	; (800141c <PONG_INIT+0x170>)
	LDR R1,=160
 80012e0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
	STRH R1,[R0]
 80012e4:	8001      	strh	r1, [r0, #0]

	LDR R0,=PONG_BPYP
 80012e6:	484e      	ldr	r0, [pc, #312]	; (8001420 <PONG_INIT+0x174>)
	LDR R1,=110
 80012e8:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 80012ec:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BXD
 80012ee:	484d      	ldr	r0, [pc, #308]	; (8001424 <PONG_INIT+0x178>)
	LDR R1,=0
 80012f0:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80012f4:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BYD
 80012f6:	484c      	ldr	r0, [pc, #304]	; (8001428 <PONG_INIT+0x17c>)
	LDR R1,=0
 80012f8:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80012fc:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BPM
 80012fe:	484b      	ldr	r0, [pc, #300]	; (800142c <PONG_INIT+0x180>)
	LDR R1,=0
 8001300:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001304:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_SCORE
 8001306:	484a      	ldr	r0, [pc, #296]	; (8001430 <PONG_INIT+0x184>)
	LDR R1,=0
 8001308:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 800130c:	7001      	strb	r1, [r0, #0]

	ADD R0,R0,#1
 800130e:	f100 0001 	add.w	r0, r0, #1
	LDR R1,=0
 8001312:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001316:	7001      	strb	r1, [r0, #0]

	ADD R0,R0,#1
 8001318:	f100 0001 	add.w	r0, r0, #1
	LDR R1,=0
 800131c:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001320:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_FREEZE
 8001322:	4844      	ldr	r0, [pc, #272]	; (8001434 <PONG_INIT+0x188>)
	LDR R1,=255
 8001324:	f04f 01ff 	mov.w	r1, #255	; 0xff
	STRB R1,[R0]
 8001328:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_EXPAND
 800132a:	4843      	ldr	r0, [pc, #268]	; (8001438 <PONG_INIT+0x18c>)
	LDR R1,=255
 800132c:	f04f 01ff 	mov.w	r1, #255	; 0xff
	STRB R1,[R0]
 8001330:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_POWERSCORE
 8001332:	4842      	ldr	r0, [pc, #264]	; (800143c <PONG_INIT+0x190>)
	LDR R1,=0
 8001334:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001338:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_POWER
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <PONG_INIT+0x194>)
	LDR R1,=0
 800133c:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001340:	7001      	strb	r1, [r0, #0]

	LDR R0,=PONG_BALLSPEED
 8001342:	4840      	ldr	r0, [pc, #256]	; (8001444 <PONG_INIT+0x198>)
	LDR R1,=200000
 8001344:	4940      	ldr	r1, [pc, #256]	; (8001448 <PONG_INIT+0x19c>)
	STR R1,[R0]
 8001346:	6001      	str	r1, [r0, #0]

	@DRAW BLACK SCREEN
	LDR R10,=BLACK
 8001348:	f04f 0a00 	mov.w	sl, #0
	LDR R0,=0
 800134c:	f04f 0000 	mov.w	r0, #0
	LDR R1,=320
 8001350:	f44f 71a0 	mov.w	r1, #320	; 0x140
	LDR R3,=0
 8001354:	f04f 0300 	mov.w	r3, #0
	LDR R4,=219
 8001358:	f04f 04db 	mov.w	r4, #219	; 0xdb
	BL TFT_DRAW_RECTANGLE
 800135c:	f7ff f942 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@DRAW SCORE BAR
	LDR R3,=220
 8001360:	f04f 03dc 	mov.w	r3, #220	; 0xdc
	LDR R4,=240
 8001364:	f04f 04f0 	mov.w	r4, #240	; 0xf0
	LDR R10,=RED
 8001368:	f44f 4a78 	mov.w	sl, #63488	; 0xf800
	BL TFT_DRAW_RECTANGLE
 800136c:	f7ff f93a 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@DRAW OUR STICK
	LDR R3,=95
 8001370:	f04f 035f 	mov.w	r3, #95	; 0x5f
	LDR R4,=125
 8001374:	f04f 047d 	mov.w	r4, #125	; 0x7d
	LDR R10,=WHITE
 8001378:	f64f 7aff 	movw	sl, #65535	; 0xffff
	LDR R0,=5
 800137c:	f04f 0005 	mov.w	r0, #5
	LDR R1,=10
 8001380:	f04f 010a 	mov.w	r1, #10
	BL TFT_DRAW_RECTANGLE
 8001384:	f7ff f92e 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@DRAW ENEMY STICK
	LDR R0,=309
 8001388:	f240 1035 	movw	r0, #309	; 0x135
	LDR R1,=314
 800138c:	f44f 719d 	mov.w	r1, #314	; 0x13a
	BL TFT_DRAW_RECTANGLE
 8001390:	f7ff f928 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	LDR R5,=160
 8001394:	f04f 05a0 	mov.w	r5, #160	; 0xa0
	@DRAW BALL
	LDR R6,=110
 8001398:	f04f 066e 	mov.w	r6, #110	; 0x6e
	LDR R7,=4
 800139c:	f04f 0704 	mov.w	r7, #4
	LDR R10,=BLUE
 80013a0:	f04f 0a1f 	mov.w	sl, #31
	BL TFT_DRAW_CIRCLE
 80013a4:	f7ff f93e 	bl	8000624 <TFT_DRAW_CIRCLE>
	@DISPLAY SCORE
	LDR R3,=220
 80013a8:	f04f 03dc 	mov.w	r3, #220	; 0xdc
	LDR R4,=239
 80013ac:	f04f 04ef 	mov.w	r4, #239	; 0xef
	LDR R10,=WHITE
 80013b0:	f64f 7aff 	movw	sl, #65535	; 0xffff
	LDR R11,=RED
 80013b4:	f44f 4b78 	mov.w	fp, #63488	; 0xf800
	@DISPLAY THE HUNDREDS
	LDR R0,=15
 80013b8:	f04f 000f 	mov.w	r0, #15
	LDR R1,=24
 80013bc:	f04f 0118 	mov.w	r1, #24
	BL TFT_SET_DRAWING_AREA
 80013c0:	f7ff f8e6 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R1,=0
 80013c4:	f04f 0100 	mov.w	r1, #0
	BL TFT_DISPLAY_DIGIT
 80013c8:	f7ff f9a0 	bl	800070c <TFT_DISPLAY_DIGIT>
	@DISPLAY THE TENS
	LDR R0,=28
 80013cc:	f04f 001c 	mov.w	r0, #28
	LDR R1,=37
 80013d0:	f04f 0125 	mov.w	r1, #37	; 0x25
	BL TFT_SET_DRAWING_AREA
 80013d4:	f7ff f8dc 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R1,=0
 80013d8:	f04f 0100 	mov.w	r1, #0
	BL TFT_DISPLAY_DIGIT
 80013dc:	f7ff f996 	bl	800070c <TFT_DISPLAY_DIGIT>
	@DISPLAY THE ONES
	LDR R0,=41
 80013e0:	f04f 0029 	mov.w	r0, #41	; 0x29
	LDR R1,=50
 80013e4:	f04f 0132 	mov.w	r1, #50	; 0x32
	BL TFT_SET_DRAWING_AREA
 80013e8:	f7ff f8d2 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R1,=0
 80013ec:	f04f 0100 	mov.w	r1, #0
	BL TFT_DISPLAY_DIGIT
 80013f0:	f7ff f98c 	bl	800070c <TFT_DISPLAY_DIGIT>


	@BALL TIMER
	LDR R2,=200000
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <PONG_INIT+0x19c>)
	BL TIM2_START_IT
 80013f6:	f7ff f810 	bl	800041a <TIM2_START_IT>
	@STICK TIMER
	LDR R2,=300000
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <PONG_INIT+0x1a0>)
	BL TIM3_START_IT
 80013fc:	f7ff f822 	bl	8000444 <TIM3_START_IT>

	POP {R0-R3,PC}
 8001400:	bd0f      	pop	{r0, r1, r2, r3, pc}
 8001402:	0000      	.short	0x0000
	LDR R0,=PONG_OSP
 8001404:	200066b7 	.word	0x200066b7
	LDR R0,=PONG_OSPM
 8001408:	200066b8 	.word	0x200066b8
	LDR R0,=PONG_ESP
 800140c:	200066b9 	.word	0x200066b9
	LDR R0,=PONG_ESPM
 8001410:	200066ba 	.word	0x200066ba
	LDR R0,=PONG_BXP
 8001414:	200066bb 	.word	0x200066bb
	LDR R0,=PONG_BYP
 8001418:	200066bd 	.word	0x200066bd
	LDR R0,=PONG_BPXP
 800141c:	200066be 	.word	0x200066be
	LDR R0,=PONG_BPYP
 8001420:	200066c0 	.word	0x200066c0
	LDR R0,=PONG_BXD
 8001424:	200066c1 	.word	0x200066c1
	LDR R0,=PONG_BYD
 8001428:	200066c2 	.word	0x200066c2
	LDR R0,=PONG_BPM
 800142c:	200066c3 	.word	0x200066c3
	LDR R0,=PONG_SCORE
 8001430:	200066c4 	.word	0x200066c4
	LDR R0,=PONG_FREEZE
 8001434:	200066c7 	.word	0x200066c7
	LDR R0,=PONG_EXPAND
 8001438:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_POWERSCORE
 800143c:	200066c9 	.word	0x200066c9
	LDR R0,=PONG_POWER
 8001440:	200066ca 	.word	0x200066ca
	LDR R0,=PONG_BALLSPEED
 8001444:	200066cb 	.word	0x200066cb
	LDR R1,=200000
 8001448:	00030d40 	.word	0x00030d40
	LDR R2,=300000
 800144c:	000493e0 	.word	0x000493e0

08001450 <PONG_DrawMap>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@THIS FUNCTION IS CALLED TO DISPLAY THE SCREEN
PONG_DrawMap:
	PUSH {R0-R7,R10,LR}
 8001450:	e92d 44ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, sl, lr}
	@CHECK IF OUR STICK MOVED OR NOT
	LDR R0,=PONG_OSPM
 8001454:	484b      	ldr	r0, [pc, #300]	; (8001584 <PONG_DrawMapDDB+0x56>)
	LDRB R5,[R0]
 8001456:	7805      	ldrb	r5, [r0, #0]
	CMP R5,#0
 8001458:	2d00      	cmp	r5, #0
	@IF NOT 1, MEANS IT DIDN'T MOVE
	BEQ PONG_DrawMapDDOS
 800145a:	d024      	beq.n	80014a6 <PONG_DrawMapDDOS>
	@IF EQUAL TO 1, MEANS IT MOVED
	@X0 AND X1 ARE CONSTANT 5 TO 10
	MOV R0,#5
 800145c:	f04f 0005 	mov.w	r0, #5
	MOV R1,#10
 8001460:	f04f 010a 	mov.w	r1, #10
	@DRAW A RECTANGLE BEHIND THE STICK
	LDR R10,=BLACK
 8001464:	f04f 0a00 	mov.w	sl, #0
	MOV R3,#0
 8001468:	f04f 0300 	mov.w	r3, #0
	MOV R4,#219
 800146c:	f04f 04db 	mov.w	r4, #219	; 0xdb
	BL TFT_DRAW_RECTANGLE
 8001470:	f7ff f8b8 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@GET THE CURRENT STICK POSITION
	LDR R5,=PONG_OSP
 8001474:	4d44      	ldr	r5, [pc, #272]	; (8001588 <PONG_DrawMapDDB+0x5a>)
	LDRB R5,[R5]
 8001476:	782d      	ldrb	r5, [r5, #0]
	@CHECK IF EXPANDED OR NOT
	LDR R6,=PONG_EXPAND
 8001478:	4e44      	ldr	r6, [pc, #272]	; (800158c <PONG_DrawMapDDB+0x5e>)
	LDRB R6,[R6]
 800147a:	7836      	ldrb	r6, [r6, #0]
	CMP R6,#255
 800147c:	2eff      	cmp	r6, #255	; 0xff
	@IF NOT 255, IT MEANS THAT IT IS EXPANDED
	BNE PONG_DrawMapExpandOS
 800147e:	d104      	bne.n	800148a <PONG_DrawMapExpandOS>
	@IF = 255, IT MEANS THAT IT IS NOT EXPANDED
	SUB R3,R5,#15
 8001480:	f1a5 030f 	sub.w	r3, r5, #15
	ADD R4,R5,#15
 8001484:	f105 040f 	add.w	r4, r5, #15
	@SKIP THE EXPANDED
	B PONG_DrawMapNEOS
 8001488:	e004      	b.n	8001494 <PONG_DrawMapNEOS>

0800148a <PONG_DrawMapExpandOS>:
@DRAW EXPAND OUR STICK LABEL
PONG_DrawMapExpandOS:
	SUB R3,R5,#20
 800148a:	f1a5 0314 	sub.w	r3, r5, #20
	ADD R4,R5,#20
 800148e:	f105 0414 	add.w	r4, r5, #20
	B PONG_DrawMapNEOS
 8001492:	e7ff      	b.n	8001494 <PONG_DrawMapNEOS>

08001494 <PONG_DrawMapNEOS>:
@NOT EXPANDED OUR STICK EXPAND
PONG_DrawMapNEOS:
	LDR R10,=WHITE
 8001494:	f64f 7aff 	movw	sl, #65535	; 0xffff
	BL TFT_DRAW_RECTANGLE
 8001498:	f7ff f8a4 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@SET THE OUR STICK MOVE CONDITION TO 0
	LDR R0,=PONG_OSPM
 800149c:	4839      	ldr	r0, [pc, #228]	; (8001584 <PONG_DrawMapDDB+0x56>)
	LDR R1,=0
 800149e:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80014a2:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE NEXT DRAWING
	B PONG_DrawMapDDOS
 80014a4:	e7ff      	b.n	80014a6 <PONG_DrawMapDDOS>

080014a6 <PONG_DrawMapDDOS>:
PONG_DrawMapDDOS:	@DRAW ENEMY STICK
	@CHECK IF ENEMY STICK MOVED OR NOT
	LDR R0,=PONG_ESPM
 80014a6:	483a      	ldr	r0, [pc, #232]	; (8001590 <PONG_DrawMapDDB+0x62>)
	LDRB R5,[R0]
 80014a8:	7805      	ldrb	r5, [r0, #0]
	CMP R5,#0
 80014aa:	2d00      	cmp	r5, #0
	@IF EQUAL TO 0, MEANS IT DIDN'T MOVE
	BEQ PONG_DrawMapDDES
 80014ac:	d01c      	beq.n	80014e8 <PONG_DrawMapDDES>
	@IF NOT, MEANS IT MOVED
	@X0 AND X1 ARE CONSTANT 5 TO 10
	MOV R0,#309
 80014ae:	f240 1035 	movw	r0, #309	; 0x135
	MOV R1,#314
 80014b2:	f44f 719d 	mov.w	r1, #314	; 0x13a
	@DRAW A RECTANGLE BEHIND THE STICK
	LDR R10,=BLACK
 80014b6:	f04f 0a00 	mov.w	sl, #0
	MOV R3,#0
 80014ba:	f04f 0300 	mov.w	r3, #0
	MOV R4,#219
 80014be:	f04f 04db 	mov.w	r4, #219	; 0xdb
	BL TFT_DRAW_RECTANGLE
 80014c2:	f7ff f88f 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@GET THE CURRENT STICK POSITION
	MOV R0,#309
 80014c6:	f240 1035 	movw	r0, #309	; 0x135
	LDR R5,=PONG_ESP
 80014ca:	4d32      	ldr	r5, [pc, #200]	; (8001594 <PONG_DrawMapDDB+0x66>)
	LDRB R5,[R5]
 80014cc:	782d      	ldrb	r5, [r5, #0]
	SUB R3,R5,#15
 80014ce:	f1a5 030f 	sub.w	r3, r5, #15
	ADD R4,R5,#15
 80014d2:	f105 040f 	add.w	r4, r5, #15
	LDR R10,=WHITE
 80014d6:	f64f 7aff 	movw	sl, #65535	; 0xffff
	BL TFT_DRAW_RECTANGLE
 80014da:	f7ff f883 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@SET THE ENEMY STICK MOVE CONDITION TO 0
	LDR R0,=PONG_ESPM
 80014de:	482c      	ldr	r0, [pc, #176]	; (8001590 <PONG_DrawMapDDB+0x62>)
	LDR R1,=0
 80014e0:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80014e4:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE NEXT DRAWING
	B PONG_DrawMapDDES
 80014e6:	e7ff      	b.n	80014e8 <PONG_DrawMapDDES>

080014e8 <PONG_DrawMapDDES>:
PONG_DrawMapDDES:	@DRAW BALL
	@CHECK IF BALL MOVED OR NOT
	LDR R0,=PONG_BPM
 80014e8:	482b      	ldr	r0, [pc, #172]	; (8001598 <PONG_DrawMapDDB+0x6a>)
	LDRB R1,[R0]
 80014ea:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#0
 80014ec:	2900      	cmp	r1, #0
	@IF EQUAL 0, MEANS IT DIDN'T MOVE
	BEQ PONG_DrawMapDDB
 80014ee:	d01e      	beq.n	800152e <PONG_DrawMapDDB>
	@SET THE BALL MOVE CONDITION TO 0
	LDR R5,=PONG_BPM
 80014f0:	4d29      	ldr	r5, [pc, #164]	; (8001598 <PONG_DrawMapDDB+0x6a>)
	LDR R10,=0
 80014f2:	f04f 0a00 	mov.w	sl, #0
	STRB R10,[R5]
 80014f6:	f885 a000 	strb.w	sl, [r5]
	@GET THE PERVIOUS X POSITION OF THE BALL
	LDR R5,=PONG_BPXP
 80014fa:	4d28      	ldr	r5, [pc, #160]	; (800159c <PONG_DrawMapDDB+0x6e>)
	LDRH R5,[R5]
 80014fc:	882d      	ldrh	r5, [r5, #0]
	@CALCULATE THE REQUIRED PARAMETERS OF X
	SUB R0,R5,#4
 80014fe:	f1a5 0004 	sub.w	r0, r5, #4
	ADD R1,R5,#4
 8001502:	f105 0104 	add.w	r1, r5, #4
	@GET THE PERVIOUS Y POSITION OF THE BALL
	LDR R5,=PONG_BPYP
 8001506:	4d26      	ldr	r5, [pc, #152]	; (80015a0 <PONG_DrawMapDDB+0x72>)
	LDRB R5,[R5]
 8001508:	782d      	ldrb	r5, [r5, #0]
	@CALCULATE THE REQUIRED PARAMETERS OF Y
	SUB R3,R5,#4
 800150a:	f1a5 0304 	sub.w	r3, r5, #4
	ADD R4,R5,#4
 800150e:	f105 0404 	add.w	r4, r5, #4
	@DRAW A BLACK RECTANGLE TO HIDE THE PERIVOUS BALL
	LDR R10,=BLACK
 8001512:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 8001516:	f7ff f865 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	@GET THE CURRENT X AND Y POSITION OF THE BALL AND DRAW A CIRCLE
	LDR R5,=PONG_BXP
 800151a:	4d22      	ldr	r5, [pc, #136]	; (80015a4 <PONG_DrawMapDDB+0x76>)
	LDRH R5,[R5]
 800151c:	882d      	ldrh	r5, [r5, #0]
	LDR R6,=PONG_BYP
 800151e:	4e22      	ldr	r6, [pc, #136]	; (80015a8 <PONG_DrawMapDDB+0x7a>)
	LDRB R6,[R6]
 8001520:	7836      	ldrb	r6, [r6, #0]
	LDR R7,=4
 8001522:	f04f 0704 	mov.w	r7, #4
	LDR R10,=BLUE
 8001526:	f04f 0a1f 	mov.w	sl, #31
	BL TFT_DRAW_CIRCLE
 800152a:	f7ff f87b 	bl	8000624 <TFT_DRAW_CIRCLE>

0800152e <PONG_DrawMapDDB>:
PONG_DrawMapDDB:	@DRAW NUMBER
	LDR R3,=220
 800152e:	f04f 03dc 	mov.w	r3, #220	; 0xdc
	LDR R4,=239
 8001532:	f04f 04ef 	mov.w	r4, #239	; 0xef
	LDR R10,=WHITE
 8001536:	f64f 7aff 	movw	sl, #65535	; 0xffff
	LDR R11,=RED
 800153a:	f44f 4b78 	mov.w	fp, #63488	; 0xf800
	@DISPLAY THE HUNDREDS
	LDR R0,=15
 800153e:	f04f 000f 	mov.w	r0, #15
	LDR R1,=24
 8001542:	f04f 0118 	mov.w	r1, #24
	BL TFT_SET_DRAWING_AREA
 8001546:	f7ff f823 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R2,=PONG_SCORE
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <PONG_DrawMapDDB+0x7e>)
	LDRB R1,[R2]
 800154c:	7811      	ldrb	r1, [r2, #0]
	BL TFT_DISPLAY_DIGIT
 800154e:	f7ff f8dd 	bl	800070c <TFT_DISPLAY_DIGIT>
	@DISPLAY THE TENS
	LDR R0,=28
 8001552:	f04f 001c 	mov.w	r0, #28
	LDR R1,=37
 8001556:	f04f 0125 	mov.w	r1, #37	; 0x25
	BL TFT_SET_DRAWING_AREA
 800155a:	f7ff f819 	bl	8000590 <TFT_SET_DRAWING_AREA>
	ADD R2,R2,#1
 800155e:	f102 0201 	add.w	r2, r2, #1
	LDRB R1,[R2]
 8001562:	7811      	ldrb	r1, [r2, #0]
	BL TFT_DISPLAY_DIGIT
 8001564:	f7ff f8d2 	bl	800070c <TFT_DISPLAY_DIGIT>
	@DISPLAY THE ONES
	LDR R0,=41
 8001568:	f04f 0029 	mov.w	r0, #41	; 0x29
	LDR R1,=50
 800156c:	f04f 0132 	mov.w	r1, #50	; 0x32
	BL TFT_SET_DRAWING_AREA
 8001570:	f7ff f80e 	bl	8000590 <TFT_SET_DRAWING_AREA>
	ADD R2,R2,#1
 8001574:	f102 0201 	add.w	r2, r2, #1
	LDRB R1,[R2]
 8001578:	7811      	ldrb	r1, [r2, #0]
	BL TFT_DISPLAY_DIGIT
 800157a:	f7ff f8c7 	bl	800070c <TFT_DISPLAY_DIGIT>

	POP {R0-R7,R10,PC}
 800157e:	e8bd 84ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, sl, pc}
 8001582:	0000      	.short	0x0000
	LDR R0,=PONG_OSPM
 8001584:	200066b8 	.word	0x200066b8
	LDR R5,=PONG_OSP
 8001588:	200066b7 	.word	0x200066b7
	LDR R6,=PONG_EXPAND
 800158c:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_ESPM
 8001590:	200066ba 	.word	0x200066ba
	LDR R5,=PONG_ESP
 8001594:	200066b9 	.word	0x200066b9
	LDR R0,=PONG_BPM
 8001598:	200066c3 	.word	0x200066c3
	LDR R5,=PONG_BPXP
 800159c:	200066be 	.word	0x200066be
	LDR R5,=PONG_BPYP
 80015a0:	200066c0 	.word	0x200066c0
	LDR R5,=PONG_BXP
 80015a4:	200066bb 	.word	0x200066bb
	LDR R6,=PONG_BYP
 80015a8:	200066bd 	.word	0x200066bd
	LDR R2,=PONG_SCORE
 80015ac:	200066c4 	.word	0x200066c4

080015b0 <PONG_MoveOSDown>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@MOVE OUR STICK DOWN FUNCTION, SHOULD BE CALLED IN EXTI1 (DOWN BUTTON)
PONG_MoveOSDown:
	PUSH {R0,R1,LR}
 80015b0:	b503      	push	{r0, r1, lr}
	@SET THE CONDITION OF MOVING
	LDR R0,=PONG_OSPM
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <PONG_MoveOSDownEF+0x2>)
	LDR R1,=1
 80015b4:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 80015b8:	7001      	strb	r1, [r0, #0]
	@CHECK IF EXPANDED OR NOT
	LDR R0,=PONG_EXPAND
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <PONG_MoveOSDownEF+0x6>)
	LDRB R0,[R0]
 80015bc:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#255
 80015be:	28ff      	cmp	r0, #255	; 0xff
	@IF NOT = 255, THEN IT IS EXPANDED
	BNE PONG_MoveOSDownEXPANDED
 80015c0:	d10e      	bne.n	80015e0 <PONG_MoveOSDownEXPANDED>
	@GET THE CURRENT OUR STICK POSITION
	LDR R0,=PONG_OSP
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <PONG_MoveOSDownEF+0xa>)
	LDRB R1,[R0]
 80015c4:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#25
 80015c6:	2919      	cmp	r1, #25
	@IF IT IS HIGHER THAN OR EQUAL (HALF THE SIZE)+(STEP), THEN MOVE NORMALLY
	BHS PONG_MoveOSDownDN
 80015c8:	d202      	bcs.n	80015d0 <PONG_MoveOSDownDN>
	@IF IT IS NOT, CHECK THAT IT IS HIGHER THAN (HALF THE SIZE)
	CMP R1,#15
 80015ca:	290f      	cmp	r1, #15
	@IF HIGHER THAN 15, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BHI PONG_MoveOSDownDF
 80015cc:	d804      	bhi.n	80015d8 <PONG_MoveOSDownDF>
	@IF IT IS LOWER OR EQUAL HALF THE SIZE, IT IS ALREADY AT MOST DOWN
	B PONG_MoveOSDownEF
 80015ce:	e016      	b.n	80015fe <PONG_MoveOSDownEF>

080015d0 <PONG_MoveOSDownDN>:
@DRAW NORMALLY LABEL
PONG_MoveOSDownDN:
	@SUBTRACT THE STEP
	SUB R1,R1,#10
 80015d0:	f1a1 010a 	sub.w	r1, r1, #10
	STRB R1,[R0]
 80015d4:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSDownEF
 80015d6:	e012      	b.n	80015fe <PONG_MoveOSDownEF>

080015d8 <PONG_MoveOSDownDF>:
@DRAW BY FORCE LABEL
PONG_MoveOSDownDF:
	@PUT EXACTLY HALF THE SIZE IN THE POSITION
	MOV R1,#15
 80015d8:	f04f 010f 	mov.w	r1, #15
	STRB R1,[R0]
 80015dc:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSDownEF
 80015de:	e00e      	b.n	80015fe <PONG_MoveOSDownEF>

080015e0 <PONG_MoveOSDownEXPANDED>:
PONG_MoveOSDownEXPANDED:
	@GET THE CURRENT OUR STICK POSITION
	LDR R0,=PONG_OSP
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <PONG_MoveOSDownEF+0xa>)
	LDRB R1,[R0]
 80015e2:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#30
 80015e4:	291e      	cmp	r1, #30
	@IF IT IS HIGHER THAN OR EQUAL (HALF THE SIZE)+(STEP), THEN MOVE NORMALLY
	BHS PONG_MoveOSDownDNE	@IF IT IS NOT, CHECK THAT IT IS HIGHER THAN (HALF THE SIZE)
 80015e6:	d202      	bcs.n	80015ee <PONG_MoveOSDownDNE>
	CMP R1,#20
 80015e8:	2914      	cmp	r1, #20
	@IF HIGHER THAN 20, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BHI PONG_MoveOSDownDFE
 80015ea:	d804      	bhi.n	80015f6 <PONG_MoveOSDownDFE>
	@IF IT IS LOWER OR EQUAL HALF THE SIZE, IT IS ALREADY AT MOST DOWN
	B PONG_MoveOSDownEF
 80015ec:	e007      	b.n	80015fe <PONG_MoveOSDownEF>

080015ee <PONG_MoveOSDownDNE>:
@DRAW NORMALLY LABEL
PONG_MoveOSDownDNE:
	@SUBTRACT THE STEP
	SUB R1,R1,#10
 80015ee:	f1a1 010a 	sub.w	r1, r1, #10
	STRB R1,[R0]
 80015f2:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSDownEF
 80015f4:	e003      	b.n	80015fe <PONG_MoveOSDownEF>

080015f6 <PONG_MoveOSDownDFE>:
@DRAW BY FORCE LABEL
PONG_MoveOSDownDFE:
	@PUT EXACTLY HALF THE SIZE IN THE POSITION
	MOV R1,#20
 80015f6:	f04f 0114 	mov.w	r1, #20
	STRB R1,[R0]
 80015fa:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSDownEF
 80015fc:	e7ff      	b.n	80015fe <PONG_MoveOSDownEF>

080015fe <PONG_MoveOSDownEF>:
@END FUNCTION LABEL
PONG_MoveOSDownEF:
	POP {R0,R1,PC}
 80015fe:	bd03      	pop	{r0, r1, pc}
	LDR R0,=PONG_OSPM
 8001600:	200066b8 	.word	0x200066b8
	LDR R0,=PONG_EXPAND
 8001604:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_OSP
 8001608:	200066b7 	.word	0x200066b7

0800160c <PONG_MoveOSUp>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@MOVE OUR STICK UP FUNCTION, SHOULD BE CALLED IN EXTI0 (UP BUTTON)
PONG_MoveOSUp:
	PUSH {R0,R1,LR}
 800160c:	b503      	push	{r0, r1, lr}
	@SET THE CONDITION OF MOVING
	LDR R0,=PONG_OSPM
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <PONG_MoveOSUpEF+0x2>)
	LDR R1,=1
 8001610:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 8001614:	7001      	strb	r1, [r0, #0]
	@GET THE CURRENT OUR STICK POSITION
	@CHECK IF EXPANDED OR NOT
	LDR R0,=PONG_EXPAND
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <PONG_MoveOSUpEF+0x6>)
	LDRB R0,[R0]
 8001618:	7800      	ldrb	r0, [r0, #0]
	CMP R0,#255
 800161a:	28ff      	cmp	r0, #255	; 0xff
	@IF NOT = 255, THEN IT IS EXPANDED
	BNE PONG_MoveOSUpEXPANDED
 800161c:	d10e      	bne.n	800163c <PONG_MoveOSUpEXPANDED>
	LDR R0,=PONG_OSP
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <PONG_MoveOSUpEF+0xa>)
	LDRB R1,[R0]
 8001620:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#194
 8001622:	29c2      	cmp	r1, #194	; 0xc2
	@IF IT IS LOWER THAN OR EQUAL (MAX SCREEN) - (HALF THE SIZE + STEP), THEN MOVE NORMALLY
	BLS PONG_MoveOSUpDNE
 8001624:	d911      	bls.n	800164a <PONG_MoveOSUpDNE>
	@IF IT IS NOT, CHECK THAT IT IS LOWER THAN (MAX SCREEN) - (HALF THE SIZE)
	CMP R1,#204
 8001626:	29cc      	cmp	r1, #204	; 0xcc
	@IF LOWER THAN 204, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BLO PONG_MoveOSUpDFE
 8001628:	d313      	bcc.n	8001652 <PONG_MoveOSUpDFE>
	@IF IT IS HIGHER OR EQUAL (MAX SCREEN) - (HALF THE SIZE), IT IS ALREADY AT MOST UP
	B PONG_MoveOSUpEF
 800162a:	e016      	b.n	800165a <PONG_MoveOSUpEF>

0800162c <PONG_MoveOSUpDN>:
@DRAW NORMALLY LABEL
PONG_MoveOSUpDN:
	@ADD THE STEP
	ADD R1,R1,#10
 800162c:	f101 010a 	add.w	r1, r1, #10
	STRB R1,[R0]
 8001630:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSUpEF
 8001632:	e012      	b.n	800165a <PONG_MoveOSUpEF>

08001634 <PONG_MoveOSUpDF>:
@DRAW BY FORCE LABEL
PONG_MoveOSUpDF:
	@PUT EXACTLY (MAX SCREEN) - (HALF THE SIZE)
	MOV R1,#204
 8001634:	f04f 01cc 	mov.w	r1, #204	; 0xcc
	STRB R1,[R0]
 8001638:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSUpEF
 800163a:	e00e      	b.n	800165a <PONG_MoveOSUpEF>

0800163c <PONG_MoveOSUpEXPANDED>:
PONG_MoveOSUpEXPANDED:
	LDR R0,=PONG_OSP
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <PONG_MoveOSUpEF+0xa>)
	LDRB R1,[R0]
 800163e:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#189
 8001640:	29bd      	cmp	r1, #189	; 0xbd
	@IF IT IS LOWER THAN OR EQUAL (MAX SCREEN) - (HALF THE SIZE + STEP), THEN MOVE NORMALLY
	BLS PONG_MoveOSUpDNE
 8001642:	d902      	bls.n	800164a <PONG_MoveOSUpDNE>
	@IF IT IS NOT, CHECK THAT IT IS LOWER THAN (MAX SCREEN) - (HALF THE SIZE)
	CMP R1,#199
 8001644:	29c7      	cmp	r1, #199	; 0xc7
	@IF LOWER THAN 204, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BLO PONG_MoveOSUpDFE
 8001646:	d304      	bcc.n	8001652 <PONG_MoveOSUpDFE>
	@IF IT IS HIGHER OR EQUAL (MAX SCREEN) - (HALF THE SIZE), IT IS ALREADY AT MOST UP
	B PONG_MoveOSUpEF
 8001648:	e007      	b.n	800165a <PONG_MoveOSUpEF>

0800164a <PONG_MoveOSUpDNE>:
@DRAW NORMALLY LABEL
PONG_MoveOSUpDNE:
	@ADD THE STEP
	ADD R1,R1,#10
 800164a:	f101 010a 	add.w	r1, r1, #10
	STRB R1,[R0]
 800164e:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSUpEF
 8001650:	e003      	b.n	800165a <PONG_MoveOSUpEF>

08001652 <PONG_MoveOSUpDFE>:
@DRAW BY FORCE LABEL
PONG_MoveOSUpDFE:
	@PUT EXACTLY (MAX SCREEN) - (HALF THE SIZE)
	MOV R1,#199
 8001652:	f04f 01c7 	mov.w	r1, #199	; 0xc7
	STRB R1,[R0]
 8001656:	7001      	strb	r1, [r0, #0]
	B PONG_MoveOSUpEF
 8001658:	e7ff      	b.n	800165a <PONG_MoveOSUpEF>

0800165a <PONG_MoveOSUpEF>:
@END FUNCTION LABEL
PONG_MoveOSUpEF:
	POP {R0,R1,PC}
 800165a:	bd03      	pop	{r0, r1, pc}
	LDR R0,=PONG_OSPM
 800165c:	200066b8 	.word	0x200066b8
	LDR R0,=PONG_EXPAND
 8001660:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_OSP
 8001664:	200066b7 	.word	0x200066b7

08001668 <PONG_MoveES>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@MOVE ENEMY STICK FUNCTION, SHOULD BE CALLED IN TIM3 (TIMER ENEMY STICK)
PONG_MoveES:
	PUSH {R0,R1,R2,R3,LR}
 8001668:	b50f      	push	{r0, r1, r2, r3, lr}
	@SET THE CONDITION OF MOVING
	LDR R0,=PONG_ESPM
 800166a:	4816      	ldr	r0, [pc, #88]	; (80016c4 <PONG_MoveESEF+0x4>)
	LDR R1,=1
 800166c:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 8001670:	7001      	strb	r1, [r0, #0]
	@GET THE CURRENT ENEMY STICK POSITION
	LDR R0,=PONG_ESP
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <PONG_MoveESEF+0x8>)
	LDRB R1,[R0]
 8001674:	7801      	ldrb	r1, [r0, #0]
	@GET THE CURRENT BALL Y POSITION
	LDR R2,=PONG_BYP
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <PONG_MoveESEF+0xc>)
	LDRB R2,[R2]
 8001678:	7812      	ldrb	r2, [r2, #0]
	SUB R3,R1,#15
 800167a:	f1a1 030f 	sub.w	r3, r1, #15
	@IF ENEMY STICK - 15 > BALL Y, MOVE DOWN
	CMP R3,R2
 800167e:	4293      	cmp	r3, r2
	BHI PONG_MoveESD
 8001680:	d804      	bhi.n	800168c <PONG_MoveESD>
	ADD R3,R1,#15
 8001682:	f101 030f 	add.w	r3, r1, #15
	@IF NOT, CHECK IF ENEMY STICK + 15 < BALL Y, THEN MOVE UP
	CMP R3,R2
 8001686:	4293      	cmp	r3, r2
	BLO PONG_MoveESU
 8001688:	d30d      	bcc.n	80016a6 <PONG_MoveESU>
	@IF NOT BOTH, DO NOTHING
	B PONG_MoveESEF
 800168a:	e019      	b.n	80016c0 <PONG_MoveESEF>

0800168c <PONG_MoveESD>:
@MOVE DOWN LABEL
PONG_MoveESD:
	@ENEMY STICK POSITION IS ALREADY IN R1 AND ITS ADDRESS IN R0
	CMP R1,#25
 800168c:	2919      	cmp	r1, #25
	@IF IT IS HIGHER THAN OR EQUAL (HALF THE SIZE)+(STEP), THEN MOVE NORMALLY
	BHS PONG_MoveESDownDN
 800168e:	d202      	bcs.n	8001696 <PONG_MoveESDownDN>
	@IF IT IS NOT, CHECK THAT IT IS HIGHER THAN (HALF THE SIZE)
	CMP R1,#15
 8001690:	290f      	cmp	r1, #15
	@IF HIGHER THAN 15, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BHI PONG_MoveESDownDF
 8001692:	d804      	bhi.n	800169e <PONG_MoveESDownDF>
	@IF IT IS LOWER OR EQUAL HALF THE SIZE, IT IS ALREADY AT MOST DOWN
	B PONG_MoveESEF
 8001694:	e014      	b.n	80016c0 <PONG_MoveESEF>

08001696 <PONG_MoveESDownDN>:
@DOWN DRAW NORMALLY LABEL
PONG_MoveESDownDN:
	SUB R1,R1,#10
 8001696:	f1a1 010a 	sub.w	r1, r1, #10
	STRB R1,[R0]
 800169a:	7001      	strb	r1, [r0, #0]
	B PONG_MoveESEF
 800169c:	e010      	b.n	80016c0 <PONG_MoveESEF>

0800169e <PONG_MoveESDownDF>:
@DOWN DRAW BY FORCE LABEL
PONG_MoveESDownDF:
	@PUT EXACTLY HALF THE SIZE IN THE POSITION
	MOV R1,#15
 800169e:	f04f 010f 	mov.w	r1, #15
	STRB R1,[R0]
 80016a2:	7001      	strb	r1, [r0, #0]
	B PONG_MoveESEF
 80016a4:	e00c      	b.n	80016c0 <PONG_MoveESEF>

080016a6 <PONG_MoveESU>:
@MOVE UP LABEL
PONG_MoveESU:
	@ENEMY STICK POSITION IS ALREADY IN R1 AND ITS ADDRESS IN R0
	CMP R1,#194
 80016a6:	29c2      	cmp	r1, #194	; 0xc2
	@IF IT IS HIGHER THAN OR EQUAL (HALF THE SIZE)+(STEP), THEN MOVE NORMALLY
	BLS PONG_MoveESUpDN
 80016a8:	d902      	bls.n	80016b0 <PONG_MoveESUpDN>
	@IF IT IS NOT, CHECK THAT IT IS HIGHER THAN (HALF THE SIZE)
	CMP R1,#204
 80016aa:	29cc      	cmp	r1, #204	; 0xcc
	@IF HIGHER THAN 15, IT CAN MOVE A LITTLE MORE (LESS THAN STEP)
	BLO PONG_MoveESDownDF
 80016ac:	d3f7      	bcc.n	800169e <PONG_MoveESDownDF>
	@IF IT IS LOWER OR EQUAL HALF THE SIZE, IT IS ALREADY AT MOST DOWN
	B PONG_MoveESEF
 80016ae:	e007      	b.n	80016c0 <PONG_MoveESEF>

080016b0 <PONG_MoveESUpDN>:
@UP DRAW NORMALLY LABEL
PONG_MoveESUpDN:
	ADD R1,R1,#10
 80016b0:	f101 010a 	add.w	r1, r1, #10
	STRB R1,[R0]
 80016b4:	7001      	strb	r1, [r0, #0]
	B PONG_MoveESEF
 80016b6:	e003      	b.n	80016c0 <PONG_MoveESEF>

080016b8 <PONG_MoveESUpDF>:
@UP DRAW BY FORCE LABEL
PONG_MoveESUpDF:
	@PUT EXACTLY HALF THE SIZE IN THE POSITION
	MOV R1,#204
 80016b8:	f04f 01cc 	mov.w	r1, #204	; 0xcc
	STRB R1,[R0]
 80016bc:	7001      	strb	r1, [r0, #0]
	B PONG_MoveESEF
 80016be:	e7ff      	b.n	80016c0 <PONG_MoveESEF>

080016c0 <PONG_MoveESEF>:
@END FUNCTION LABEL
PONG_MoveESEF:
	POP {R0,R1,R2,R3,PC}
 80016c0:	bd0f      	pop	{r0, r1, r2, r3, pc}
 80016c2:	0000      	.short	0x0000
	LDR R0,=PONG_ESPM
 80016c4:	200066ba 	.word	0x200066ba
	LDR R0,=PONG_ESP
 80016c8:	200066b9 	.word	0x200066b9
	LDR R2,=PONG_BYP
 80016cc:	200066bd 	.word	0x200066bd

080016d0 <PONG_MoveBall>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@MOVE BALL FUNCTION, SHOULD BE CALLED IN TIM2 (TIMER MOVING BALL)
PONG_MoveBall:
	PUSH {R0,R1,R2,LR}
 80016d0:	b507      	push	{r0, r1, r2, lr}
	@SET THE CONDITION OF MOVING
	LDR R0,=PONG_BPM
 80016d2:	485f      	ldr	r0, [pc, #380]	; (8001850 <PONG_MoveBallCAY+0x4>)
	MOV R1,#1
 80016d4:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 80016d8:	7001      	strb	r1, [r0, #0]
	@GET THE CURRENT X POSITION OF THE BALL
	LDR R0,=PONG_BXP
 80016da:	485e      	ldr	r0, [pc, #376]	; (8001854 <PONG_MoveBallCAY+0x8>)
	LDRH R1,[R0]
 80016dc:	8801      	ldrh	r1, [r0, #0]
	CMP R1,#15
 80016de:	290f      	cmp	r1, #15
	@IF LOWER THAN OR EQUAL 15, MEANS IT HIT THE LEFT END OF THE GAME
	BLS PONG_MoveBallHOS
 80016e0:	d907      	bls.n	80016f2 <PONG_MoveBallHOS>
	@IF HIGHER THAN OR EQUAL 304, MEANS IT HIT THE RIGHT END OF THE GAME
	CMP R1,#304
 80016e2:	f5b1 7f98 	cmp.w	r1, #304	; 0x130
	BHS PONG_MoveBallHES
 80016e6:	d23a      	bcs.n	800175e <PONG_MoveBallHES>
	@IF NEITHER, THEN IT MEANS THAT THE BALL IS SOMEWHERE IN BETWEEN
	LDR R0,=PONG_BXD
 80016e8:	485b      	ldr	r0, [pc, #364]	; (8001858 <PONG_MoveBallCAY+0xc>)
	LDRB R0,[R0]
 80016ea:	7800      	ldrb	r0, [r0, #0]
	@CHECK THE X DIRECTION
	CMP R0,#0
 80016ec:	2800      	cmp	r0, #0
	@IF EQUAL 0, IT MEANS THAT IT IS MOVING LEFT
	BEQ PONG_MoveBallL
 80016ee:	d047      	beq.n	8001780 <PONG_MoveBallL>
	@IF NOT 0, IT MEANS THAT IT IS MOVING RIGHT
	B PONG_MoveBallR
 80016f0:	e054      	b.n	800179c <PONG_MoveBallR>

080016f2 <PONG_MoveBallHOS>:
@HIT OUR STICK LABEL
PONG_MoveBallHOS:
	@CHECK WHETHER IT HITS OUR STICK, OR IT IS A GOAL
	LDR R0,=PONG_OSP
 80016f2:	485a      	ldr	r0, [pc, #360]	; (800185c <PONG_MoveBallCAY+0x10>)
	LDRB R0,[R0]
 80016f4:	7800      	ldrb	r0, [r0, #0]
	LDR R1,=PONG_BYP
 80016f6:	495a      	ldr	r1, [pc, #360]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R1]
 80016f8:	7809      	ldrb	r1, [r1, #0]
	@CHECK IF THE EXPAND POWERUP IS ON
	LDR R2,=PONG_EXPAND
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <PONG_MoveBallCAY+0x18>)
	LDRB R3,[R2]
 80016fc:	7813      	ldrb	r3, [r2, #0]
	@IF = 255, THEN THERE IS NO POWERUP
	CMP R3,#255
 80016fe:	2bff      	cmp	r3, #255	; 0xff
	@IF NOT, JUMP TO EXPAND FUNCTION
	BNE PONG_MoveBallEXPAND
 8001700:	d112      	bne.n	8001728 <PONG_MoveBallEXPAND>
	SUB R0,R0,#15
 8001702:	f1a0 000f 	sub.w	r0, r0, #15
	@IF BALL Y <= OUR STICK - 20, THEN IT IS A LOSE
	CMP R1,R0
 8001706:	4281      	cmp	r1, r0
	BLS PONG_MoveBallLOSE
 8001708:	f240 808f 	bls.w	800182a <PONG_MoveBallLOSE>
	@IF NOT, CHECK ABOVE
	ADD R0,R0,#30
 800170c:	f100 001e 	add.w	r0, r0, #30
	@IF BALL Y >= OUR STICK + 20, THEN IT IS A LOSE
	CMP R1,R0
 8001710:	4281      	cmp	r1, r0
	BHS PONG_MoveBallLOSE
 8001712:	f080 808a 	bcs.w	800182a <PONG_MoveBallLOSE>
	LDR R2,=1
 8001716:	f04f 0201 	mov.w	r2, #1
	BL PONG_IncrementScore
 800171a:	f000 f8ad 	bl	8001878 <PONG_IncrementScore>
	@IF NOT, THEN IT HITS OUR STICK, SO CHANGE IT'S DIRECTION TO RIGHT
	LDR R0,=PONG_BXD
 800171e:	484e      	ldr	r0, [pc, #312]	; (8001858 <PONG_MoveBallCAY+0xc>)
	MOV R1,#1
 8001720:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 8001724:	7001      	strb	r1, [r0, #0]
	@JUMP TO MOVE RIGHT
	B PONG_MoveBallR
 8001726:	e039      	b.n	800179c <PONG_MoveBallR>

08001728 <PONG_MoveBallEXPAND>:
@EXPAND HIT OUR STICK LABEL
PONG_MoveBallEXPAND:
	SUB R3,R3,#1
 8001728:	f1a3 0301 	sub.w	r3, r3, #1
	CMP R3,#0
 800172c:	2b00      	cmp	r3, #0
	BEQ PONG_MoveBallESZ
 800172e:	d001      	beq.n	8001734 <PONG_MoveBallESZ>
	STRB R3,[R2]
 8001730:	7013      	strb	r3, [r2, #0]
	B PONG_MoveBallEM
 8001732:	e003      	b.n	800173c <PONG_MoveBallEM>

08001734 <PONG_MoveBallESZ>:
@EXPAND SET ZERO LABEL
PONG_MoveBallESZ:
	LDR R3,=0
 8001734:	f04f 0300 	mov.w	r3, #0
	STRB R3,[R2]
 8001738:	7013      	strb	r3, [r2, #0]
	B PONG_MoveBallEM
 800173a:	e7ff      	b.n	800173c <PONG_MoveBallEM>

0800173c <PONG_MoveBallEM>:
@EXPAND MOVE LABEL
PONG_MoveBallEM:
	SUB R0,R0,#20
 800173c:	f1a0 0014 	sub.w	r0, r0, #20
	@IF BALL Y <= OUR STICK - 35, THEN IT IS A LOSE
	CMP R1,R0
 8001740:	4281      	cmp	r1, r0
	BLS PONG_MoveBallLOSE
 8001742:	d972      	bls.n	800182a <PONG_MoveBallLOSE>
	@IF NOT, CHECK ABOVE
	ADD R0,R0,#40
 8001744:	f100 0028 	add.w	r0, r0, #40	; 0x28
	@IF BALL Y >= OUR STICK + 35, THEN IT IS A LOSE
	CMP R1,R0
 8001748:	4281      	cmp	r1, r0
	BHS PONG_MoveBallLOSE
 800174a:	d26e      	bcs.n	800182a <PONG_MoveBallLOSE>
	LDR R2,=1
 800174c:	f04f 0201 	mov.w	r2, #1
	BL PONG_IncrementScore
 8001750:	f000 f892 	bl	8001878 <PONG_IncrementScore>
	@IF NOT, THEN IT HITS OUR STICK, SO CHANGE IT'S DIRECTION TO RIGHT
	LDR R0,=PONG_BXD
 8001754:	4840      	ldr	r0, [pc, #256]	; (8001858 <PONG_MoveBallCAY+0xc>)
	MOV R1,#1
 8001756:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 800175a:	7001      	strb	r1, [r0, #0]
	@JUMP TO MOVE RIGHT
	B PONG_MoveBallR
 800175c:	e01e      	b.n	800179c <PONG_MoveBallR>

0800175e <PONG_MoveBallHES>:
@HIT ENEMY STICK LABEL
PONG_MoveBallHES:
	@CHECK WHETHER IT HITS ENEMY STICK, OR IT IS A GOAL
	LDR R0,=PONG_ESP
 800175e:	4842      	ldr	r0, [pc, #264]	; (8001868 <PONG_MoveBallCAY+0x1c>)
	LDRB R0,[R0]
 8001760:	7800      	ldrb	r0, [r0, #0]
	LDR R1,=PONG_BYP
 8001762:	493f      	ldr	r1, [pc, #252]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R1]
 8001764:	7809      	ldrb	r1, [r1, #0]
	SUB R0,R0,#20
 8001766:	f1a0 0014 	sub.w	r0, r0, #20
	@IF BALL Y <= ENEMY STICK - 20, THEN IT IS A WIN
	CMP R1,R0
 800176a:	4281      	cmp	r1, r0
	BLS PONG_MoveBallWIN
 800176c:	d94a      	bls.n	8001804 <PONG_MoveBallWIN>
	@IF NOT, CHECK ABOVE
	ADD R0,R0,#40
 800176e:	f100 0028 	add.w	r0, r0, #40	; 0x28
	@IF BALL Y >= ENEMY STICK + 20, THEN IT IS A WIN
	CMP R1,R0
 8001772:	4281      	cmp	r1, r0
	BHS PONG_MoveBallWIN
 8001774:	d246      	bcs.n	8001804 <PONG_MoveBallWIN>
	@IF NOT, THEN IT HITS ENEMY STICK, SO CHANGE IT'S DIRECTION TO LEFT
	LDR R0,=PONG_BXD
 8001776:	4838      	ldr	r0, [pc, #224]	; (8001858 <PONG_MoveBallCAY+0xc>)
	MOV R1,#0
 8001778:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 800177c:	7001      	strb	r1, [r0, #0]
	@JUMP TO MOVE LEFT
	B PONG_MoveBallL
 800177e:	e7ff      	b.n	8001780 <PONG_MoveBallL>

08001780 <PONG_MoveBallL>:
@MOVE LEFT LABEL
PONG_MoveBallL:
	@GET THE CURRENT BALL X POSITION
	LDR R0,=PONG_BXP
 8001780:	4834      	ldr	r0, [pc, #208]	; (8001854 <PONG_MoveBallCAY+0x8>)
	LDRH R1,[R0]
 8001782:	8801      	ldrh	r1, [r0, #0]
	@PUT IT IN THE BALL PERVIOUS X POSITION
	LDR R2,=PONG_BPXP
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <PONG_MoveBallCAY+0x20>)
	STRH R1,[R2]
 8001786:	8011      	strh	r1, [r2, #0]
	@IF GREATER THAN OR EQUAL 23, THEN IT CAN MOVE NORMALLY TO 15
	CMP R1,#23
 8001788:	2917      	cmp	r1, #23
	BHS PONG_MoveBallLNS
 800178a:	d203      	bcs.n	8001794 <PONG_MoveBallLNS>
	@IF NOT, THEN JUST PUT 15
	MOV R1,#15
 800178c:	f04f 010f 	mov.w	r1, #15
	STRH R1,[R0]
 8001790:	8001      	strh	r1, [r0, #0]
	@CONTINUE TO MOVE IN Y
	B PONG_MoveBallCAX
 8001792:	e012      	b.n	80017ba <PONG_MoveBallCAX>

08001794 <PONG_MoveBallLNS>:
@LEFT NORMAL SUBTRACT LABEL
PONG_MoveBallLNS:
	@SUBTRACT AND STORE THE VALUE
	SUB R1,R1,#8
 8001794:	f1a1 0108 	sub.w	r1, r1, #8
	STRH R1,[R0]
 8001798:	8001      	strh	r1, [r0, #0]
	@CONTINUE TO MOVE IN Y
	B PONG_MoveBallCAX
 800179a:	e00e      	b.n	80017ba <PONG_MoveBallCAX>

0800179c <PONG_MoveBallR>:
@MOVE RIGHT LABEL
PONG_MoveBallR:
	@GET THE CURRENT BALL X POSITION
	LDR R0,=PONG_BXP
 800179c:	482d      	ldr	r0, [pc, #180]	; (8001854 <PONG_MoveBallCAY+0x8>)
	LDRH R1,[R0]
 800179e:	8801      	ldrh	r1, [r0, #0]
	@PUT IT IN THE BALL PERVIOUS X POSITION
	LDR R2,=PONG_BPXP
 80017a0:	4a32      	ldr	r2, [pc, #200]	; (800186c <PONG_MoveBallCAY+0x20>)
	STRH R1,[R2]
 80017a2:	8011      	strh	r1, [r2, #0]
	@IF LESS THAN OR EQUAL 296, THEN IT CAN MOVE NORMALLY TO 304
	CMP R1,#296
 80017a4:	f5b1 7f94 	cmp.w	r1, #296	; 0x128
	BLS PONG_MoveBallRNA
 80017a8:	d903      	bls.n	80017b2 <PONG_MoveBallRNA>
	@IF NOT, THEN JUST PUT 304
	MOV R1,#304
 80017aa:	f44f 7198 	mov.w	r1, #304	; 0x130
	STRH R1,[R0]
 80017ae:	8001      	strh	r1, [r0, #0]
	@CONTINUE TO MOVE IN Y
	B PONG_MoveBallCAX
 80017b0:	e003      	b.n	80017ba <PONG_MoveBallCAX>

080017b2 <PONG_MoveBallRNA>:
@RIGHT NORMAL ADD LABEL
PONG_MoveBallRNA:
	@ADD AND STORE THE VALUE
	ADD R1,R1,#8
 80017b2:	f101 0108 	add.w	r1, r1, #8
	STRH R1,[R0]
 80017b6:	8001      	strh	r1, [r0, #0]
	@CONTINUE TO MOVE IN Y
	B PONG_MoveBallCAX
 80017b8:	e7ff      	b.n	80017ba <PONG_MoveBallCAX>

080017ba <PONG_MoveBallCAX>:
@CONTINUE AFTER X LABEL
PONG_MoveBallCAX:
	@GET THE CURRENT BALL X POSITION
	LDR R0,=PONG_BYP
 80017ba:	4829      	ldr	r0, [pc, #164]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R0]
 80017bc:	7801      	ldrb	r1, [r0, #0]
	@IF HIGHER THAN 212, IT MEANS THAT IT HITS THE CEILING
	CMP R1,#212
 80017be:	29d4      	cmp	r1, #212	; 0xd4
	BHI PONG_MoveBallHC
 80017c0:	d80b      	bhi.n	80017da <PONG_MoveBallHC>
	@IF IT IS LOWER THAN 7, IT MEANS THAT IT HITS THE FLOOR
	CMP R1,#7
 80017c2:	2907      	cmp	r1, #7
	BLO PONG_MoveBallHF
 80017c4:	d304      	bcc.n	80017d0 <PONG_MoveBallHF>
	@IF NEITHER, THEN IT MEANS THAT THE BALL IS SOMEWHERE IN BETWEEN
	LDR R0,=PONG_BYD
 80017c6:	482a      	ldr	r0, [pc, #168]	; (8001870 <PONG_MoveBallCAY+0x24>)
	LDRB R0,[R0]
 80017c8:	7800      	ldrb	r0, [r0, #0]
	@CHECK THE Y DIRECTION
	CMP R0,#0
 80017ca:	2800      	cmp	r0, #0
	@IF EQUAL 0, IT MEANS THAT IT IS MOVING DOWN
	BEQ PONG_MoveBallD
 80017cc:	d00a      	beq.n	80017e4 <PONG_MoveBallD>
	@IF NOT 0, IT MEANS THAT IT IS MOVING UP
	B PONG_MoveBallU
 80017ce:	e011      	b.n	80017f4 <PONG_MoveBallU>

080017d0 <PONG_MoveBallHF>:
@HIT FLOOR LABEL
PONG_MoveBallHF:
	@CHANGE THE DIRECTION TO UP
	LDR R0,=PONG_BYD
 80017d0:	4827      	ldr	r0, [pc, #156]	; (8001870 <PONG_MoveBallCAY+0x24>)
	MOV R1,#1
 80017d2:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 80017d6:	7001      	strb	r1, [r0, #0]
	@JUMP TO MOVE UP
	B PONG_MoveBallU
 80017d8:	e00c      	b.n	80017f4 <PONG_MoveBallU>

080017da <PONG_MoveBallHC>:
@HIT CEILING LABEL
PONG_MoveBallHC:
	@CHANGE THE DIRECTION TO DOWN
	LDR R0,=PONG_BYD
 80017da:	4825      	ldr	r0, [pc, #148]	; (8001870 <PONG_MoveBallCAY+0x24>)
	MOV R1,#0
 80017dc:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80017e0:	7001      	strb	r1, [r0, #0]
	@JUMP TO MOVE DOWN
	B PONG_MoveBallD
 80017e2:	e7ff      	b.n	80017e4 <PONG_MoveBallD>

080017e4 <PONG_MoveBallD>:
@MOVE DOWN LABEL
PONG_MoveBallD:
	@GET THE Y POSITION
	LDR R0,=PONG_BYP
 80017e4:	481e      	ldr	r0, [pc, #120]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R0]
 80017e6:	7801      	ldrb	r1, [r0, #0]
	@PUT IT IN THE PERIVOUS Y POSITION
	LDR R2,=PONG_BPYP
 80017e8:	4a22      	ldr	r2, [pc, #136]	; (8001874 <PONG_MoveBallCAY+0x28>)
	STRB R1,[R2]
 80017ea:	7011      	strb	r1, [r2, #0]
	@SUBTRACT AND STORE
	SUB R1,R1,#8
 80017ec:	f1a1 0108 	sub.w	r1, r1, #8
	STRB R1,[R0]
 80017f0:	7001      	strb	r1, [r0, #0]
	@END FUNCTION HERE
	B PONG_MoveBallCAY
 80017f2:	e02b      	b.n	800184c <PONG_MoveBallCAY>

080017f4 <PONG_MoveBallU>:
@MOVE UP LABEL
PONG_MoveBallU:
	@GET THE Y POSITION
	LDR R0,=PONG_BYP
 80017f4:	481a      	ldr	r0, [pc, #104]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R0]
 80017f6:	7801      	ldrb	r1, [r0, #0]
	@PUT IT IN THE PERIVOUS Y POSITION
	LDR R2,=PONG_BPYP
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <PONG_MoveBallCAY+0x28>)
	STRB R1,[R2]
 80017fa:	7011      	strb	r1, [r2, #0]
	@ADD AND STORE
	ADD R1,R1,#8
 80017fc:	f101 0108 	add.w	r1, r1, #8
	STRB R1,[R0]
 8001800:	7001      	strb	r1, [r0, #0]
	@END FUNCTION HERE
	B PONG_MoveBallCAY
 8001802:	e023      	b.n	800184c <PONG_MoveBallCAY>

08001804 <PONG_MoveBallWIN>:
@WIN LABEL
PONG_MoveBallWIN:
	@CALL INCREMENTER
	LDR R2,=10
 8001804:	f04f 020a 	mov.w	r2, #10
	BL PONG_IncrementScore
 8001808:	f000 f836 	bl	8001878 <PONG_IncrementScore>
	@GET THE X POSITION
	LDR R0,=PONG_BXP
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <PONG_MoveBallCAY+0x8>)
	LDRH R1,[R0]
 800180e:	8801      	ldrh	r1, [r0, #0]
	@STORE IT IN THE PERIVOUS X POSITION
	LDR R2,=PONG_BPXP
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <PONG_MoveBallCAY+0x20>)
	STRH R1,[R2]
 8001812:	8011      	strh	r1, [r2, #0]
	@RESET TO POSITION 160 IN X
	MOV R1, #160
 8001814:	f04f 01a0 	mov.w	r1, #160	; 0xa0
	STRH R1,[R0]
 8001818:	8001      	strh	r1, [r0, #0]
	@GET THE Y POSITION
	LDR R0,=PONG_BYP
 800181a:	4811      	ldr	r0, [pc, #68]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R0]
 800181c:	7801      	ldrb	r1, [r0, #0]
	@STORE IT IN THE PERIVOUS Y POSITION
	LDR R2,=PONG_BPYP
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <PONG_MoveBallCAY+0x28>)
	STRB R1,[R2]
 8001820:	7011      	strb	r1, [r2, #0]
	@RESET TO POSITION 110 IN Y
	MOV R1,#110
 8001822:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 8001826:	7001      	strb	r1, [r0, #0]
	@END FUNCTION HERE
	B PONG_MoveBallCAY
 8001828:	e010      	b.n	800184c <PONG_MoveBallCAY>

0800182a <PONG_MoveBallLOSE>:
@LOSE LABEL
PONG_MoveBallLOSE:
	@DECREMENT THE SCORE BY 10
	BL PONG_DecrementScore
 800182a:	f000 f865 	bl	80018f8 <PONG_DecrementScore>
	@GET THE X POSITION
	LDR R0,=PONG_BXP
 800182e:	4809      	ldr	r0, [pc, #36]	; (8001854 <PONG_MoveBallCAY+0x8>)
	LDRH R1,[R0]
 8001830:	8801      	ldrh	r1, [r0, #0]
	@STORE IT IN THE PERIVOUS X POSITION
	LDR R2,=PONG_BPXP
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <PONG_MoveBallCAY+0x20>)
	STRH R1,[R2]
 8001834:	8011      	strh	r1, [r2, #0]
	@RESET TO POSITION 160 IN X
	MOV R1, #160
 8001836:	f04f 01a0 	mov.w	r1, #160	; 0xa0
	STRH R1,[R0]
 800183a:	8001      	strh	r1, [r0, #0]
	@GET THE Y POSITION
	LDR R0,=PONG_BYP
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <PONG_MoveBallCAY+0x14>)
	LDRB R1,[R0]
 800183e:	7801      	ldrb	r1, [r0, #0]
	@STORE IT IN THE PERIVOUS Y POSITION
	LDR R2,=PONG_BPYP
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <PONG_MoveBallCAY+0x28>)
	STRB R1,[R2]
 8001842:	7011      	strb	r1, [r2, #0]
	@RESET TO POSITION 110 IN Y
	MOV R1,#110
 8001844:	f04f 016e 	mov.w	r1, #110	; 0x6e
	STRB R1,[R0]
 8001848:	7001      	strb	r1, [r0, #0]
	@END FUNCTION HERE
	B PONG_MoveBallCAY
 800184a:	e7ff      	b.n	800184c <PONG_MoveBallCAY>

0800184c <PONG_MoveBallCAY>:
@CONTINUE AFTER Y LABEL
PONG_MoveBallCAY:
	POP {R0,R1,R2,PC}
 800184c:	bd07      	pop	{r0, r1, r2, pc}
 800184e:	0000      	.short	0x0000
	LDR R0,=PONG_BPM
 8001850:	200066c3 	.word	0x200066c3
	LDR R0,=PONG_BXP
 8001854:	200066bb 	.word	0x200066bb
	LDR R0,=PONG_BXD
 8001858:	200066c1 	.word	0x200066c1
	LDR R0,=PONG_OSP
 800185c:	200066b7 	.word	0x200066b7
	LDR R1,=PONG_BYP
 8001860:	200066bd 	.word	0x200066bd
	LDR R2,=PONG_EXPAND
 8001864:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_ESP
 8001868:	200066b9 	.word	0x200066b9
	LDR R2,=PONG_BPXP
 800186c:	200066be 	.word	0x200066be
	LDR R0,=PONG_BYD
 8001870:	200066c2 	.word	0x200066c2
	LDR R2,=PONG_BPYP
 8001874:	200066c0 	.word	0x200066c0

08001878 <PONG_IncrementScore>:
.ltorg
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@INCREMENT SCORE FUNCTION
@USES R2 AS THE VALUE TO INCREMENT
PONG_IncrementScore:
	PUSH {R0,R1,R2,LR}
 8001878:	b507      	push	{r0, r1, r2, lr}
	@CHECK WHETHER THE ADDITION TO THE SCORE = 1 OR 10
	CMP R2,#10
 800187a:	2a0a      	cmp	r2, #10
	BEQ PONG_IncrementScore10
 800187c:	d013      	beq.n	80018a6 <PONG_IncrementScore10>
	@IF NOT 10, ADD BY 1
	LDR R0,=PONG_POWERSCORE
 800187e:	f8df 0f18 	ldr.w	r0, [pc, #3864]	; 8002798 <ReadAndDisplay_GAMEOVER+0x3a>
	LDRB R1,[R0]
 8001882:	7801      	ldrb	r1, [r0, #0]
	ADD R1,R1,#1
 8001884:	f101 0101 	add.w	r1, r1, #1
	STRB R1,[R0]
 8001888:	7001      	strb	r1, [r0, #0]
	LDR R0,=PONG_SCORE
 800188a:	f8df 0f10 	ldr.w	r0, [pc, #3856]	; 800279c <ReadAndDisplay_GAMEOVER+0x3e>
	LDRB R1,[R0,#2]!
 800188e:	f810 1f02 	ldrb.w	r1, [r0, #2]!
	@CHECK FOR THE ONES
	CMP R1,#9
 8001892:	2909      	cmp	r1, #9
	@IF 9, THEN IT SHOULD BE 0 AND INCREMENT THE TENS
	BEQ PONG_IncrementScore10R
 8001894:	d003      	beq.n	800189e <PONG_IncrementScore10R>
	@IF NOT, THEN JUST ADD 1
	ADD R1,R1,#1
 8001896:	f101 0101 	add.w	r1, r1, #1
	STRB R1,[R0]
 800189a:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE FINISH
	B PONG_IncrementScoreEND
 800189c:	e029      	b.n	80018f2 <PONG_IncrementScoreEND>

0800189e <PONG_IncrementScore10R>:
@RESET THE ONES LABEL
PONG_IncrementScore10R:
	LDR R1,=0
 800189e:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80018a2:	7001      	strb	r1, [r0, #0]
	@THEN ADD THE TENS
	B PONG_IncrementScore10N
 80018a4:	e005      	b.n	80018b2 <PONG_IncrementScore10N>

080018a6 <PONG_IncrementScore10>:
@ADD THE TENS LABEL
PONG_IncrementScore10:
	LDR R0,=PONG_POWERSCORE
 80018a6:	f8df 0ef0 	ldr.w	r0, [pc, #3824]	; 8002798 <ReadAndDisplay_GAMEOVER+0x3a>
	LDRB R1,[R0]
 80018aa:	7801      	ldrb	r1, [r0, #0]
	ADD R1,R1,#10
 80018ac:	f101 010a 	add.w	r1, r1, #10
	STRB R1,[R0]
 80018b0:	7001      	strb	r1, [r0, #0]

080018b2 <PONG_IncrementScore10N>:
PONG_IncrementScore10N:
	@FASTEN THE BALL
	LDR R0,=PONG_BALLSPEED
 80018b2:	f8df 0eec 	ldr.w	r0, [pc, #3820]	; 80027a0 <ReadAndDisplay_GAMEOVER+0x42>
	@GET THE CURRENT SPEED
	LDR R2,[R0]
 80018b6:	6802      	ldr	r2, [r0, #0]
	@DECREMENT IT BY 20000 TICKS
	LDR R1,=20000
 80018b8:	f644 6120 	movw	r1, #20000	; 0x4e20
	SUB R2,R2,R1
 80018bc:	eba2 0201 	sub.w	r2, r2, r1
	STR R2,[R0]
 80018c0:	6002      	str	r2, [r0, #0]
	BL TIM2_START_IT
 80018c2:	f7fe fdaa 	bl	800041a <TIM2_START_IT>
	LDR R0,=PONG_SCORE
 80018c6:	f8df 0ed4 	ldr.w	r0, [pc, #3796]	; 800279c <ReadAndDisplay_GAMEOVER+0x3e>
	ADD R0,R0,#1
 80018ca:	f100 0001 	add.w	r0, r0, #1
	LDRB R1,[R0]
 80018ce:	7801      	ldrb	r1, [r0, #0]
	@CHECK FOR THE TENS
	CMP R1,#9
 80018d0:	2909      	cmp	r1, #9
	@IF 9, THEN IT SHOULD BE 0 AND INCREMENT THE HUNDREDS
	BEQ PONG_IncrementScore100R
 80018d2:	d003      	beq.n	80018dc <PONG_IncrementScore100R>
	@IF NOT, THEN JUST ADD 1
	ADD R1,R1,#1
 80018d4:	f101 0101 	add.w	r1, r1, #1
	STRB R1,[R0]
 80018d8:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE FINISH
	B PONG_IncrementScoreEND
 80018da:	e00a      	b.n	80018f2 <PONG_IncrementScoreEND>

080018dc <PONG_IncrementScore100R>:
@RESET THE TENS LABEL
PONG_IncrementScore100R:
	LDR R1,=0
 80018dc:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 80018e0:	7001      	strb	r1, [r0, #0]
	@THEN ADD THE HUNDREDS
	B PONG_IncrementScore100
 80018e2:	e7ff      	b.n	80018e4 <PONG_IncrementScore100>

080018e4 <PONG_IncrementScore100>:
@ADD THE HUNDREDS LABEL
PONG_IncrementScore100:
	LDR R0,=PONG_SCORE
 80018e4:	f8df 0eb4 	ldr.w	r0, [pc, #3764]	; 800279c <ReadAndDisplay_GAMEOVER+0x3e>
	LDRB R1,[R0]
 80018e8:	7801      	ldrb	r1, [r0, #0]
	@ADD 1 TO THE HUNDREDS
	ADD R1,R1,#1
 80018ea:	f101 0101 	add.w	r1, r1, #1
	STRB R1,[R0]
 80018ee:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE FINISH
	B PONG_IncrementScoreEND
 80018f0:	e7ff      	b.n	80018f2 <PONG_IncrementScoreEND>

080018f2 <PONG_IncrementScoreEND>:
PONG_IncrementScoreEND:
	BL PONG_CheckPowerUp
 80018f2:	f000 f821 	bl	8001938 <PONG_CheckPowerUp>
	POP {R0,R1,R2,PC}
 80018f6:	bd07      	pop	{r0, r1, r2, pc}

080018f8 <PONG_DecrementScore>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@DECREMENTT SCORE FUNCTION
PONG_DecrementScore:
	PUSH {R0,R1,LR}
 80018f8:	b503      	push	{r0, r1, lr}
	@GET THE ADDRESS OF THE TENS
	LDR R0,=PONG_SCORE
 80018fa:	f8df 0ea0 	ldr.w	r0, [pc, #3744]	; 800279c <ReadAndDisplay_GAMEOVER+0x3e>
	ADD R0,R0,#1
 80018fe:	f100 0001 	add.w	r0, r0, #1
	LDRB R1,[R0]
 8001902:	7801      	ldrb	r1, [r0, #0]
	@IF 0, THEN WE SHALL DECREMENT FROM THE HUNDREDS
	CMP R1,#0
 8001904:	2900      	cmp	r1, #0
	BEQ PONG_DecrementScore100
 8001906:	d003      	beq.n	8001910 <PONG_DecrementScore100>
	@IF NOT, SIMPLY DECREMENT FROM THE TENS
	SUB R1,R1,#1
 8001908:	f1a1 0101 	sub.w	r1, r1, #1
	STRB R1,[R0]
 800190c:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE FINISH
	B PONG_DecrementScoreEND
 800190e:	e012      	b.n	8001936 <PONG_DecrementScoreEND>

08001910 <PONG_DecrementScore100>:
@DECREMENT 100 LABEL
PONG_DecrementScore100:
	@GET THE ADDRESS OF THE HUNDREDS
	SUB R0,R0,#1
 8001910:	f1a0 0001 	sub.w	r0, r0, #1
	LDRB R1,[R0]
 8001914:	7801      	ldrb	r1, [r0, #0]
	@IF = 0 AS WELL, THEN MAKE THE SCORE = 0
	CMP R1,#0
 8001916:	2900      	cmp	r1, #0
	BEQ PONG_DecrementScoreTerminate
 8001918:	d007      	beq.n	800192a <PONG_DecrementScoreTerminate>
	@IF NOT, DECREMENT FROM THE HUNDREDS
	SUB R1,R1,#1
 800191a:	f1a1 0101 	sub.w	r1, r1, #1
	STRB R1,[R0]
 800191e:	7001      	strb	r1, [r0, #0]
	@THEN PUT 9 IN THE TENS
	LDR R1,=9
 8001920:	f04f 0109 	mov.w	r1, #9
	STRB R1,[R0,#1]!
 8001924:	f800 1f01 	strb.w	r1, [r0, #1]!
	@JUMP TO THE FINISH
	B PONG_DecrementScoreEND
 8001928:	e005      	b.n	8001936 <PONG_DecrementScoreEND>

0800192a <PONG_DecrementScoreTerminate>:
@MAKE THE SCORE = 0
PONG_DecrementScoreTerminate:
	ADD R0,R0,#2
 800192a:	f100 0002 	add.w	r0, r0, #2
	LDR R1,=0
 800192e:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001932:	7001      	strb	r1, [r0, #0]
	@JUMP TO THE FINISH
	B PONG_DecrementScoreEND
 8001934:	e7ff      	b.n	8001936 <PONG_DecrementScoreEND>

08001936 <PONG_DecrementScoreEND>:
PONG_DecrementScoreEND:
	POP {R0,R1,PC}
 8001936:	bd03      	pop	{r0, r1, pc}

08001938 <PONG_CheckPowerUp>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@CHECK IF POWERUP IS AVAILABLE
PONG_CheckPowerUp:
	PUSH {R0,R1,LR}
 8001938:	b503      	push	{r0, r1, lr}
	@IF NOT EQUAL 5, DO NOT GIVE ANY POWER
	LDR R0,=PONG_POWERSCORE
 800193a:	f8df 0e5c 	ldr.w	r0, [pc, #3676]	; 8002798 <ReadAndDisplay_GAMEOVER+0x3a>
	LDRB R1,[R0]
 800193e:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#5
 8001940:	2905      	cmp	r1, #5
	BNE PONG_CheckPowerEND
 8001942:	d11a      	bne.n	800197a <PONG_CheckPowerEND>
	@IF 25, RESET AND GIVE POWER UP
	LDR R1,=0
 8001944:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001948:	7001      	strb	r1, [r0, #0]
	@IF NO POWERUP WAS GIVEN BEFORE, GIVE FREEZE
	LDR R0,=PONG_POWER
 800194a:	f8df 0e58 	ldr.w	r0, [pc, #3672]	; 80027a4 <ReadAndDisplay_GAMEOVER+0x46>
	LDRB R1,[R0]
 800194e:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#0
 8001950:	2900      	cmp	r1, #0
	BEQ PONG_CheckPowerUpGiveFreeze
 8001952:	d00a      	beq.n	800196a <PONG_CheckPowerUpGiveFreeze>
	@IF LAST POWER WAS EXPAND, GIVE FREEZE
	CMP R1,#2
 8001954:	2902      	cmp	r1, #2
	BEQ PONG_CheckPowerUpGiveFreeze
 8001956:	d008      	beq.n	800196a <PONG_CheckPowerUpGiveFreeze>
	@STORE THE LAST PERVIOUS POWER (2 --> EXPAND)
	LDR R1,=2
 8001958:	f04f 0102 	mov.w	r1, #2
	STRB R1,[R0]
 800195c:	7001      	strb	r1, [r0, #0]
	@GIVE POWER UP EXPANSION
	LDR R0,=PONG_EXPAND
 800195e:	f8df 0e48 	ldr.w	r0, [pc, #3656]	; 80027a8 <ReadAndDisplay_GAMEOVER+0x4a>
	LDR R1,=4
 8001962:	f04f 0104 	mov.w	r1, #4
	STRB R1,[R0]
 8001966:	7001      	strb	r1, [r0, #0]
	B PONG_CheckPowerEND
 8001968:	e007      	b.n	800197a <PONG_CheckPowerEND>

0800196a <PONG_CheckPowerUpGiveFreeze>:
@GIVE FREEZE LABEL
PONG_CheckPowerUpGiveFreeze:
	@STORE THE LAST PERVIOUS POWER (1 --> FREEZE)
	LDR R1,=1
 800196a:	f04f 0101 	mov.w	r1, #1
	STRB R1,[R0]
 800196e:	7001      	strb	r1, [r0, #0]
	@GIVE POWER UP FREEZE
	LDR R0,=PONG_FREEZE
 8001970:	f8df 0e38 	ldr.w	r0, [pc, #3640]	; 80027ac <ReadAndDisplay_GAMEOVER+0x4e>
	LDR R1,=50
 8001974:	f04f 0132 	mov.w	r1, #50	; 0x32
	STRB R1,[R0]
 8001978:	7001      	strb	r1, [r0, #0]

0800197a <PONG_CheckPowerEND>:
@FUNCTION END LABEL
PONG_CheckPowerEND:
	POP {R0,R1,PC}
 800197a:	bd03      	pop	{r0, r1, pc}

0800197c <PACMAN_INIT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ PACMAN GAME @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@width 231, height 231, block 11*11,padding (bottom:5, top:4)
PACMAN_INIT:
	PUSH {R0-R12,LR}
 800197c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LDR R10,=BLACK
 8001980:	f04f 0a00 	mov.w	sl, #0
	LDR R0,=0
 8001984:	f04f 0000 	mov.w	r0, #0
	LDR R1,=320
 8001988:	f44f 71a0 	mov.w	r1, #320	; 0x140
	LDR R3,=0
 800198c:	f04f 0300 	mov.w	r3, #0
	LDR R4,=240
 8001990:	f04f 04f0 	mov.w	r4, #240	; 0xf0
	BL TFT_DRAW_RECTANGLE
 8001994:	f7fe fe26 	bl	80005e4 <TFT_DRAW_RECTANGLE>

@ Draw the pacman map

	LDR r5,=PacmanByteMapping
 8001998:	f8df 5e14 	ldr.w	r5, [pc, #3604]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
   	LDR r0,=1
 800199c:	f04f 0001 	mov.w	r0, #1
	LDR r1,=12
 80019a0:	f04f 010c 	mov.w	r1, #12
	LDR r3,=5
 80019a4:	f04f 0305 	mov.w	r3, #5
	LDR r4,=16
 80019a8:	f04f 0410 	mov.w	r4, #16

080019ac <ReadAndDisplay>:
ReadAndDisplay:
	LDRB r6,[r5]
 80019ac:	782e      	ldrb	r6, [r5, #0]

	BL SELECT_BLOCK
 80019ae:	f000 f858 	bl	8001a62 <SELECT_BLOCK>

	ADD r5,r5,#1
 80019b2:	f105 0501 	add.w	r5, r5, #1
	ADD r0,r0,#11
 80019b6:	f100 000b 	add.w	r0, r0, #11
	ADD r1,r1,#11
 80019ba:	f101 010b 	add.w	r1, r1, #11
	CMP r0,#232
 80019be:	28e8      	cmp	r0, #232	; 0xe8
	BNE ReadAndDisplay
 80019c0:	d1f4      	bne.n	80019ac <ReadAndDisplay>
	LDR r0,=1
 80019c2:	f04f 0001 	mov.w	r0, #1
	LDR r1,=12
 80019c6:	f04f 010c 	mov.w	r1, #12
	ADD r3,r3,#11
 80019ca:	f103 030b 	add.w	r3, r3, #11
	ADD r4,r4,#11
 80019ce:	f104 040b 	add.w	r4, r4, #11
	CMP r3,#236
 80019d2:	2bec      	cmp	r3, #236	; 0xec
	BNE ReadAndDisplay
 80019d4:	d1ea      	bne.n	80019ac <ReadAndDisplay>

	LDR r0,=PacmanInitialX
 80019d6:	f04f 006f 	mov.w	r0, #111	; 0x6f
	LDR r3,=PacmanInitialY
 80019da:	f04f 03aa 	mov.w	r3, #170	; 0xaa
	BL PACMAN_DrawPacman @Draw pacman
 80019de:	f000 f88e 	bl	8001afe <PACMAN_DrawPacman>

	LDR r0,=GhostInitialX
 80019e2:	f04f 006f 	mov.w	r0, #111	; 0x6f
	ADD r1,r0,#11
 80019e6:	f100 010b 	add.w	r1, r0, #11
	LDR r3,=GhostInitialY
 80019ea:	f04f 0368 	mov.w	r3, #104	; 0x68
	ADD r4,r3,#11
 80019ee:	f103 040b 	add.w	r4, r3, #11
	BL PACMAN_DrawGhost @Draw Ghost
 80019f2:	f000 f892 	bl	8001b1a <PACMAN_DrawGhost>

@ Draw score

	BL DISPLAY_SCORE_PACMAN
 80019f6:	f000 fa6e 	bl	8001ed6 <DISPLAY_SCORE_PACMAN>

@ Draw lives

	BL PACMAN_DRAW_LIVES
 80019fa:	f000 f802 	bl	8001a02 <PACMAN_DRAW_LIVES>

	POP {R0-R12,PC}
 80019fe:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001a02 <PACMAN_DRAW_LIVES>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Draw Lives @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_DRAW_LIVES:
	PUSH {R0-R12,LR}
 8001a02:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	LDR R0,=300
 8001a06:	f44f 7096 	mov.w	r0, #300	; 0x12c
	LDR R1,=320
 8001a0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
	LDR R3,=120
 8001a0e:	f04f 0378 	mov.w	r3, #120	; 0x78
	LDR R4,=180
 8001a12:	f04f 04b4 	mov.w	r4, #180	; 0xb4
	LDR R10,=BLACK
 8001a16:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 8001a1a:	f7fe fde3 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	LDR r10,=YELLOW
 8001a1e:	f64f 7ae0 	movw	sl, #65504	; 0xffe0
	LDR r7,=7
 8001a22:	f04f 0707 	mov.w	r7, #7
	LDR R5,=LivesX
 8001a26:	f44f 759b 	mov.w	r5, #310	; 0x136
	LDR r6,=LivesY
 8001a2a:	f04f 06aa 	mov.w	r6, #170	; 0xaa

	LDR R0,=lives
 8001a2e:	f8df 0d84 	ldr.w	r0, [pc, #3460]	; 80027b4 <ReadAndDisplay_GAMEOVER+0x56>
	LDRB R1,[R0]
 8001a32:	7801      	ldrb	r1, [r0, #0]

08001a34 <lives_DRAW_LOOP>:


lives_DRAW_LOOP:
	CMP R1,#0
 8001a34:	2900      	cmp	r1, #0
	BEQ	END_Lives_DRAW_LOOP
 8001a36:	d006      	beq.n	8001a46 <END_Lives_DRAW_LOOP>
	BL TFT_DRAW_CIRCLE
 8001a38:	f7fe fdf4 	bl	8000624 <TFT_DRAW_CIRCLE>
	SUB R6,R6,#20
 8001a3c:	f1a6 0614 	sub.w	r6, r6, #20
	SUB R1,R1,#1
 8001a40:	f1a1 0101 	sub.w	r1, r1, #1
	B lives_DRAW_LOOP
 8001a44:	e7f6      	b.n	8001a34 <lives_DRAW_LOOP>

08001a46 <END_Lives_DRAW_LOOP>:


END_Lives_DRAW_LOOP:

	LDR R0,=0
 8001a46:	f04f 0000 	mov.w	r0, #0
	LDR R1,=1
 8001a4a:	f04f 0101 	mov.w	r1, #1
	LDR R3,=0
 8001a4e:	f04f 0300 	mov.w	r3, #0
	LDR R4,=1
 8001a52:	f04f 0401 	mov.w	r4, #1
	LDR R10,=BLACK
 8001a56:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 8001a5a:	f7fe fdc3 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	POP {R0-R12,PC}
 8001a5e:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001a62 <SELECT_BLOCK>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@Select which block to draw in the map
SELECT_BLOCK:
@GOTO Draw wall
	PUSH {R6,LR}
 8001a62:	b540      	push	{r6, lr}
	CMP r6,'#'
 8001a64:	2e23      	cmp	r6, #35	; 0x23
	BNE NotHash
 8001a66:	d102      	bne.n	8001a6e <NotHash>
	BL PACMAN_DrawWall
 8001a68:	f000 f811 	bl	8001a8e <PACMAN_DrawWall>
	B NotAny
 8001a6c:	e00e      	b.n	8001a8c <NotAny>

08001a6e <NotHash>:
NotHash:
@GOTO Draw empty space
	CMP r6,' '
 8001a6e:	2e20      	cmp	r6, #32
    BNE NotSpace
 8001a70:	d102      	bne.n	8001a78 <NotSpace>
	BL PACMAN_DrawEmpty
 8001a72:	f000 f818 	bl	8001aa6 <PACMAN_DrawEmpty>
	B NotAny
 8001a76:	e009      	b.n	8001a8c <NotAny>

08001a78 <NotSpace>:
NotSpace:
@GOTO Draw pellet
	CMP r6,'.'
 8001a78:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NotDot
 8001a7a:	d102      	bne.n	8001a82 <NotDot>
	BL PACMAN_DrawPellet
 8001a7c:	f000 f81f 	bl	8001abe <PACMAN_DrawPellet>
	B NotAny
 8001a80:	e004      	b.n	8001a8c <NotAny>

08001a82 <NotDot>:
NotDot:
@GOTO Draw power pellet
	CMP r6,'@'
 8001a82:	2e40      	cmp	r6, #64	; 0x40
	BNE NotAny
 8001a84:	d102      	bne.n	8001a8c <NotAny>
	BL PACMAN_DrawPowerPellet
 8001a86:	f000 f82a 	bl	8001ade <PACMAN_DrawPowerPellet>
	B NotAny
 8001a8a:	e7ff      	b.n	8001a8c <NotAny>

08001a8c <NotAny>:
NotAny:
@if symbol does not exist in array
	POP {R6,PC}
 8001a8c:	bd40      	pop	{r6, pc}

08001a8e <PACMAN_DrawWall>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_DrawWall:
@ Draw wall on screen
	PUSH {R0,R3,R10,LR}
 8001a8e:	e92d 4409 	stmdb	sp!, {r0, r3, sl, lr}
	LDR r10,=BLUE
 8001a92:	f04f 0a1f 	mov.w	sl, #31
	ADD r0,r0,#1
 8001a96:	f100 0001 	add.w	r0, r0, #1
	ADD r3,r3,#1
 8001a9a:	f103 0301 	add.w	r3, r3, #1
	BL TFT_DRAW_RECTANGLE
 8001a9e:	f7fe fda1 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0,R3,R10,PC}
 8001aa2:	e8bd 8409 	ldmia.w	sp!, {r0, r3, sl, pc}

08001aa6 <PACMAN_DrawEmpty>:
PACMAN_DrawEmpty:
@ Draw empty on screen
	PUSH {R0,R3,R10,LR}
 8001aa6:	e92d 4409 	stmdb	sp!, {r0, r3, sl, lr}
	LDR r10,=BLACK
 8001aaa:	f04f 0a00 	mov.w	sl, #0
	ADD r0,r0,#1
 8001aae:	f100 0001 	add.w	r0, r0, #1
	ADD r3,r3,#1
 8001ab2:	f103 0301 	add.w	r3, r3, #1
	BL TFT_DRAW_RECTANGLE
 8001ab6:	f7fe fd95 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0,R3,R10,PC}
 8001aba:	e8bd 8409 	ldmia.w	sp!, {r0, r3, sl, pc}

08001abe <PACMAN_DrawPellet>:
PACMAN_DrawPellet:
@ Draw pellet on screen
	PUSH {R0-R4,R10,LR}
 8001abe:	e92d 441f 	stmdb	sp!, {r0, r1, r2, r3, r4, sl, lr}
	LDR r10,=WHITE
 8001ac2:	f64f 7aff 	movw	sl, #65535	; 0xffff
   	ADD r0,r0,#5
 8001ac6:	f100 0005 	add.w	r0, r0, #5
	SUB r1,r1,#5
 8001aca:	f1a1 0105 	sub.w	r1, r1, #5
	ADD r3,r3,#5
 8001ace:	f103 0305 	add.w	r3, r3, #5
	SUB r4,r4,#5
 8001ad2:	f1a4 0405 	sub.w	r4, r4, #5
	BL TFT_DRAW_RECTANGLE
 8001ad6:	f7fe fd85 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0-R4,R10,PC}
 8001ada:	e8bd 841f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, sl, pc}

08001ade <PACMAN_DrawPowerPellet>:
PACMAN_DrawPowerPellet:
@ Draw power pellet on screen
	PUSH {R0-R4,R10,LR}
 8001ade:	e92d 441f 	stmdb	sp!, {r0, r1, r2, r3, r4, sl, lr}
	LDR r10,=WHITE
 8001ae2:	f64f 7aff 	movw	sl, #65535	; 0xffff
   	ADD r0,r0,#4
 8001ae6:	f100 0004 	add.w	r0, r0, #4
	SUB r1,r1,#4
 8001aea:	f1a1 0104 	sub.w	r1, r1, #4
	ADD r3,r3,#4
 8001aee:	f103 0304 	add.w	r3, r3, #4
	SUB r4,r4,#4
 8001af2:	f1a4 0404 	sub.w	r4, r4, #4
	BL TFT_DRAW_RECTANGLE
 8001af6:	f7fe fd75 	bl	80005e4 <TFT_DRAW_RECTANGLE>
	POP {R0-R4,R10,PC}
 8001afa:	e8bd 841f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, sl, pc}

08001afe <PACMAN_DrawPacman>:
PACMAN_DrawPacman:
@ Draw pacman on screen
	PUSH {R5-R7,R10,LR}
 8001afe:	e92d 44e0 	stmdb	sp!, {r5, r6, r7, sl, lr}
	LDR r10,=YELLOW
 8001b02:	f64f 7ae0 	movw	sl, #65504	; 0xffe0
	ADD r5,r0,#6
 8001b06:	f100 0506 	add.w	r5, r0, #6
	ADD r6,r3,#6
 8001b0a:	f103 0606 	add.w	r6, r3, #6
	LDR r7,=4
 8001b0e:	f04f 0704 	mov.w	r7, #4
	BL TFT_DRAW_CIRCLE
 8001b12:	f7fe fd87 	bl	8000624 <TFT_DRAW_CIRCLE>
	POP {R5-R7,R10,PC}
 8001b16:	e8bd 84e0 	ldmia.w	sp!, {r5, r6, r7, sl, pc}

08001b1a <PACMAN_DrawGhost>:
PACMAN_DrawGhost:
@ Draw ghost on screen
	PUSH {R0-R10,LR}
 8001b1a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	LDR R9,=frightened
 8001b1e:	f8df 9c98 	ldr.w	r9, [pc, #3224]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>
	LDRB R8,[R9]
 8001b22:	f899 8000 	ldrb.w	r8, [r9]
	CMP R8,#0
 8001b26:	f1b8 0f00 	cmp.w	r8, #0
	BNE PACMAN_GHOST_BLUE
 8001b2a:	d102      	bne.n	8001b32 <PACMAN_GHOST_BLUE>
	LDR r10,=RED
 8001b2c:	f44f 4a78 	mov.w	sl, #63488	; 0xf800
	B PACMAN_GHOST_RED
 8001b30:	e002      	b.n	8001b38 <PACMAN_GHOST_RED>

08001b32 <PACMAN_GHOST_BLUE>:
PACMAN_GHOST_BLUE:
	LDR R10,=CYAN
 8001b32:	f240 7aff 	movw	sl, #2047	; 0x7ff
	B PACMAN_GHOST_RED
 8001b36:	e7ff      	b.n	8001b38 <PACMAN_GHOST_RED>

08001b38 <PACMAN_GHOST_RED>:
PACMAN_GHOST_RED:
	ADD r5,r0,#6
 8001b38:	f100 0506 	add.w	r5, r0, #6
	ADD r6,r3,#6
 8001b3c:	f103 0606 	add.w	r6, r3, #6
	LDR r7,=4
 8001b40:	f04f 0704 	mov.w	r7, #4
	BL TFT_DRAW_CIRCLE
 8001b44:	f7fe fd6e 	bl	8000624 <TFT_DRAW_CIRCLE>
	ADD R0,R0,#2
 8001b48:	f100 0002 	add.w	r0, r0, #2
	SUB R1,R1,#1
 8001b4c:	f1a1 0101 	sub.w	r1, r1, #1
	ADD R3,R3,#2
 8001b50:	f103 0302 	add.w	r3, r3, #2
	SUB R4,R4,#5
 8001b54:	f1a4 0405 	sub.w	r4, r4, #5
	BL TFT_DRAW_RECTANGLE
 8001b58:	f7fe fd44 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	LDR R0,=0
 8001b5c:	f04f 0000 	mov.w	r0, #0
	LDR R1,=1
 8001b60:	f04f 0101 	mov.w	r1, #1
	LDR R3,=0
 8001b64:	f04f 0300 	mov.w	r3, #0
	LDR R4,=1
 8001b68:	f04f 0401 	mov.w	r4, #1
	LDR R10,=BLACK
 8001b6c:	f04f 0a00 	mov.w	sl, #0
	BL TFT_DRAW_RECTANGLE
 8001b70:	f7fe fd38 	bl	80005e4 <TFT_DRAW_RECTANGLE>

	POP {R0-R10,PC}
 8001b74:	e8bd 87ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

08001b78 <PACMAN_MOVE_RIGHT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@ MOVE PACMAN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_RIGHT:

	PUSH {R0-R11,LR}
 8001b78:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LDR R5,=PacmanByteMapping	@load array start
 8001b7c:	f8df 5c30 	ldr.w	r5, [pc, #3120]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Pacmanloction		@load pacman location in array
 8001b80:	f8df 8c38 	ldr.w	r8, [pc, #3128]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDR R11,=pellets_count
 8001b84:	f8df bc38 	ldr.w	fp, [pc, #3128]	; 80027c0 <ReadAndDisplay_GAMEOVER+0x62>

	LDRH R1,[R8]
 8001b88:	f8b8 1000 	ldrh.w	r1, [r8]
	ADD R1,R1,#1				@See what is the block to the right to pacman
 8001b8c:	f101 0101 	add.w	r1, r1, #1
	ADD R5,R5,R1
 8001b90:	440d      	add	r5, r1

	LDRB R6,[R5]
 8001b92:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 8001b94:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_R_SKIP				@See if wall
 8001b96:	d037      	beq.n	8001c08 <M_R_SKIP>

	CMP R6,'.'
 8001b98:	2e2e      	cmp	r6, #46	; 0x2e
	BNE POWER_PELLET_MR
 8001b9a:	d10e      	bne.n	8001bba <POWER_PELLET_MR>
	BL INCREASE_SCORE_PM		@See if pellet
 8001b9c:	f000 f9c8 	bl	8001f30 <INCREASE_SCORE_PM>
	LDRB R10,[R11]
 8001ba0:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001ba4:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001ba8:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001bac:	f1ba 0f00 	cmp.w	sl, #0
	BNE POWER_PELLET_MR
 8001bb0:	d103      	bne.n	8001bba <POWER_PELLET_MR>
	BL PACMAN_LEVEL_2_INIT
 8001bb2:	f000 fd5d 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001bb6:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bba <POWER_PELLET_MR>:

POWER_PELLET_MR:
	CMP R6,'@'
 8001bba:	2e40      	cmp	r6, #64	; 0x40
	BNE M_R_NOSKIP
 8001bbc:	d11a      	bne.n	8001bf4 <M_R_NOSKIP>
	LDR R7,=Ghostlocation
 8001bbe:	f8df 7c04 	ldr.w	r7, [pc, #3076]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R9,=0
 8001bc2:	f04f 0900 	mov.w	r9, #0
	STRH R9,[R7,#6]
 8001bc6:	f8a7 9006 	strh.w	r9, [r7, #6]
	LDR R7,=frightened
 8001bca:	f8df 7bec 	ldr.w	r7, [pc, #3052]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>
	LDR R9,=1
 8001bce:	f04f 0901 	mov.w	r9, #1
	STRB R9,[R7]
 8001bd2:	f887 9000 	strb.w	r9, [r7]
	BL INCREASE_SCORE_PM_10		@See if power pellet
 8001bd6:	f000 f9b9 	bl	8001f4c <INCREASE_SCORE_PM_10>
	LDRB R10,[R11]
 8001bda:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001bde:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001be2:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001be6:	f1ba 0f00 	cmp.w	sl, #0
	BNE M_R_NOSKIP
 8001bea:	d103      	bne.n	8001bf4 <M_R_NOSKIP>
	BL PACMAN_LEVEL_2_INIT
 8001bec:	f000 fd40 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001bf0:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bf4 <M_R_NOSKIP>:

M_R_NOSKIP:
	STRH R1,[R8]
 8001bf4:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=1					@Set direction flag to right
 8001bf8:	f04f 0101 	mov.w	r1, #1
	STRH R1,[R8,#6]
 8001bfc:	f8a8 1006 	strh.w	r1, [r8, #6]
	LDR R1,=32
 8001c00:	f04f 0120 	mov.w	r1, #32
	STRB R1,[R5]				@ Place empty space in array
 8001c04:	7029      	strb	r1, [r5, #0]

	B M_R_SKIP
 8001c06:	e7ff      	b.n	8001c08 <M_R_SKIP>

08001c08 <M_R_SKIP>:

M_R_SKIP:

	POP {R0-R11,PC}
 8001c08:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c0c <PACMAN_MOVE_RIGHT_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_RIGHT_DRAW:

	PUSH {R0-R5,LR}
 8001c0c:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R5,=Pacmanloction
 8001c0e:	f8df 5bac 	ldr.w	r5, [pc, #2988]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>

	ADD R5,R5,#2
 8001c12:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5]
 8001c16:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 8001c18:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5]
 8001c1c:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11
 8001c1e:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8001c22:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 8001c26:	f7ff ff3e 	bl	8001aa6 <PACMAN_DrawEmpty>

	ADD R0,R0,#11
 8001c2a:	f100 000b 	add.w	r0, r0, #11
	ADD R1,R1,#11
 8001c2e:	f101 010b 	add.w	r1, r1, #11

	BL PACMAN_DrawPacman
 8001c32:	f7ff ff64 	bl	8001afe <PACMAN_DrawPacman>

	STRH R3,[R5]
 8001c36:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 8001c38:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5]
 8001c3c:	8028      	strh	r0, [r5, #0]

	POP {R0-R5,PC}
 8001c3e:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001c40 <PACMAN_MOVE_LEFT>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_LEFT:

	PUSH {R0-R11,LR}
 8001c40:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LDR R5,=PacmanByteMapping
 8001c44:	f8df 5b68 	ldr.w	r5, [pc, #2920]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Pacmanloction
 8001c48:	f8df 8b70 	ldr.w	r8, [pc, #2928]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDR R11,=pellets_count
 8001c4c:	f8df bb70 	ldr.w	fp, [pc, #2928]	; 80027c0 <ReadAndDisplay_GAMEOVER+0x62>

	LDRH R1,[R8]
 8001c50:	f8b8 1000 	ldrh.w	r1, [r8]
	SUB R1,R1,#1
 8001c54:	f1a1 0101 	sub.w	r1, r1, #1
	ADD R5,R5,R1
 8001c58:	440d      	add	r5, r1

	LDRB R6,[R5]
 8001c5a:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 8001c5c:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_L_SKIP
 8001c5e:	d037      	beq.n	8001cd0 <M_L_SKIP>

	CMP R6,'.'
 8001c60:	2e2e      	cmp	r6, #46	; 0x2e
	BNE POWER_PELLET_ML
 8001c62:	d10e      	bne.n	8001c82 <POWER_PELLET_ML>
	BL INCREASE_SCORE_PM
 8001c64:	f000 f964 	bl	8001f30 <INCREASE_SCORE_PM>
	LDRB R10,[R11]
 8001c68:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001c6c:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001c70:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001c74:	f1ba 0f00 	cmp.w	sl, #0
	BNE POWER_PELLET_ML
 8001c78:	d103      	bne.n	8001c82 <POWER_PELLET_ML>
	BL PACMAN_LEVEL_2_INIT
 8001c7a:	f000 fcf9 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001c7e:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c82 <POWER_PELLET_ML>:

POWER_PELLET_ML:
	CMP R6,'@'
 8001c82:	2e40      	cmp	r6, #64	; 0x40
	BNE M_L_NOSKIP
 8001c84:	d11a      	bne.n	8001cbc <M_L_NOSKIP>
	LDR R7,=Ghostlocation
 8001c86:	f8df 7b3c 	ldr.w	r7, [pc, #2876]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R9,=0
 8001c8a:	f04f 0900 	mov.w	r9, #0
	STRH R9,[R7,#6]
 8001c8e:	f8a7 9006 	strh.w	r9, [r7, #6]
	BL INCREASE_SCORE_PM_10
 8001c92:	f000 f95b 	bl	8001f4c <INCREASE_SCORE_PM_10>
	LDR R7,=frightened
 8001c96:	f8df 7b20 	ldr.w	r7, [pc, #2848]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>
	LDR R9,=1
 8001c9a:	f04f 0901 	mov.w	r9, #1
	STRB R9,[R7]
 8001c9e:	f887 9000 	strb.w	r9, [r7]
	LDRB R10,[R11]
 8001ca2:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001ca6:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001caa:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001cae:	f1ba 0f00 	cmp.w	sl, #0
	BNE M_L_NOSKIP
 8001cb2:	d103      	bne.n	8001cbc <M_L_NOSKIP>
	BL PACMAN_LEVEL_2_INIT
 8001cb4:	f000 fcdc 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001cb8:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cbc <M_L_NOSKIP>:

M_L_NOSKIP:
	STRH R1,[R8]
 8001cbc:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=2
 8001cc0:	f04f 0102 	mov.w	r1, #2
	STRH R1,[R8,#6]
 8001cc4:	f8a8 1006 	strh.w	r1, [r8, #6]
	LDR R1,=32
 8001cc8:	f04f 0120 	mov.w	r1, #32
	STRB R1,[R5]
 8001ccc:	7029      	strb	r1, [r5, #0]

	B M_L_SKIP
 8001cce:	e7ff      	b.n	8001cd0 <M_L_SKIP>

08001cd0 <M_L_SKIP>:

M_L_SKIP:

	POP {R0-R11,PC}
 8001cd0:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cd4 <PACMAN_MOVE_LEFT_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_LEFT_DRAW:

	PUSH {R0-R5,LR}
 8001cd4:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R5,=Pacmanloction
 8001cd6:	f8df 5ae4 	ldr.w	r5, [pc, #2788]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>

	ADD R5,R5,#2
 8001cda:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5]
 8001cde:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 8001ce0:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5]
 8001ce4:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11
 8001ce6:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8001cea:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 8001cee:	f7ff feda 	bl	8001aa6 <PACMAN_DrawEmpty>

	SUB R0,R0,#11
 8001cf2:	f1a0 000b 	sub.w	r0, r0, #11
	SUB R1,R1,#11
 8001cf6:	f1a1 010b 	sub.w	r1, r1, #11

	BL PACMAN_DrawPacman
 8001cfa:	f7ff ff00 	bl	8001afe <PACMAN_DrawPacman>

	STRH R3,[R5]
 8001cfe:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 8001d00:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5]
 8001d04:	8028      	strh	r0, [r5, #0]

	POP {R0-R5,PC}
 8001d06:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001d08 <PACMAN_MOVE_UP>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_UP:

	PUSH {R0-R11,LR}
 8001d08:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LDR R5,=PacmanByteMapping
 8001d0c:	f8df 5aa0 	ldr.w	r5, [pc, #2720]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Pacmanloction
 8001d10:	f8df 8aa8 	ldr.w	r8, [pc, #2728]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDR R11,=pellets_count
 8001d14:	f8df baa8 	ldr.w	fp, [pc, #2728]	; 80027c0 <ReadAndDisplay_GAMEOVER+0x62>

	LDRH R1,[R8]
 8001d18:	f8b8 1000 	ldrh.w	r1, [r8]
	ADD R1,R1,#21
 8001d1c:	f101 0115 	add.w	r1, r1, #21
	ADD R5,R5,R1
 8001d20:	440d      	add	r5, r1

	LDRB R6,[R5]
 8001d22:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 8001d24:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_U_SKIP
 8001d26:	d037      	beq.n	8001d98 <M_U_SKIP>

	CMP R6,'.'
 8001d28:	2e2e      	cmp	r6, #46	; 0x2e
	BNE POWER_PELLET_MU
 8001d2a:	d10e      	bne.n	8001d4a <POWER_PELLET_MU>
	BL INCREASE_SCORE_PM
 8001d2c:	f000 f900 	bl	8001f30 <INCREASE_SCORE_PM>
	LDRB R10,[R11]
 8001d30:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001d34:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001d38:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001d3c:	f1ba 0f00 	cmp.w	sl, #0
	BNE POWER_PELLET_MU
 8001d40:	d103      	bne.n	8001d4a <POWER_PELLET_MU>
	BL PACMAN_LEVEL_2_INIT
 8001d42:	f000 fc95 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001d46:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d4a <POWER_PELLET_MU>:

POWER_PELLET_MU:
	CMP R6,'@'
 8001d4a:	2e40      	cmp	r6, #64	; 0x40
	BNE M_U_NOSKIP
 8001d4c:	d11a      	bne.n	8001d84 <M_U_NOSKIP>
	LDR R7,=Ghostlocation
 8001d4e:	f8df 7a74 	ldr.w	r7, [pc, #2676]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R9,=0
 8001d52:	f04f 0900 	mov.w	r9, #0
	STRH R9,[R7,#6]
 8001d56:	f8a7 9006 	strh.w	r9, [r7, #6]
	BL INCREASE_SCORE_PM_10
 8001d5a:	f000 f8f7 	bl	8001f4c <INCREASE_SCORE_PM_10>
	LDR R7,=frightened
 8001d5e:	f8df 7a58 	ldr.w	r7, [pc, #2648]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>
	LDR R9,=1
 8001d62:	f04f 0901 	mov.w	r9, #1
	STRB R9,[R7]
 8001d66:	f887 9000 	strb.w	r9, [r7]
	LDRB R10,[R11]
 8001d6a:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001d6e:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001d72:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001d76:	f1ba 0f00 	cmp.w	sl, #0
	BNE M_U_NOSKIP
 8001d7a:	d103      	bne.n	8001d84 <M_U_NOSKIP>
	BL PACMAN_LEVEL_2_INIT
 8001d7c:	f000 fc78 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001d80:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d84 <M_U_NOSKIP>:

M_U_NOSKIP:
	STRH R1,[R8]
 8001d84:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=3
 8001d88:	f04f 0103 	mov.w	r1, #3
	STRH R1,[R8,#6]
 8001d8c:	f8a8 1006 	strh.w	r1, [r8, #6]
	LDR R1,=32
 8001d90:	f04f 0120 	mov.w	r1, #32
	STRB R1,[R5]
 8001d94:	7029      	strb	r1, [r5, #0]

	B M_U_SKIP
 8001d96:	e7ff      	b.n	8001d98 <M_U_SKIP>

08001d98 <M_U_SKIP>:

M_U_SKIP:

	POP {R0-R11,PC}
 8001d98:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d9c <PACMAN_MOVE_UP_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_UP_DRAW:

	PUSH {R0-R5,LR}
 8001d9c:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R5,=Pacmanloction
 8001d9e:	f8df 5a1c 	ldr.w	r5, [pc, #2588]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>

	ADD R5,R5,#2
 8001da2:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5]
 8001da6:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 8001da8:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5]
 8001dac:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11
 8001dae:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8001db2:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 8001db6:	f7ff fe76 	bl	8001aa6 <PACMAN_DrawEmpty>

	ADD R3,R3,#11
 8001dba:	f103 030b 	add.w	r3, r3, #11
	ADD R4,R4,#11
 8001dbe:	f104 040b 	add.w	r4, r4, #11

	BL PACMAN_DrawPacman
 8001dc2:	f7ff fe9c 	bl	8001afe <PACMAN_DrawPacman>

	STRH R3,[R5]
 8001dc6:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 8001dc8:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5]
 8001dcc:	8028      	strh	r0, [r5, #0]

	POP {R0-R5,PC}
 8001dce:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001dd0 <PACMAN_MOVE_DOWN>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_DOWN:

	PUSH {R0-R11,LR}
 8001dd0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LDR R5,=PacmanByteMapping
 8001dd4:	f8df 59d8 	ldr.w	r5, [pc, #2520]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Pacmanloction
 8001dd8:	f8df 89e0 	ldr.w	r8, [pc, #2528]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDR R11,=pellets_count
 8001ddc:	f8df b9e0 	ldr.w	fp, [pc, #2528]	; 80027c0 <ReadAndDisplay_GAMEOVER+0x62>

	LDRH R1,[R8]
 8001de0:	f8b8 1000 	ldrh.w	r1, [r8]
	SUB R1,R1,#21
 8001de4:	f1a1 0115 	sub.w	r1, r1, #21
	ADD R5,R5,R1
 8001de8:	440d      	add	r5, r1

	LDRB R6,[R5]
 8001dea:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 8001dec:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_D_SKIP
 8001dee:	d037      	beq.n	8001e60 <M_D_SKIP>

	CMP R6,'.'
 8001df0:	2e2e      	cmp	r6, #46	; 0x2e
	BNE POWER_PELLET_MD
 8001df2:	d10e      	bne.n	8001e12 <POWER_PELLET_MD>
	BL INCREASE_SCORE_PM
 8001df4:	f000 f89c 	bl	8001f30 <INCREASE_SCORE_PM>
	LDRB R10,[R11]
 8001df8:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001dfc:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001e00:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001e04:	f1ba 0f00 	cmp.w	sl, #0
	BNE POWER_PELLET_MD
 8001e08:	d103      	bne.n	8001e12 <POWER_PELLET_MD>
	BL PACMAN_LEVEL_2_INIT
 8001e0a:	f000 fc31 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001e0e:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e12 <POWER_PELLET_MD>:

POWER_PELLET_MD:
	CMP R6,'@'
 8001e12:	2e40      	cmp	r6, #64	; 0x40
	BNE M_D_NOSKIP
 8001e14:	d11a      	bne.n	8001e4c <M_D_NOSKIP>
	LDR R7,=Ghostlocation
 8001e16:	f8df 79ac 	ldr.w	r7, [pc, #2476]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R9,=0
 8001e1a:	f04f 0900 	mov.w	r9, #0
	STRH R9,[R7,#6]
 8001e1e:	f8a7 9006 	strh.w	r9, [r7, #6]
	BL INCREASE_SCORE_PM_10
 8001e22:	f000 f893 	bl	8001f4c <INCREASE_SCORE_PM_10>
	LDR R7,=frightened
 8001e26:	f8df 7990 	ldr.w	r7, [pc, #2448]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>
	LDR R9,=1
 8001e2a:	f04f 0901 	mov.w	r9, #1
	STRB R9,[R7]
 8001e2e:	f887 9000 	strb.w	r9, [r7]
	LDRB R10,[R11]
 8001e32:	f89b a000 	ldrb.w	sl, [fp]
	SUB R10,R10,#1
 8001e36:	f1aa 0a01 	sub.w	sl, sl, #1
	STRB R10,[R11]
 8001e3a:	f88b a000 	strb.w	sl, [fp]
	CMP R10,#0
 8001e3e:	f1ba 0f00 	cmp.w	sl, #0
	BNE M_D_NOSKIP
 8001e42:	d103      	bne.n	8001e4c <M_D_NOSKIP>
	BL PACMAN_LEVEL_2_INIT
 8001e44:	f000 fc14 	bl	8002670 <PACMAN_LEVEL_2_INIT>
	POP {R0-R11,PC}
 8001e48:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e4c <M_D_NOSKIP>:

M_D_NOSKIP:
	STRH R1,[R8]
 8001e4c:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=4
 8001e50:	f04f 0104 	mov.w	r1, #4
	STRH R1,[R8,#6]
 8001e54:	f8a8 1006 	strh.w	r1, [r8, #6]
	LDR R1,=32
 8001e58:	f04f 0120 	mov.w	r1, #32
	STRB R1,[R5]
 8001e5c:	7029      	strb	r1, [r5, #0]

	B M_D_SKIP
 8001e5e:	e7ff      	b.n	8001e60 <M_D_SKIP>

08001e60 <M_D_SKIP>:

M_D_SKIP:

	POP {R0-R11,PC}
 8001e60:	e8bd 8fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e64 <PACMAN_MOVE_DOWN_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_DOWN_DRAW:

	PUSH {R0-R5,LR}
 8001e64:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R5,=Pacmanloction
 8001e66:	f8df 5954 	ldr.w	r5, [pc, #2388]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>

	ADD R5,R5,#2
 8001e6a:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5]
 8001e6e:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 8001e70:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5]
 8001e74:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11
 8001e76:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8001e7a:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 8001e7e:	f7ff fe12 	bl	8001aa6 <PACMAN_DrawEmpty>

	SUB R3,R3,#11
 8001e82:	f1a3 030b 	sub.w	r3, r3, #11
	SUB R4,R4,#11
 8001e86:	f1a4 040b 	sub.w	r4, r4, #11

	BL PACMAN_DrawPacman
 8001e8a:	f7ff fe38 	bl	8001afe <PACMAN_DrawPacman>

	STRH R3,[R5]
 8001e8e:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 8001e90:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5]
 8001e94:	8028      	strh	r0, [r5, #0]

	POP {R0-R5,PC}
 8001e96:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001e98 <PACMAN_MOVE_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_MOVE_DRAW:

	PUSH {R0-R12,LR}
 8001e98:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LDR R0,=Pacmanloction
 8001e9c:	f8df 091c 	ldr.w	r0, [pc, #2332]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDRH R1,[R0,#6]
 8001ea0:	88c1      	ldrh	r1, [r0, #6]
	CMP R1,#1			@Move right
 8001ea2:	2901      	cmp	r1, #1
	BEQ PCMRD
 8001ea4:	d006      	beq.n	8001eb4 <PCMRD>
	CMP R1,#2			@Move left
 8001ea6:	2902      	cmp	r1, #2
	BEQ PCMLD
 8001ea8:	d007      	beq.n	8001eba <PCMLD>
	CMP R1,#3			@Move up
 8001eaa:	2903      	cmp	r1, #3
	BEQ PCMUD
 8001eac:	d008      	beq.n	8001ec0 <PCMUD>
	CMP R1,#4			@Move down
 8001eae:	2904      	cmp	r1, #4
	BEQ PCMDD
 8001eb0:	d009      	beq.n	8001ec6 <PCMDD>
	B PMMDEND
 8001eb2:	e00b      	b.n	8001ecc <PMMDEND>

08001eb4 <PCMRD>:
PCMRD:
	BL PACMAN_MOVE_RIGHT_DRAW
 8001eb4:	f7ff feaa 	bl	8001c0c <PACMAN_MOVE_RIGHT_DRAW>
	B PMMDEND
 8001eb8:	e008      	b.n	8001ecc <PMMDEND>

08001eba <PCMLD>:
PCMLD:
	BL PACMAN_MOVE_LEFT_DRAW
 8001eba:	f7ff ff0b 	bl	8001cd4 <PACMAN_MOVE_LEFT_DRAW>
	B PMMDEND
 8001ebe:	e005      	b.n	8001ecc <PMMDEND>

08001ec0 <PCMUD>:
PCMUD:
	BL PACMAN_MOVE_UP_DRAW
 8001ec0:	f7ff ff6c 	bl	8001d9c <PACMAN_MOVE_UP_DRAW>
	B PMMDEND
 8001ec4:	e002      	b.n	8001ecc <PMMDEND>

08001ec6 <PCMDD>:
PCMDD:
	BL PACMAN_MOVE_DOWN_DRAW
 8001ec6:	f7ff ffcd 	bl	8001e64 <PACMAN_MOVE_DOWN_DRAW>
	B PMMDEND
 8001eca:	e7ff      	b.n	8001ecc <PMMDEND>

08001ecc <PMMDEND>:

PMMDEND:
	LDR R1,=0
 8001ecc:	f04f 0100 	mov.w	r1, #0
	STRH R1,[R0,#6]
 8001ed0:	80c1      	strh	r1, [r0, #6]
	POP {R0-R12,LR}
 8001ed2:	e8bd 5fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

08001ed6 <DISPLAY_SCORE_PACMAN>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Update Score @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
DISPLAY_SCORE_PACMAN:
@Draw Score of pacman
	PUSH {R0-R12,LR}
 8001ed6:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}


	@vertical dimensions of the scoreboard(Y)
	LDR R3,=220
 8001eda:	f04f 03dc 	mov.w	r3, #220	; 0xdc
	LDR R4,=239
 8001ede:	f04f 04ef 	mov.w	r4, #239	; 0xef
	LDR R10,=PINK
 8001ee2:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
	LDR R11,=BLACK
 8001ee6:	f04f 0b00 	mov.w	fp, #0
	@hundreds
	@horizontal dimensions of the hundreds digit in the scoreboard(X)
	LDR R0,=275
 8001eea:	f240 1013 	movw	r0, #275	; 0x113
	LDR R1,=284
 8001eee:	f44f 718e 	mov.w	r1, #284	; 0x11c
	BL TFT_SET_DRAWING_AREA
 8001ef2:	f7fe fb4d 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R0,=score
 8001ef6:	f8df 08d0 	ldr.w	r0, [pc, #2256]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>
	LDRB R1,[R0]
 8001efa:	7801      	ldrb	r1, [r0, #0]
	BL TFT_DISPLAY_DIGIT
 8001efc:	f7fe fc06 	bl	800070c <TFT_DISPLAY_DIGIT>
	@tens
	@horizontal dimensions of the tens digit in the scoreboard(X)
	LDR R0,=288
 8001f00:	f44f 7090 	mov.w	r0, #288	; 0x120
	LDR R1,=297
 8001f04:	f240 1129 	movw	r1, #297	; 0x129
	BL TFT_SET_DRAWING_AREA
 8001f08:	f7fe fb42 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R0,=score
 8001f0c:	f8df 08b8 	ldr.w	r0, [pc, #2232]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>
	LDRB R1,[R0,#1]
 8001f10:	7841      	ldrb	r1, [r0, #1]
	BL TFT_DISPLAY_DIGIT
 8001f12:	f7fe fbfb 	bl	800070c <TFT_DISPLAY_DIGIT>
	@units
	@horizontal dimensions of the ones digit in the scoreboard(X)
	LDR R0,=301
 8001f16:	f240 102d 	movw	r0, #301	; 0x12d
	LDR R1,=310
 8001f1a:	f44f 719b 	mov.w	r1, #310	; 0x136
	BL TFT_SET_DRAWING_AREA
 8001f1e:	f7fe fb37 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R0,=score
 8001f22:	f8df 08a4 	ldr.w	r0, [pc, #2212]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>
	LDRB R1,[R0,#2]
 8001f26:	7881      	ldrb	r1, [r0, #2]
	BL TFT_DISPLAY_DIGIT
 8001f28:	f7fe fbf0 	bl	800070c <TFT_DISPLAY_DIGIT>


	POP {R0-R12,PC}
 8001f2c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001f30 <INCREASE_SCORE_PM>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
INCREASE_SCORE_PM:
@ Increase score by 1
	PUSH {R0-R5,LR}
 8001f30:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R0,=score
 8001f32:	f8df 0894 	ldr.w	r0, [pc, #2196]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>

	LDRB R1,[R0,#2]
 8001f36:	7881      	ldrb	r1, [r0, #2]
	ADD R1,R1,#1
 8001f38:	f101 0101 	add.w	r1, r1, #1
	CMP R1,#10
 8001f3c:	290a      	cmp	r1, #10
	BEQ INCREASE_SCORE_PM_10_9
 8001f3e:	d001      	beq.n	8001f44 <INCREASE_SCORE_PM_10_9>
	STRB R1,[R0,#2]
 8001f40:	7081      	strb	r1, [r0, #2]
	POP {R0-R5,PC}
 8001f42:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001f44 <INCREASE_SCORE_PM_10_9>:

INCREASE_SCORE_PM_10_9:
@ Increase score by 10

	LDR R1,=0
 8001f44:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0,#2]
 8001f48:	7081      	strb	r1, [r0, #2]
	B INCREASE_SCORE_PM_10_9_1
 8001f4a:	e000      	b.n	8001f4e <INCREASE_SCORE_PM_10_9_1>

08001f4c <INCREASE_SCORE_PM_10>:
INCREASE_SCORE_PM_10:
	PUSH {R0-R5,LR}
 8001f4c:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

08001f4e <INCREASE_SCORE_PM_10_9_1>:
INCREASE_SCORE_PM_10_9_1:
	LDR R0,=score
 8001f4e:	f8df 0878 	ldr.w	r0, [pc, #2168]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>

	LDRB R1,[R0,#1]
 8001f52:	7841      	ldrb	r1, [r0, #1]
	ADD R1,R1,#1
 8001f54:	f101 0101 	add.w	r1, r1, #1
	CMP R1,#10
 8001f58:	290a      	cmp	r1, #10
	BEQ INCREASE_SCORE_PM_100_99
 8001f5a:	d001      	beq.n	8001f60 <INCREASE_SCORE_PM_100_99>
	STRB R1,[R0,#1]
 8001f5c:	7041      	strb	r1, [r0, #1]
	POP {R0-R5,PC}
 8001f5e:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001f60 <INCREASE_SCORE_PM_100_99>:

INCREASE_SCORE_PM_100_99:
@ Increase score by 100

	LDR R1,=0
 8001f60:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0,#1]
 8001f64:	7041      	strb	r1, [r0, #1]
	B INCREASE_SCORE_PM_100_99_1
 8001f66:	e000      	b.n	8001f6a <INCREASE_SCORE_PM_100_99_1>

08001f68 <INCREASE_SCORE_PM_100>:
INCREASE_SCORE_PM_100:
	PUSH {R0-R5,LR}
 8001f68:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

08001f6a <INCREASE_SCORE_PM_100_99_1>:
INCREASE_SCORE_PM_100_99_1:
	LDR R0,=score
 8001f6a:	f8df 085c 	ldr.w	r0, [pc, #2140]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>

	LDRB R1,[R0]
 8001f6e:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#9
 8001f70:	2909      	cmp	r1, #9
	BEQ ICREASE_DONE_PM
 8001f72:	d002      	beq.n	8001f7a <ICREASE_DONE_PM>
	ADD R1,R1,#1
 8001f74:	f101 0101 	add.w	r1, r1, #1
	STRB R1,[R0]
 8001f78:	7001      	strb	r1, [r0, #0]

08001f7a <ICREASE_DONE_PM>:
ICREASE_DONE_PM:
	POP {R0-R5,PC}
 8001f7a:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001f7c <DECREASE_SCORE_PM>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
DECREASE_SCORE_PM:
@ Decrease score by 10
	PUSH {R0-R5,LR}
 8001f7c:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R0,=score
 8001f7e:	f8df 0848 	ldr.w	r0, [pc, #2120]	; 80027c8 <ReadAndDisplay_GAMEOVER+0x6a>

	LDRB R1,[R0,#1]
 8001f82:	7841      	ldrb	r1, [r0, #1]
	CMP R1,#0
 8001f84:	2900      	cmp	r1, #0
	BEQ DEC_SCORE_PM_HUNDREDTH
 8001f86:	d003      	beq.n	8001f90 <DEC_SCORE_PM_HUNDREDTH>
	SUB R1,R1,#1
 8001f88:	f1a1 0101 	sub.w	r1, r1, #1
	STRB R1,[R0,#1]
 8001f8c:	7041      	strb	r1, [r0, #1]
	B DECREASE_DONE_PM
 8001f8e:	e00f      	b.n	8001fb0 <DECREASE_DONE_PM>

08001f90 <DEC_SCORE_PM_HUNDREDTH>:

DEC_SCORE_PM_HUNDREDTH:
	LDRB R1,[R0]
 8001f90:	7801      	ldrb	r1, [r0, #0]
	CMP R1,#0
 8001f92:	2900      	cmp	r1, #0
	BEQ SET_TO_ZERO_DEC
 8001f94:	d006      	beq.n	8001fa4 <SET_TO_ZERO_DEC>
	SUB R1,R1,#1
 8001f96:	f1a1 0101 	sub.w	r1, r1, #1
	STRB R1,[R0]
 8001f9a:	7001      	strb	r1, [r0, #0]
	LDR R2,=9
 8001f9c:	f04f 0209 	mov.w	r2, #9
	STRB R2,[R0,#1]
 8001fa0:	7042      	strb	r2, [r0, #1]
	B DECREASE_DONE_PM
 8001fa2:	e005      	b.n	8001fb0 <DECREASE_DONE_PM>

08001fa4 <SET_TO_ZERO_DEC>:

SET_TO_ZERO_DEC:
	LDR R1,=0
 8001fa4:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R0]
 8001fa8:	7001      	strb	r1, [r0, #0]
	STRB R1,[R0,#1]
 8001faa:	7041      	strb	r1, [r0, #1]
	STRB R1,[R0,#2]
 8001fac:	7081      	strb	r1, [r0, #2]
	B DECREASE_DONE_PM
 8001fae:	e7ff      	b.n	8001fb0 <DECREASE_DONE_PM>

08001fb0 <DECREASE_DONE_PM>:

DECREASE_DONE_PM:

	POP {R0-R5,PC}
 8001fb0:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08001fb2 <PACMAN_RESPAWN>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Update Score @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@ PACMAN RESPAWNS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_RESPAWN:
	PUSH {R0-R8,LR}
 8001fb2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R5,=PacmanByteMapping
 8001fb6:	f8df 57f8 	ldr.w	r5, [pc, #2040]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Pacmanloction
 8001fba:	f8df 8800 	ldr.w	r8, [pc, #2048]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>

	LDRH R0,[R8,#2]
 8001fbe:	f8b8 0002 	ldrh.w	r0, [r8, #2]
	LDRH R3,[R8,#4]
 8001fc2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	ADD R1,R0,#11
 8001fc6:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8001fca:	f103 040b 	add.w	r4, r3, #11
	BL PACMAN_DrawEmpty
 8001fce:	f7ff fd6a 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDR R7,=PacmanInitialArray
 8001fd2:	f240 1745 	movw	r7, #325	; 0x145
	STRH R7,[R8]
 8001fd6:	f8a8 7000 	strh.w	r7, [r8]
	LDR R7,=PacmanInitialX
 8001fda:	f04f 076f 	mov.w	r7, #111	; 0x6f
	STRH R7,[R8,#2]
 8001fde:	f8a8 7002 	strh.w	r7, [r8, #2]
	LDR R7,=PacmanInitialY
 8001fe2:	f04f 07aa 	mov.w	r7, #170	; 0xaa
	STRH R7,[R8,#4]
 8001fe6:	f8a8 7004 	strh.w	r7, [r8, #4]
	LDR R7,=0
 8001fea:	f04f 0700 	mov.w	r7, #0
	STRH R7,[R8,#6]					@Return pacman to initial position
 8001fee:	f8a8 7006 	strh.w	r7, [r8, #6]

	LDRH R0,[R8,#2]
 8001ff2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
	LDRH R3,[R8,#4]
 8001ff6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	BL PACMAN_DrawPacman
 8001ffa:	f7ff fd80 	bl	8001afe <PACMAN_DrawPacman>

	BL DECREASE_SCORE_PM			@Decrease Score by 10
 8001ffe:	f7ff ffbd 	bl	8001f7c <DECREASE_SCORE_PM>

	LDR R0,=lives
 8002002:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 80027b4 <ReadAndDisplay_GAMEOVER+0x56>
	LDRB R1,[R0]
 8002006:	7801      	ldrb	r1, [r0, #0]
	SUB R1,R1,#1					@Decrease lives by 1
 8002008:	f1a1 0101 	sub.w	r1, r1, #1
	STRB R1,[R0]
 800200c:	7001      	strb	r1, [r0, #0]


	BL PACMAN_DRAW_LIVES
 800200e:	f7ff fcf8 	bl	8001a02 <PACMAN_DRAW_LIVES>

	CMP R1,#0
 8002012:	2900      	cmp	r1, #0
	BNE PACMAN_CONTINUE_GAME
 8002014:	d102      	bne.n	800201c <PACMAN_CONTINUE_GAME>
	BL PACMAN_ENDGAME
 8002016:	f000 fb8b 	bl	8002730 <PACMAN_ENDGAME>
	B PACMAN_CONTINUE_GAME
 800201a:	e7ff      	b.n	800201c <PACMAN_CONTINUE_GAME>

0800201c <PACMAN_CONTINUE_GAME>:
PACMAN_CONTINUE_GAME:

	POP {R0-R8,PC}
 800201c:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08002020 <GHOST_RESPAWN>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
GHOST_RESPAWN:
	PUSH {R0-R8,LR}
 8002020:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R7,=PacmanByteMapping
 8002024:	f8df 7788 	ldr.w	r7, [pc, #1928]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Ghostlocation
 8002028:	f8df 8798 	ldr.w	r8, [pc, #1944]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R6,=delay_1_pacman
 800202c:	f8df 679c 	ldr.w	r6, [pc, #1948]	; 80027cc <ReadAndDisplay_GAMEOVER+0x6e>
	LDR R1,=4
 8002030:	f04f 0104 	mov.w	r1, #4
	STRB R1,[R6]
 8002034:	7031      	strb	r1, [r6, #0]

	LDRH R0,[R8,#2]
 8002036:	f8b8 0002 	ldrh.w	r0, [r8, #2]
	LDRH R3,[R8,#4]
 800203a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	ADD R1,R0,#11
 800203e:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8002042:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 8002046:	f7ff fd2e 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDRH R6,[R8]
 800204a:	f8b8 6000 	ldrh.w	r6, [r8]

	LDRB R6,[R7,R6]
 800204e:	5dbe      	ldrb	r6, [r7, r6]

	CMP R6,'.'
 8002050:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NO_PT_Respawn @IF PREV LOC HAD A PELLET DRAW PELLET
 8002052:	d102      	bne.n	800205a <NO_PT_Respawn>
	BL PACMAN_DrawPellet
 8002054:	f7ff fd33 	bl	8001abe <PACMAN_DrawPellet>
	B NO_P_PT_Respawn
 8002058:	e004      	b.n	8002064 <NO_P_PT_Respawn>

0800205a <NO_PT_Respawn>:


NO_PT_Respawn:
	CMP R6,'@'
 800205a:	2e40      	cmp	r6, #64	; 0x40
	BNE NO_P_PT_Respawn @IF PREV LOC HAD A P_PELLET DRAW P_PELLET
 800205c:	d102      	bne.n	8002064 <NO_P_PT_Respawn>
	BL PACMAN_DrawPowerPellet
 800205e:	f7ff fd3e 	bl	8001ade <PACMAN_DrawPowerPellet>
	B NO_P_PT_Respawn
 8002062:	e7ff      	b.n	8002064 <NO_P_PT_Respawn>

08002064 <NO_P_PT_Respawn>:


NO_P_PT_Respawn:

	LDR R7,=GhostInitialArray
 8002064:	f04f 07c7 	mov.w	r7, #199	; 0xc7
	STRH R7,[R8]
 8002068:	f8a8 7000 	strh.w	r7, [r8]
	LDR R7,=GhostInitialX
 800206c:	f04f 076f 	mov.w	r7, #111	; 0x6f
	STRH R7,[R8,#2]
 8002070:	f8a8 7002 	strh.w	r7, [r8, #2]
	LDR R7,=GhostInitialY
 8002074:	f04f 0768 	mov.w	r7, #104	; 0x68
	STRH R7,[R8,#4]
 8002078:	f8a8 7004 	strh.w	r7, [r8, #4]
	LDR R7,=0
 800207c:	f04f 0700 	mov.w	r7, #0
	STRH R7,[R8,#6]				@ Return Ghost to initial position
 8002080:	f8a8 7006 	strh.w	r7, [r8, #6]

	LDRH R0,[R8,#2]
 8002084:	f8b8 0002 	ldrh.w	r0, [r8, #2]
	LDRH R3,[R8,#4]
 8002088:	f8b8 3004 	ldrh.w	r3, [r8, #4]
	ADD R1,R0,#11
 800208c:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11
 8002090:	f103 040b 	add.w	r4, r3, #11
	BL PACMAN_DrawGhost
 8002094:	f7ff fd41 	bl	8001b1a <PACMAN_DrawGhost>


	LDR R6,=frightened
 8002098:	f8df 671c 	ldr.w	r6, [pc, #1820]	; 80027b8 <ReadAndDisplay_GAMEOVER+0x5a>

	LDRB R1,[R6]
 800209c:	7831      	ldrb	r1, [r6, #0]
	CMP R1,#0					@Check if ghost is frightened run
 800209e:	2900      	cmp	r1, #0
	LDR R1,=0
 80020a0:	f04f 0100 	mov.w	r1, #0
	STRB R1,[R6]
 80020a4:	7031      	strb	r1, [r6, #0]
	BEQ Ghost_Won
 80020a6:	d003      	beq.n	80020b0 <Ghost_Won>

	BL INCREASE_SCORE_PM_100	@ Increase score by 100
 80020a8:	f7ff ff5e 	bl	8001f68 <INCREASE_SCORE_PM_100>
	@###Remaining: Delay ###
	POP {R0-R8,PC}
 80020ac:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

080020b0 <Ghost_Won>:

Ghost_Won:
	BL PACMAN_RESPAWN
 80020b0:	f7ff ff7f 	bl	8001fb2 <PACMAN_RESPAWN>

	POP {R0-R8,PC}
 80020b4:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

080020b8 <PACMAN_GHOST_MOVE_RIGHT>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GHOSTS MOVE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_GHOST_MOVE_RIGHT:

	PUSH {R0-R8,LR}
 80020b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R5,=PacmanByteMapping
 80020bc:	f8df 56f0 	ldr.w	r5, [pc, #1776]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Ghostlocation
 80020c0:	f8df 8700 	ldr.w	r8, [pc, #1792]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R1,[R8]
 80020c4:	f8b8 1000 	ldrh.w	r1, [r8]
	ADD R1,R1,#1
 80020c8:	f101 0101 	add.w	r1, r1, #1
	ADD R5,R5,R1
 80020cc:	440d      	add	r5, r1

	LDRB R6,[R5]
 80020ce:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 80020d0:	2e23      	cmp	r6, #35	; 0x23
	BEQ G_M_R_SKIP
 80020d2:	d006      	beq.n	80020e2 <G_M_R_SKIP>

	STRH R1,[R8]
 80020d4:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=1
 80020d8:	f04f 0101 	mov.w	r1, #1
	STRH R1,[R8,#6]
 80020dc:	f8a8 1006 	strh.w	r1, [r8, #6]

	B G_M_R_SKIP
 80020e0:	e7ff      	b.n	80020e2 <G_M_R_SKIP>

080020e2 <G_M_R_SKIP>:

G_M_R_SKIP:

	POP {R0-R8,PC}
 80020e2:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

080020e6 <PACMAN_GHOST_MOVE_LEFT>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

PACMAN_GHOST_MOVE_LEFT:

	PUSH {R0-R8,LR}
 80020e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R5,=PacmanByteMapping
 80020ea:	f8df 56c4 	ldr.w	r5, [pc, #1732]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Ghostlocation
 80020ee:	f8df 86d4 	ldr.w	r8, [pc, #1748]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R1,[R8]
 80020f2:	f8b8 1000 	ldrh.w	r1, [r8]
	SUB R1,R1,#1
 80020f6:	f1a1 0101 	sub.w	r1, r1, #1
	ADD R5,R5,R1
 80020fa:	440d      	add	r5, r1

	LDRB R6,[R5]
 80020fc:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 80020fe:	2e23      	cmp	r6, #35	; 0x23
	BEQ G_M_L_SKIP
 8002100:	d006      	beq.n	8002110 <G_M_L_SKIP>

	STRH R1,[R8]
 8002102:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=2
 8002106:	f04f 0102 	mov.w	r1, #2
	STRH R1,[R8,#6]
 800210a:	f8a8 1006 	strh.w	r1, [r8, #6]

	B G_M_L_SKIP
 800210e:	e7ff      	b.n	8002110 <G_M_L_SKIP>

08002110 <G_M_L_SKIP>:

G_M_L_SKIP:

	POP {R0-R8,PC}
 8002110:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08002114 <PACMAN_GHOST_MOVE_RIGHT_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_GHOST_MOVE_RIGHT_DRAW:

	PUSH {R0-R7,LR}
 8002114:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

	LDR R6,=PacmanByteMapping
 8002116:	f8df 6698 	ldr.w	r6, [pc, #1688]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R5,=Ghostlocation
 800211a:	f8df 56a8 	ldr.w	r5, [pc, #1704]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R7,[R5]
 800211e:	882f      	ldrh	r7, [r5, #0]
	ADD R6,R6,R7 				@GHOST LOC
 8002120:	443e      	add	r6, r7
	SUB R6,R6,#1	 			@GHOST PREV LOC
 8002122:	f1a6 0601 	sub.w	r6, r6, #1


	ADD R5,R5,#2
 8002126:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5] 				@x begin
 800212a:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 800212c:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5] 				@y begin
 8002130:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11 				@x end
 8002132:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11 				@ y end
 8002136:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 800213a:	f7ff fcb4 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDRB R6,[R6]
 800213e:	7836      	ldrb	r6, [r6, #0]

	CMP R6,'.'
 8002140:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NO_PT_R 				@IF PREV LOC HAD A PELLET DRAW PELLET
 8002142:	d101      	bne.n	8002148 <NO_PT_R>
	BL PACMAN_DrawPellet
 8002144:	f7ff fcbb 	bl	8001abe <PACMAN_DrawPellet>

08002148 <NO_PT_R>:

NO_PT_R:
	CMP R6,'@'
 8002148:	2e40      	cmp	r6, #64	; 0x40
	BNE NO_P_PT_R 				@IF PREV LOC HAD A P_PELLET DRAW P_PELLET
 800214a:	d101      	bne.n	8002150 <NO_P_PT_R>
	BL PACMAN_DrawPowerPellet
 800214c:	f7ff fcc7 	bl	8001ade <PACMAN_DrawPowerPellet>

08002150 <NO_P_PT_R>:


NO_P_PT_R:
	ADD R0,R0,#11 				@X BEGIN +11
 8002150:	f100 000b 	add.w	r0, r0, #11
	ADD R1,R1,#11 				@X END +11
 8002154:	f101 010b 	add.w	r1, r1, #11

	BL PACMAN_DrawGhost
 8002158:	f7ff fcdf 	bl	8001b1a <PACMAN_DrawGhost>

	STRH R3,[R5] 				@store the intial y value of ghost loc
 800215c:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 800215e:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5] 				@store the intial x value of ghost loc
 8002162:	8028      	strh	r0, [r5, #0]

	POP {R0-R7,PC}
 8002164:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}

08002166 <PACMAN_GHOST_MOVE_LEFT_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_GHOST_MOVE_LEFT_DRAW:

	PUSH {R0-R7,LR}
 8002166:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

	LDR R6,=PacmanByteMapping
 8002168:	f8df 6644 	ldr.w	r6, [pc, #1604]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R5,=Ghostlocation
 800216c:	f8df 5654 	ldr.w	r5, [pc, #1620]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R7,[R5]
 8002170:	882f      	ldrh	r7, [r5, #0]
	ADD R6,R6,R7 @GHOST LOC
 8002172:	443e      	add	r6, r7
	ADD R6,R6,#1 @GHOST PREV LOC
 8002174:	f106 0601 	add.w	r6, r6, #1


	ADD R5,R5,#2
 8002178:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5] @x begin
 800217c:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 800217e:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5] @y begin
 8002182:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11 @x end
 8002184:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11 @ y end
 8002188:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 800218c:	f7ff fc8b 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDRB R6,[R6]
 8002190:	7836      	ldrb	r6, [r6, #0]

	CMP R6,'.'
 8002192:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NO_PT_L @IF PREV LOC HAD A PELLET DRAW PELLET
 8002194:	d101      	bne.n	800219a <NO_PT_L>
	BL PACMAN_DrawPellet
 8002196:	f7ff fc92 	bl	8001abe <PACMAN_DrawPellet>

0800219a <NO_PT_L>:

NO_PT_L:
	CMP R6,'@'
 800219a:	2e40      	cmp	r6, #64	; 0x40
	BNE NO_P_PT_L @IF PREV LOC HAD A P_PELLET DRAW P_PELLET
 800219c:	d101      	bne.n	80021a2 <NO_P_PT_L>
	BL PACMAN_DrawPowerPellet
 800219e:	f7ff fc9e 	bl	8001ade <PACMAN_DrawPowerPellet>

080021a2 <NO_P_PT_L>:


NO_P_PT_L:
	SUB R0,R0,#11 @X BEGIN -11
 80021a2:	f1a0 000b 	sub.w	r0, r0, #11
	SUB R1,R1,#11 @X END -11
 80021a6:	f1a1 010b 	sub.w	r1, r1, #11

	BL PACMAN_DrawGhost
 80021aa:	f7ff fcb6 	bl	8001b1a <PACMAN_DrawGhost>

	STRH R3,[R5] @store the intial y value of ghost loc
 80021ae:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 80021b0:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5] @store the intial x value of ghost loc
 80021b4:	8028      	strh	r0, [r5, #0]

	POP {R0-R7,PC}
 80021b6:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}

080021b8 <PACMAN_GHOST_MOVE_UP>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

PACMAN_GHOST_MOVE_UP:

	PUSH {R0-R8,LR}
 80021b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R5,=PacmanByteMapping
 80021bc:	f8df 55f0 	ldr.w	r5, [pc, #1520]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Ghostlocation
 80021c0:	f8df 8600 	ldr.w	r8, [pc, #1536]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R1,[R8]
 80021c4:	f8b8 1000 	ldrh.w	r1, [r8]
	ADD R1,R1,#21 @move ghost up
 80021c8:	f101 0115 	add.w	r1, r1, #21
	ADD R5,R5,R1 @MOVE "CURSOR" TO GHOST NEW LOCATION
 80021cc:	440d      	add	r5, r1

	LDRB R6,[R5]
 80021ce:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 80021d0:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_U_G_SKIP
 80021d2:	d006      	beq.n	80021e2 <M_U_G_SKIP>

	STRH R1,[R8] @STORE NEW GHOST LOCATION
 80021d4:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=3
 80021d8:	f04f 0103 	mov.w	r1, #3
	STRH R1,[R8,#6] @STORE MOVEMENT DIRECTION
 80021dc:	f8a8 1006 	strh.w	r1, [r8, #6]

	B M_U_G_SKIP
 80021e0:	e7ff      	b.n	80021e2 <M_U_G_SKIP>

080021e2 <M_U_G_SKIP>:

M_U_G_SKIP:

	POP {R0-R8,PC}
 80021e2:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

080021e6 <PACMAN_GHOST_MOVE_UP_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_GHOST_MOVE_UP_DRAW:

	PUSH {R0-R7,LR}
 80021e6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

	LDR R6,=PacmanByteMapping
 80021e8:	f8df 65c4 	ldr.w	r6, [pc, #1476]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R5,=Ghostlocation
 80021ec:	f8df 55d4 	ldr.w	r5, [pc, #1492]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R7,[R5]
 80021f0:	882f      	ldrh	r7, [r5, #0]
	ADD R6,R6,R7 @GHOST LOC
 80021f2:	443e      	add	r6, r7
	SUB R6,R6,#21 @GHOST PREV LOC
 80021f4:	f1a6 0615 	sub.w	r6, r6, #21


	ADD R5,R5,#2
 80021f8:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5] @x begin
 80021fc:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 80021fe:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5] @y begin
 8002202:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11 @x end
 8002204:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11 @ y end
 8002208:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 800220c:	f7ff fc4b 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDRB R6,[R6]
 8002210:	7836      	ldrb	r6, [r6, #0]

	CMP R6,'.'
 8002212:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NO_PT_U @IF PREV LOC HAD A PELLET DRAW PELLET
 8002214:	d101      	bne.n	800221a <NO_PT_U>
	BL PACMAN_DrawPellet
 8002216:	f7ff fc52 	bl	8001abe <PACMAN_DrawPellet>

0800221a <NO_PT_U>:


NO_PT_U:
	CMP R6,'@'
 800221a:	2e40      	cmp	r6, #64	; 0x40
	BNE NO_P_PT_U @IF PREV LOC HAD A P_PELLET DRAW P_PELLET
 800221c:	d101      	bne.n	8002222 <NO_P_PT_U>
	BL PACMAN_DrawPowerPellet
 800221e:	f7ff fc5e 	bl	8001ade <PACMAN_DrawPowerPellet>

08002222 <NO_P_PT_U>:


NO_P_PT_U:
	ADD R3,R3,#11 @Y BEGIN +11
 8002222:	f103 030b 	add.w	r3, r3, #11
	ADD R4,R4,#11 @Y END +11
 8002226:	f104 040b 	add.w	r4, r4, #11

	BL PACMAN_DrawGhost
 800222a:	f7ff fc76 	bl	8001b1a <PACMAN_DrawGhost>

	STRH R3,[R5] @store the intial y value of ghost loc
 800222e:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 8002230:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5] @store the intial x value of ghost loc
 8002234:	8028      	strh	r0, [r5, #0]

	POP {R0-R7,PC}
 8002236:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}

08002238 <PACMAN_GHOST_MOVE_DOWN>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

PACMAN_GHOST_MOVE_DOWN:

	PUSH {R0-R8,LR}
 8002238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	LDR R5,=PacmanByteMapping
 800223c:	f8df 5570 	ldr.w	r5, [pc, #1392]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R8,=Ghostlocation
 8002240:	f8df 8580 	ldr.w	r8, [pc, #1408]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R1,[R8]
 8002244:	f8b8 1000 	ldrh.w	r1, [r8]
	SUB R1,R1,#21 @move ghost DOWN
 8002248:	f1a1 0115 	sub.w	r1, r1, #21
	ADD R5,R5,R1 @MOVE "CURSOR" TO GHOST NEW LOCATION
 800224c:	440d      	add	r5, r1

	LDRB R6,[R5]
 800224e:	782e      	ldrb	r6, [r5, #0]
	CMP R6,'#'
 8002250:	2e23      	cmp	r6, #35	; 0x23
	BEQ M_D_G_SKIP
 8002252:	d006      	beq.n	8002262 <M_D_G_SKIP>

	STRH R1,[R8] @STORE NEW GHOST LOCATION
 8002254:	f8a8 1000 	strh.w	r1, [r8]
	LDR R1,=4
 8002258:	f04f 0104 	mov.w	r1, #4
	STRH R1,[R8,#6] @STORE MOVEMENT DIRECTION
 800225c:	f8a8 1006 	strh.w	r1, [r8, #6]

	B M_D_G_SKIP
 8002260:	e7ff      	b.n	8002262 <M_D_G_SKIP>

08002262 <M_D_G_SKIP>:

M_D_G_SKIP:

	POP {R0-R8,PC}
 8002262:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08002266 <PACMAN_GHOST_MOVE_DOWN_DRAW>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_GHOST_MOVE_DOWN_DRAW:

	PUSH {R0-R7,LR}
 8002266:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

	LDR R6,=PacmanByteMapping
 8002268:	f8df 6544 	ldr.w	r6, [pc, #1348]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R5,=Ghostlocation
 800226c:	f8df 5554 	ldr.w	r5, [pc, #1364]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	LDRH R7,[R5]
 8002270:	882f      	ldrh	r7, [r5, #0]
	ADD R6,R6,R7 @GHOST LOC
 8002272:	443e      	add	r6, r7
	ADD R6,R6,#21 @GHOST PREV LOC
 8002274:	f106 0615 	add.w	r6, r6, #21


	ADD R5,R5,#2
 8002278:	f105 0502 	add.w	r5, r5, #2
	LDRH R0,[R5] @x begin
 800227c:	8828      	ldrh	r0, [r5, #0]
	ADD R5,R5,#2
 800227e:	f105 0502 	add.w	r5, r5, #2
	LDRH R3,[R5] @y begin
 8002282:	882b      	ldrh	r3, [r5, #0]

	ADD R1,R0,#11 @x end
 8002284:	f100 010b 	add.w	r1, r0, #11
	ADD R4,R3,#11 @ y end
 8002288:	f103 040b 	add.w	r4, r3, #11

	BL PACMAN_DrawEmpty
 800228c:	f7ff fc0b 	bl	8001aa6 <PACMAN_DrawEmpty>

	LDRB R6,[R6]
 8002290:	7836      	ldrb	r6, [r6, #0]

	CMP R6,'.'
 8002292:	2e2e      	cmp	r6, #46	; 0x2e
	BNE NO_PT_D @IF PREV LOC HAD A PELLET DRAW PELLET
 8002294:	d101      	bne.n	800229a <NO_PT_D>
	BL PACMAN_DrawPellet
 8002296:	f7ff fc12 	bl	8001abe <PACMAN_DrawPellet>

0800229a <NO_PT_D>:


NO_PT_D:
	CMP R6,'@'
 800229a:	2e40      	cmp	r6, #64	; 0x40
	BNE NO_P_PT_D @IF PREV LOC HAD A P_PELLET DRAW P_PELLET
 800229c:	d101      	bne.n	80022a2 <NO_P_PT_D>
	BL PACMAN_DrawPowerPellet
 800229e:	f7ff fc1e 	bl	8001ade <PACMAN_DrawPowerPellet>

080022a2 <NO_P_PT_D>:


NO_P_PT_D:
	SUB R3,R3,#11 @Y BEGIN -11
 80022a2:	f1a3 030b 	sub.w	r3, r3, #11
	SUB R4,R4,#11 @Y END -11
 80022a6:	f1a4 040b 	sub.w	r4, r4, #11

	BL PACMAN_DrawGhost
 80022aa:	f7ff fc36 	bl	8001b1a <PACMAN_DrawGhost>

	STRH R3,[R5] @store the intial y value of ghost loc
 80022ae:	802b      	strh	r3, [r5, #0]
	SUB R5,R5,#2
 80022b0:	f1a5 0502 	sub.w	r5, r5, #2
	STRH R0,[R5] @store the intial x value of ghost loc
 80022b4:	8028      	strh	r0, [r5, #0]

	POP {R0-R7,PC}
 80022b6:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}

080022b8 <PACMAN_GHOST_CHASE>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GHOST CHASE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

PACMAN_GHOST_CHASE:
	PUSH {R0-R12,LR}
 80022b8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	LDR R0,=PacmanByteMapping
 80022bc:	f8df 04f0 	ldr.w	r0, [pc, #1264]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R3,=Ghostlocation
 80022c0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>
	LDR R1,=Pacmanloction
 80022c4:	f8df 14f4 	ldr.w	r1, [pc, #1268]	; 80027bc <ReadAndDisplay_GAMEOVER+0x5e>
	LDR R12,=0 		@R12 WILL CONTAIN THE NEW DIRECTION, IF IT STAYS 0 THEN IT DIDNT MOVE
 80022c8:	f04f 0c00 	mov.w	ip, #0
	LDR R11,=0		@R11 to stop infinite loop
 80022cc:	f04f 0b00 	mov.w	fp, #0

	ADD R1,R1,#2	@PACMAN X
 80022d0:	f101 0102 	add.w	r1, r1, #2
	ADD R2,R1,#2	@PACMAN Y
 80022d4:	f101 0202 	add.w	r2, r1, #2

	ADD R3,R3,#2	@GHOST X
 80022d8:	f103 0302 	add.w	r3, r3, #2
	ADD R4,R3,#2	@GHOST Y
 80022dc:	f103 0402 	add.w	r4, r3, #2

	LDRH R7,[R1] @BA2ASEM EL SUB 3SHAN EL COMPILER MAY3AYATSH
 80022e0:	880f      	ldrh	r7, [r1, #0]
	LDRH R8,[R3]
 80022e2:	f8b3 8000 	ldrh.w	r8, [r3]
	LDRH R9,[R2]
 80022e6:	f8b2 9000 	ldrh.w	r9, [r2]
	LDRH R10,[R4]
 80022ea:	f8b4 a000 	ldrh.w	sl, [r4]

	SUB R5,R7,R8 @ X DIFFERENCE FROM GHOST TO PACMAN
 80022ee:	eba7 0508 	sub.w	r5, r7, r8
	SUB R6,R9,R10 @ Y DIFFERENCE FROM GHOST TO PACMAN
 80022f2:	eba9 060a 	sub.w	r6, r9, sl

	CMP R5,#0
 80022f6:	2d00      	cmp	r5, #0
	BGT RIGHT_CHECK
 80022f8:	dc02      	bgt.n	8002300 <RIGHT_CHECK>
	BLT LEFT_CHECK
 80022fa:	db1a      	blt.n	8002332 <LEFT_CHECK>
	BEQ COMP_Y
 80022fc:	d032      	beq.n	8002364 <COMP_Y>
	B SKIP_CHASE
 80022fe:	e079      	b.n	80023f4 <SKIP_CHASE>

08002300 <RIGHT_CHECK>:

RIGHT_CHECK:

	LDR R0,=PacmanByteMapping
 8002300:	f8df 04ac 	ldr.w	r0, [pc, #1196]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R3,=Ghostlocation
 8002304:	f8df 34bc 	ldr.w	r3, [pc, #1212]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	@CHECK FOR WALL ON ITS RIGHT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 8002308:	881f      	ldrh	r7, [r3, #0]
	ADD R7,R7,#1 @ MOVE THE GHOST TO THE RIGHT
 800230a:	f107 0701 	add.w	r7, r7, #1
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 800230e:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 8002310:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 8002314:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ COMP_Y
 8002318:	d024      	beq.n	8002364 <COMP_Y>

	@CHECK FOR IF PREVIOUS DIRECTION IS LEFT
	ADD R3,R3,#6
 800231a:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 800231e:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#2
 8002322:	f1b8 0f02 	cmp.w	r8, #2
	BEQ COMP_Y
 8002326:	d01d      	beq.n	8002364 <COMP_Y>
	LDR R12,=1
 8002328:	f04f 0c01 	mov.w	ip, #1
	BL PACMAN_GHOST_MOVE_RIGHT
 800232c:	f7ff fec4 	bl	80020b8 <PACMAN_GHOST_MOVE_RIGHT>
	B SKIP_CHASE
 8002330:	e060      	b.n	80023f4 <SKIP_CHASE>

08002332 <LEFT_CHECK>:

LEFT_CHECK:

	LDR R0,=PacmanByteMapping
 8002332:	f8df 047c 	ldr.w	r0, [pc, #1148]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R3,=Ghostlocation
 8002336:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	@CHECK FOR WALL ON ITS LEFT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 800233a:	881f      	ldrh	r7, [r3, #0]
	SUB R7,R7,#1 @ MOVE THE GHOST TO THE LEFT
 800233c:	f1a7 0701 	sub.w	r7, r7, #1
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 8002340:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 8002342:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 8002346:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ COMP_Y
 800234a:	d00b      	beq.n	8002364 <COMP_Y>

	@CHECK FOR IF PREVIOUS DIRECTION IS RIGHT
	ADD R3,R3,#6
 800234c:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 8002350:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#1
 8002354:	f1b8 0f01 	cmp.w	r8, #1
	BEQ COMP_Y
 8002358:	d004      	beq.n	8002364 <COMP_Y>
	LDR R12,=2
 800235a:	f04f 0c02 	mov.w	ip, #2
	BL PACMAN_GHOST_MOVE_LEFT
 800235e:	f7ff fec2 	bl	80020e6 <PACMAN_GHOST_MOVE_LEFT>
	B SKIP_CHASE
 8002362:	e047      	b.n	80023f4 <SKIP_CHASE>

08002364 <COMP_Y>:


COMP_Y:
	CMP R6,#0
 8002364:	2e00      	cmp	r6, #0
	BGT UP_CHECK
 8002366:	dc00      	bgt.n	800236a <UP_CHECK>
	BLT DOWN_CHECK
 8002368:	db18      	blt.n	800239c <DOWN_CHECK>

0800236a <UP_CHECK>:

UP_CHECK:

	LDR R0,=PacmanByteMapping
 800236a:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R3,=Ghostlocation
 800236e:	f8df 3454 	ldr.w	r3, [pc, #1108]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	@CHECK FOR WALL OVER IT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 8002372:	881f      	ldrh	r7, [r3, #0]
	ADD R7,R7,#21 @ MOVE THE GHOST UP
 8002374:	f107 0715 	add.w	r7, r7, #21
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 8002378:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 800237a:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 800237e:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ NO_MOVE @MAWADETHASH NO MOVE 3SHAN MOMKEN T5OSH F INFINITE LOOP, LAZEM NO MOVE TEB2A F CHECK BTA3 DIREC WA7ED BS
 8002382:	d028      	beq.n	80023d6 <NO_MOVE>

	@CHECK FOR IF PREVIOUS DIRECTION IS DOWN
	ADD R3,R3,#6
 8002384:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 8002388:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#4
 800238c:	f1b8 0f04 	cmp.w	r8, #4
	BEQ NO_MOVE @MAWADETHASH NO MOVE 3SHAN MOMKEN T5OSH F INFINITE LOOP, LAZEM NO MOVE TEB2A F CHECK BTA3 DIREC WA7ED BS(A5ER WA7ED)
 8002390:	d021      	beq.n	80023d6 <NO_MOVE>
	LDR R12,=3
 8002392:	f04f 0c03 	mov.w	ip, #3
	BL PACMAN_GHOST_MOVE_UP
 8002396:	f7ff ff0f 	bl	80021b8 <PACMAN_GHOST_MOVE_UP>
	B SKIP_CHASE
 800239a:	e02b      	b.n	80023f4 <SKIP_CHASE>

0800239c <DOWN_CHECK>:

DOWN_CHECK:

	LDR R0,=PacmanByteMapping
 800239c:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80027b0 <ReadAndDisplay_GAMEOVER+0x52>
	LDR R3,=Ghostlocation
 80023a0:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 80027c4 <ReadAndDisplay_GAMEOVER+0x66>

	@CHECK FOR WALL BELOW IT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 80023a4:	881f      	ldrh	r7, [r3, #0]
	SUB R7,R7,#21 @ MOVE THE GHOST DOWN
 80023a6:	f1a7 0715 	sub.w	r7, r7, #21
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 80023aa:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 80023ac:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 80023b0:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ NO_MOVE
 80023b4:	d00f      	beq.n	80023d6 <NO_MOVE>

	@CHECK FOR IF PREVIOUS DIRECTION IS UP
	ADD R3,R3,#6
 80023b6:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 80023ba:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#3
 80023be:	f1b8 0f03 	cmp.w	r8, #3
	BEQ NO_MOVE
 80023c2:	d008      	beq.n	80023d6 <NO_MOVE>
	LDR R12,=4
 80023c4:	f04f 0c04 	mov.w	ip, #4
	BL PACMAN_GHOST_MOVE_DOWN
 80023c8:	f7ff ff36 	bl	8002238 <PACMAN_GHOST_MOVE_DOWN>
	B SKIP_CHASE
 80023cc:	e012      	b.n	80023f4 <SKIP_CHASE>

	CMP R12,#0
 80023ce:	f1bc 0f00 	cmp.w	ip, #0
	BEQ NO_MOVE
 80023d2:	d000      	beq.n	80023d6 <NO_MOVE>
	BNE SKIP_CHASE
 80023d4:	d10e      	bne.n	80023f4 <SKIP_CHASE>

080023d6 <NO_MOVE>:

NO_MOVE:
	ADD R11,R11,#1
 80023d6:	f10b 0b01 	add.w	fp, fp, #1
	CMP R11,#2
 80023da:	f1bb 0f02 	cmp.w	fp, #2
	BEQ LEFT_CHECK
 80023de:	d0a8      	beq.n	8002332 <LEFT_CHECK>
	CMP R11,#3
 80023e0:	f1bb 0f03 	cmp.w	fp, #3
	BEQ UP_CHECK
 80023e4:	d0c1      	beq.n	800236a <UP_CHECK>
	CMP R11,#4
 80023e6:	f1bb 0f04 	cmp.w	fp, #4
	BEQ NO_MOVE_1
 80023ea:	d000      	beq.n	80023ee <NO_MOVE_1>
	B RIGHT_CHECK
 80023ec:	e788      	b.n	8002300 <RIGHT_CHECK>

080023ee <NO_MOVE_1>:

NO_MOVE_1:
	LDR R11,=0
 80023ee:	f04f 0b00 	mov.w	fp, #0
	B DOWN_CHECK
 80023f2:	e7d3      	b.n	800239c <DOWN_CHECK>

080023f4 <SKIP_CHASE>:


SKIP_CHASE:

	LDR R3,=Ghostlocation
 80023f4:	4bf3      	ldr	r3, [pc, #972]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDR R1,=Pacmanloction
 80023f6:	49f1      	ldr	r1, [pc, #964]	; (80027bc <ReadAndDisplay_GAMEOVER+0x5e>)
	LDRH R7,[R1,#2]
 80023f8:	884f      	ldrh	r7, [r1, #2]
	LDRH R8,[R3,#2]
 80023fa:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	LDRH R9,[R1,#4]
 80023fe:	f8b1 9004 	ldrh.w	r9, [r1, #4]
	LDRH R10,[R3,#4]
 8002402:	f8b3 a004 	ldrh.w	sl, [r3, #4]

	CMP R7,R8
 8002406:	4547      	cmp	r7, r8
	BNE CHASE_END
 8002408:	d104      	bne.n	8002414 <CHASE_END>
	CMP R9,R10
 800240a:	45d1      	cmp	r9, sl
	BNE CHASE_END
 800240c:	d102      	bne.n	8002414 <CHASE_END>
	BL GHOST_RESPAWN
 800240e:	f7ff fe07 	bl	8002020 <GHOST_RESPAWN>
	B CHASE_END
 8002412:	e7ff      	b.n	8002414 <CHASE_END>

08002414 <CHASE_END>:
CHASE_END:

	POP {R0-R12,PC}
 8002414:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08002418 <PACMAN_GHOST_ESCAPE>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GHOST ESCAPE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


PACMAN_GHOST_ESCAPE:
	PUSH {R0-R12,LR}
 8002418:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

 	LDR R0,=PacmanByteMapping
 800241c:	48e4      	ldr	r0, [pc, #912]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR R3,=Ghostlocation
 800241e:	4be9      	ldr	r3, [pc, #932]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDR R1,=Pacmanloction
 8002420:	49e6      	ldr	r1, [pc, #920]	; (80027bc <ReadAndDisplay_GAMEOVER+0x5e>)
	LDR R12,=0 @R12 WILL CONTAIN THE NEW DIRECTION, IF IT STAYS 0 THEN IT DIDNT MOVE
 8002422:	f04f 0c00 	mov.w	ip, #0
	LDR R11,=0
 8002426:	f04f 0b00 	mov.w	fp, #0

	ADD R1,R1,#2 @PACMAN X
 800242a:	f101 0102 	add.w	r1, r1, #2
	ADD R2,R1,#2 @PACMAN Y
 800242e:	f101 0202 	add.w	r2, r1, #2

	ADD R3,R3,#2 @GHOST X
 8002432:	f103 0302 	add.w	r3, r3, #2
	ADD R4,R3,#2 @GHOST Y
 8002436:	f103 0402 	add.w	r4, r3, #2

	LDRH R7,[R1] @BA2ASEM EL SUB 3SHAN EL COMPILER MAY3AYATSH
 800243a:	880f      	ldrh	r7, [r1, #0]
	LDRH R8,[R3]
 800243c:	f8b3 8000 	ldrh.w	r8, [r3]
	LDRH R9,[R2]
 8002440:	f8b2 9000 	ldrh.w	r9, [r2]
	LDRH R10,[R4]
 8002444:	f8b4 a000 	ldrh.w	sl, [r4]

	SUB R5,R7,R8 @ X DIFFERENCE FROM GHOST TO PACMAN
 8002448:	eba7 0508 	sub.w	r5, r7, r8
	SUB R6,R9,R10 @ Y DIFFERENCE FROM GHOST TO PACMAN
 800244c:	eba9 060a 	sub.w	r6, r9, sl

	CMP R5,#0
 8002450:	2d00      	cmp	r5, #0
	BGT LEFT_CHECK_ESC
 8002452:	dc19      	bgt.n	8002488 <LEFT_CHECK_ESC>
	BLT RIGHT_CHECK_ESC
 8002454:	db01      	blt.n	800245a <RIGHT_CHECK_ESC>
	BEQ COMP_Y_ESC
 8002456:	d02e      	beq.n	80024b6 <COMP_Y_ESC>
	B SKIP_ESC
 8002458:	e071      	b.n	800253e <SKIP_ESC>

0800245a <RIGHT_CHECK_ESC>:

RIGHT_CHECK_ESC:

	LDR R0,=PacmanByteMapping
 800245a:	48d5      	ldr	r0, [pc, #852]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR R3,=Ghostlocation
 800245c:	4bd9      	ldr	r3, [pc, #868]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)

	@CHECK FOR WALL ON ITS RIGHT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 800245e:	881f      	ldrh	r7, [r3, #0]
	ADD R7,R7,#1 @ MOVE THE GHOST TO THE RIGHT
 8002460:	f107 0701 	add.w	r7, r7, #1
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 8002464:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 8002466:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 800246a:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ COMP_Y_ESC
 800246e:	d022      	beq.n	80024b6 <COMP_Y_ESC>

	@CHECK FOR IF PREVIOUS DIRECTION IS LEFT
	ADD R3,R3,#6
 8002470:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 8002474:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#2
 8002478:	f1b8 0f02 	cmp.w	r8, #2
	BEQ COMP_Y_ESC
 800247c:	d01b      	beq.n	80024b6 <COMP_Y_ESC>
	LDR R12,=1
 800247e:	f04f 0c01 	mov.w	ip, #1
	BL PACMAN_GHOST_MOVE_RIGHT
 8002482:	f7ff fe19 	bl	80020b8 <PACMAN_GHOST_MOVE_RIGHT>
	B SKIP_ESC
 8002486:	e05a      	b.n	800253e <SKIP_ESC>

08002488 <LEFT_CHECK_ESC>:

LEFT_CHECK_ESC:

	LDR R0,=PacmanByteMapping
 8002488:	48c9      	ldr	r0, [pc, #804]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR R3,=Ghostlocation
 800248a:	4bce      	ldr	r3, [pc, #824]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)

	@CHECK FOR WALL ON ITS LEFT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 800248c:	881f      	ldrh	r7, [r3, #0]
	SUB R7,R7,#1 @ MOVE THE GHOST TO THE LEFT
 800248e:	f1a7 0701 	sub.w	r7, r7, #1
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 8002492:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 8002494:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 8002498:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ COMP_Y_ESC
 800249c:	d00b      	beq.n	80024b6 <COMP_Y_ESC>

	@CHECK FOR IF PREVIOUS DIRECTION IS RIGHT
	ADD R3,R3,#6
 800249e:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 80024a2:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#1
 80024a6:	f1b8 0f01 	cmp.w	r8, #1
	BEQ COMP_Y_ESC
 80024aa:	d004      	beq.n	80024b6 <COMP_Y_ESC>
	LDR R12,=2
 80024ac:	f04f 0c02 	mov.w	ip, #2
	BL PACMAN_GHOST_MOVE_LEFT
 80024b0:	f7ff fe19 	bl	80020e6 <PACMAN_GHOST_MOVE_LEFT>
	B SKIP_ESC
 80024b4:	e043      	b.n	800253e <SKIP_ESC>

080024b6 <COMP_Y_ESC>:


COMP_Y_ESC:
	CMP R6,#0
 80024b6:	2e00      	cmp	r6, #0
	BGT DOWN_CHECK_ESC
 80024b8:	dc17      	bgt.n	80024ea <DOWN_CHECK_ESC>
	BLT UP_CHECK_ESC
 80024ba:	dbff      	blt.n	80024bc <UP_CHECK_ESC>

080024bc <UP_CHECK_ESC>:

UP_CHECK_ESC:

	LDR R0,=PacmanByteMapping
 80024bc:	48bc      	ldr	r0, [pc, #752]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR R3,=Ghostlocation
 80024be:	4bc1      	ldr	r3, [pc, #772]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)

	@CHECK FOR WALL OVER IT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 80024c0:	881f      	ldrh	r7, [r3, #0]
	ADD R7,R7,#21 @ MOVE THE GHOST UP
 80024c2:	f107 0715 	add.w	r7, r7, #21
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 80024c6:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 80024c8:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 80024cc:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ DOWN_CHECK_ESC @MAWADETHASH NO MOVE 3SHAN MOMKEN T5OSH F INFINITE LOOP, LAZEM NO MOVE TEB2A F CHECK BTA3 DIREC WA7ED BS
 80024d0:	d00b      	beq.n	80024ea <DOWN_CHECK_ESC>

	@CHECK FOR IF PREVIOUS DIRECTION IS DOWN
	ADD R3,R3,#6
 80024d2:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 80024d6:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#4
 80024da:	f1b8 0f04 	cmp.w	r8, #4
	BEQ DOWN_CHECK_ESC @MAWADETHASH NO MOVE 3SHAN MOMKEN T5OSH F INFINITE LOOP, LAZEM NO MOVE TEB2A F CHECK BTA3 DIREC WA7ED BS(A5ER WA7ED)
 80024de:	d004      	beq.n	80024ea <DOWN_CHECK_ESC>
	LDR R12,=3
 80024e0:	f04f 0c03 	mov.w	ip, #3
	BL PACMAN_GHOST_MOVE_UP
 80024e4:	f7ff fe68 	bl	80021b8 <PACMAN_GHOST_MOVE_UP>
	B SKIP_ESC
 80024e8:	e029      	b.n	800253e <SKIP_ESC>

080024ea <DOWN_CHECK_ESC>:

DOWN_CHECK_ESC:

	LDR R0,=PacmanByteMapping
 80024ea:	48b1      	ldr	r0, [pc, #708]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR R3,=Ghostlocation
 80024ec:	4bb5      	ldr	r3, [pc, #724]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)

	@CHECK FOR WALL BELOW IT
	LDRH R7,[R3] @ PUT GHOST MAP LOCATION IN  R7
 80024ee:	881f      	ldrh	r7, [r3, #0]
	SUB R7,R7,#21 @ MOVE THE GHOST DOWN
 80024f0:	f1a7 0715 	sub.w	r7, r7, #21
	ADD R0,R0,R7 @CURSOR ON GHOST LOCATION
 80024f4:	4438      	add	r0, r7
	LDRB R8,[R0] @ VALUE OF THE BLOCK THE CURSOR IS STANDING ON
 80024f6:	f890 8000 	ldrb.w	r8, [r0]
	CMP R8,'#'
 80024fa:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
	BEQ NO_MOVE_ESC
 80024fe:	d00f      	beq.n	8002520 <NO_MOVE_ESC>

	@CHECK FOR IF PREVIOUS DIRECTION IS UP
	ADD R3,R3,#6
 8002500:	f103 0306 	add.w	r3, r3, #6
	LDRH R8,[R3] @PLACE PREV DIRECTION IN R8
 8002504:	f8b3 8000 	ldrh.w	r8, [r3]
	CMP R8,#3
 8002508:	f1b8 0f03 	cmp.w	r8, #3
	BEQ NO_MOVE_ESC
 800250c:	d008      	beq.n	8002520 <NO_MOVE_ESC>
	LDR R12,=4
 800250e:	f04f 0c04 	mov.w	ip, #4
	BL PACMAN_GHOST_MOVE_DOWN
 8002512:	f7ff fe91 	bl	8002238 <PACMAN_GHOST_MOVE_DOWN>
	B SKIP_ESC
 8002516:	e012      	b.n	800253e <SKIP_ESC>

	CMP R12,#0
 8002518:	f1bc 0f00 	cmp.w	ip, #0
	BEQ NO_MOVE_ESC
 800251c:	d000      	beq.n	8002520 <NO_MOVE_ESC>
	BNE SKIP_ESC
 800251e:	d10e      	bne.n	800253e <SKIP_ESC>

08002520 <NO_MOVE_ESC>:

NO_MOVE_ESC:
	ADD R11,R11,#1
 8002520:	f10b 0b01 	add.w	fp, fp, #1
	CMP R11,#2
 8002524:	f1bb 0f02 	cmp.w	fp, #2
	BEQ LEFT_CHECK_ESC
 8002528:	d0ae      	beq.n	8002488 <LEFT_CHECK_ESC>
	CMP R11,#3
 800252a:	f1bb 0f03 	cmp.w	fp, #3
	BEQ UP_CHECK_ESC
 800252e:	d0c5      	beq.n	80024bc <UP_CHECK_ESC>
	CMP R11,#4
 8002530:	f1bb 0f04 	cmp.w	fp, #4
	BEQ NO_MOVE_ESC_1
 8002534:	d000      	beq.n	8002538 <NO_MOVE_ESC_1>
	B RIGHT_CHECK_ESC
 8002536:	e790      	b.n	800245a <RIGHT_CHECK_ESC>

08002538 <NO_MOVE_ESC_1>:
NO_MOVE_ESC_1:
	LDR R11,=0
 8002538:	f04f 0b00 	mov.w	fp, #0
	B DOWN_CHECK_ESC
 800253c:	e7d5      	b.n	80024ea <DOWN_CHECK_ESC>

0800253e <SKIP_ESC>:


SKIP_ESC:

	LDR R3,=Ghostlocation
 800253e:	4ba1      	ldr	r3, [pc, #644]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDR R1,=Pacmanloction
 8002540:	499e      	ldr	r1, [pc, #632]	; (80027bc <ReadAndDisplay_GAMEOVER+0x5e>)
	LDRH R7,[R1,#2]
 8002542:	884f      	ldrh	r7, [r1, #2]
	LDRH R8,[R3,#2]
 8002544:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	LDRH R9,[R1,#4]
 8002548:	f8b1 9004 	ldrh.w	r9, [r1, #4]
	LDRH R10,[R3,#4]
 800254c:	f8b3 a004 	ldrh.w	sl, [r3, #4]

	CMP R7,R8
 8002550:	4547      	cmp	r7, r8
	BNE ESC_END
 8002552:	d105      	bne.n	8002560 <ESC_END>
	CMP R9,R10
 8002554:	45d1      	cmp	r9, sl
	BNE CHASE_END
 8002556:	f47f af5d 	bne.w	8002414 <CHASE_END>
	BL GHOST_RESPAWN
 800255a:	f7ff fd61 	bl	8002020 <GHOST_RESPAWN>
	B ESC_END
 800255e:	e7ff      	b.n	8002560 <ESC_END>

08002560 <ESC_END>:
ESC_END:


	POP {R0-R12,PC}
 8002560:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08002564 <GHOST_MOVE_CHASE_ESCAPE>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

GHOST_MOVE_CHASE_ESCAPE:
	PUSH {R0-R5,LR}
 8002564:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

	LDR R7,=frightened
 8002566:	4f94      	ldr	r7, [pc, #592]	; (80027b8 <ReadAndDisplay_GAMEOVER+0x5a>)
	LDRB R7,[R7]
 8002568:	783f      	ldrb	r7, [r7, #0]
	CMP R7,#1
 800256a:	2f01      	cmp	r7, #1
	BEQ ESCAPE_PACMAN_GHOST_INIT
 800256c:	d002      	beq.n	8002574 <ESCAPE_PACMAN_GHOST_INIT>
	BL PACMAN_GHOST_CHASE
 800256e:	f7ff fea3 	bl	80022b8 <PACMAN_GHOST_CHASE>
	POP {R0-R5,PC}
 8002572:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

08002574 <ESCAPE_PACMAN_GHOST_INIT>:
ESCAPE_PACMAN_GHOST_INIT:
	BL PACMAN_GHOST_ESCAPE
 8002574:	f7ff ff50 	bl	8002418 <PACMAN_GHOST_ESCAPE>

	POP {R0-R5,PC}
 8002578:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

0800257a <GHOST_MOVE_DRAW>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
GHOST_MOVE_DRAW:

	PUSH {R0-R12,LR}
 800257a:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LDR R1,=Ghostlocation
 800257e:	4991      	ldr	r1, [pc, #580]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDRH R2,[R1,#6]
 8002580:	88ca      	ldrh	r2, [r1, #6]
	CMP R2,#1
 8002582:	2a01      	cmp	r2, #1
	BEQ GMRD
 8002584:	d006      	beq.n	8002594 <GMRD>
	CMP R2,#2
 8002586:	2a02      	cmp	r2, #2
	BEQ GMLD
 8002588:	d007      	beq.n	800259a <GMLD>
	CMP R2,#3
 800258a:	2a03      	cmp	r2, #3
	BEQ GMUD
 800258c:	d008      	beq.n	80025a0 <GMUD>
	CMP R2,#4
 800258e:	2a04      	cmp	r2, #4
	BEQ GMDD
 8002590:	d009      	beq.n	80025a6 <GMDD>
	B GMDEND
 8002592:	e00b      	b.n	80025ac <GMDEND>

08002594 <GMRD>:
GMRD:
	BL PACMAN_GHOST_MOVE_RIGHT_DRAW
 8002594:	f7ff fdbe 	bl	8002114 <PACMAN_GHOST_MOVE_RIGHT_DRAW>
	B GMDEND
 8002598:	e008      	b.n	80025ac <GMDEND>

0800259a <GMLD>:
GMLD:
	BL PACMAN_GHOST_MOVE_LEFT_DRAW
 800259a:	f7ff fde4 	bl	8002166 <PACMAN_GHOST_MOVE_LEFT_DRAW>
	B GMDEND
 800259e:	e005      	b.n	80025ac <GMDEND>

080025a0 <GMUD>:
GMUD:
	BL PACMAN_GHOST_MOVE_UP_DRAW
 80025a0:	f7ff fe21 	bl	80021e6 <PACMAN_GHOST_MOVE_UP_DRAW>
	B GMDEND
 80025a4:	e002      	b.n	80025ac <GMDEND>

080025a6 <GMDD>:
GMDD:
	BL PACMAN_GHOST_MOVE_DOWN_DRAW
 80025a6:	f7ff fe5e 	bl	8002266 <PACMAN_GHOST_MOVE_DOWN_DRAW>
	B GMDEND
 80025aa:	e7ff      	b.n	80025ac <GMDEND>

080025ac <GMDEND>:

GMDEND:

	POP {R0-R12,PC}
 80025ac:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

080025b0 <PACMAN_RESET>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GHOST MOVE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ GAME RESET @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_RESET:
	PUSH {R0-R12,LR}
 80025b0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	@LDR r5,=pellets_count
	@LDR r6,=Map1Pellets
	@STRB r6,[r5]

	LDR r5,=PacmanByteMapping
 80025b4:	4d7e      	ldr	r5, [pc, #504]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR r6,=PacmanByteMapping_INIT_1
 80025b6:	4e86      	ldr	r6, [pc, #536]	; (80027d0 <ReadAndDisplay_GAMEOVER+0x72>)
	LDR r7,=0
 80025b8:	f04f 0700 	mov.w	r7, #0
	LDR R8,=441
 80025bc:	f240 18b9 	movw	r8, #441	; 0x1b9

080025c0 <PACMAN_INIT_MAP_1>:
PACMAN_INIT_MAP_1:
	LDRB R4,[R6]
 80025c0:	7834      	ldrb	r4, [r6, #0]
	STRB R4,[R5]
 80025c2:	702c      	strb	r4, [r5, #0]
	ADD R7,R7,#1
 80025c4:	f107 0701 	add.w	r7, r7, #1
	ADD R6,R6,#1
 80025c8:	f106 0601 	add.w	r6, r6, #1
	ADD R5,R5,#1
 80025cc:	f105 0501 	add.w	r5, r5, #1
	CMP R7,R8
 80025d0:	4547      	cmp	r7, r8
	BLE PACMAN_INIT_MAP_1
 80025d2:	ddf5      	ble.n	80025c0 <PACMAN_INIT_MAP_1>

	BL PACMAN_INIT
 80025d4:	f7ff f9d2 	bl	800197c <PACMAN_INIT>

	LDR R1,=frightened
 80025d8:	4977      	ldr	r1, [pc, #476]	; (80027b8 <ReadAndDisplay_GAMEOVER+0x5a>)
	LDR R0,=0
 80025da:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1]
 80025de:	7008      	strb	r0, [r1, #0]
	LDR R0,=15
 80025e0:	f04f 000f 	mov.w	r0, #15
	STRB R0,[R1,#1]
 80025e4:	7048      	strb	r0, [r1, #1]

	LDR R1,=score
 80025e6:	4978      	ldr	r1, [pc, #480]	; (80027c8 <ReadAndDisplay_GAMEOVER+0x6a>)
	LDR R0,=0
 80025e8:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1]
 80025ec:	7008      	strb	r0, [r1, #0]
	LDR R0,=0
 80025ee:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1,#1]
 80025f2:	7048      	strb	r0, [r1, #1]
	LDR R0,=0
 80025f4:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1,#2]
 80025f8:	7088      	strb	r0, [r1, #2]

	LDR R1,=lives
 80025fa:	496e      	ldr	r1, [pc, #440]	; (80027b4 <ReadAndDisplay_GAMEOVER+0x56>)
	LDR R0,=3
 80025fc:	f04f 0003 	mov.w	r0, #3
	STRB R0,[R1]
 8002600:	7008      	strb	r0, [r1, #0]


	LDR R1,=Ghostlocation
 8002602:	4970      	ldr	r1, [pc, #448]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDR R0,=199
 8002604:	f04f 00c7 	mov.w	r0, #199	; 0xc7
	STRH R0,[R1]
 8002608:	8008      	strh	r0, [r1, #0]
	LDR R0,=111
 800260a:	f04f 006f 	mov.w	r0, #111	; 0x6f
	STRH R0,[R1,#2]
 800260e:	8048      	strh	r0, [r1, #2]
	LDR R0,=104
 8002610:	f04f 0068 	mov.w	r0, #104	; 0x68
	STRH R0,[R1,#4]
 8002614:	8088      	strh	r0, [r1, #4]
	LDR R0,=0
 8002616:	f04f 0000 	mov.w	r0, #0
	STRH R0,[R1,#6]
 800261a:	80c8      	strh	r0, [r1, #6]


	LDR R1,=Pacmanloction
 800261c:	4967      	ldr	r1, [pc, #412]	; (80027bc <ReadAndDisplay_GAMEOVER+0x5e>)
	LDR R0,=325
 800261e:	f240 1045 	movw	r0, #325	; 0x145
	STRH R0,[R1]
 8002622:	8008      	strh	r0, [r1, #0]
	LDR R0,=111
 8002624:	f04f 006f 	mov.w	r0, #111	; 0x6f
	STRH R0,[R1,#2]
 8002628:	8048      	strh	r0, [r1, #2]
	LDR R0,=170
 800262a:	f04f 00aa 	mov.w	r0, #170	; 0xaa
	STRH R0,[R1,#4]
 800262e:	8088      	strh	r0, [r1, #4]
	LDR R0,=0
 8002630:	f04f 0000 	mov.w	r0, #0
	STRH R0,[R1,#6]
 8002634:	80c8      	strh	r0, [r1, #6]

	BL PACMAN_DRAW_LIVES
 8002636:	f7ff f9e4 	bl	8001a02 <PACMAN_DRAW_LIVES>

	LDR R3,=5
 800263a:	f04f 0305 	mov.w	r3, #5
	LDR R4,=25
 800263e:	f04f 0419 	mov.w	r4, #25
	LDR R10,=PINK
 8002642:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
	LDR R11,=BLACK
 8002646:	f04f 0b00 	mov.w	fp, #0
	LDR R0,=275
 800264a:	f240 1013 	movw	r0, #275	; 0x113
	LDR R1,=284
 800264e:	f44f 718e 	mov.w	r1, #284	; 0x11c
	BL TFT_SET_DRAWING_AREA
 8002652:	f7fd ff9d 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R1,=1
 8002656:	f04f 0101 	mov.w	r1, #1
	BL TFT_DISPLAY_DIGIT
 800265a:	f7fe f857 	bl	800070c <TFT_DISPLAY_DIGIT>

	LDR R1,=delay_1_pacman
 800265e:	495b      	ldr	r1, [pc, #364]	; (80027cc <ReadAndDisplay_GAMEOVER+0x6e>)
	LDRB R0,=4
 8002660:	f04f 0004 	mov.w	r0, #4
	STRB R0,[R1]
 8002664:	7008      	strb	r0, [r1, #0]

	LDR R2,=1000000
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <ReadAndDisplay_GAMEOVER+0x76>)
	BL TIM2_START_IT
 8002668:	f7fd fed7 	bl	800041a <TIM2_START_IT>

	POP {R0-R12,PC}
 800266c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08002670 <PACMAN_LEVEL_2_INIT>:

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ LEVEL 2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
PACMAN_LEVEL_2_INIT:
	PUSH {R0-R12,LR}
 8002670:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	LDR r5,=pellets_count
 8002674:	4d52      	ldr	r5, [pc, #328]	; (80027c0 <ReadAndDisplay_GAMEOVER+0x62>)
	LDR r6,=Map2Pellets
 8002676:	f04f 06c3 	mov.w	r6, #195	; 0xc3
	STRB r6,[r5]
 800267a:	702e      	strb	r6, [r5, #0]

	LDR r5,=PacmanByteMapping
 800267c:	4d4c      	ldr	r5, [pc, #304]	; (80027b0 <ReadAndDisplay_GAMEOVER+0x52>)
	LDR r6,=PacmanByteMapping_INIT_2
 800267e:	4e56      	ldr	r6, [pc, #344]	; (80027d8 <ReadAndDisplay_GAMEOVER+0x7a>)
	LDR r7,=0
 8002680:	f04f 0700 	mov.w	r7, #0
	LDR R8,=441
 8002684:	f240 18b9 	movw	r8, #441	; 0x1b9

08002688 <PACMAN_INIT_MAP_2>:
PACMAN_INIT_MAP_2:
	LDRB R4,[R6]
 8002688:	7834      	ldrb	r4, [r6, #0]
	STRB R4,[R5]
 800268a:	702c      	strb	r4, [r5, #0]
	ADD R7,R7,#1
 800268c:	f107 0701 	add.w	r7, r7, #1
	ADD R6,R6,#1
 8002690:	f106 0601 	add.w	r6, r6, #1
	ADD R5,R5,#1
 8002694:	f105 0501 	add.w	r5, r5, #1
	CMP R7,R8
 8002698:	4547      	cmp	r7, r8
	BLE PACMAN_INIT_MAP_2
 800269a:	ddf5      	ble.n	8002688 <PACMAN_INIT_MAP_2>

	BL PACMAN_INIT
 800269c:	f7ff f96e 	bl	800197c <PACMAN_INIT>

	LDR R1,=frightened
 80026a0:	4945      	ldr	r1, [pc, #276]	; (80027b8 <ReadAndDisplay_GAMEOVER+0x5a>)
	LDR R0,=0
 80026a2:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1]
 80026a6:	7008      	strb	r0, [r1, #0]
	LDR R0,=15
 80026a8:	f04f 000f 	mov.w	r0, #15
	STRB R0,[R1,#1]
 80026ac:	7048      	strb	r0, [r1, #1]

	LDR R1,=score
 80026ae:	4946      	ldr	r1, [pc, #280]	; (80027c8 <ReadAndDisplay_GAMEOVER+0x6a>)
	LDR R0,=0
 80026b0:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1]
 80026b4:	7008      	strb	r0, [r1, #0]
	LDR R0,=0
 80026b6:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1,#1]
 80026ba:	7048      	strb	r0, [r1, #1]
	LDR R0,=0
 80026bc:	f04f 0000 	mov.w	r0, #0
	STRB R0,[R1,#2]
 80026c0:	7088      	strb	r0, [r1, #2]


	LDR R1,=Ghostlocation
 80026c2:	4940      	ldr	r1, [pc, #256]	; (80027c4 <ReadAndDisplay_GAMEOVER+0x66>)
	LDR R0,=199
 80026c4:	f04f 00c7 	mov.w	r0, #199	; 0xc7
	STRH R0,[R1]
 80026c8:	8008      	strh	r0, [r1, #0]
	LDR R0,=111
 80026ca:	f04f 006f 	mov.w	r0, #111	; 0x6f
	STRH R0,[R1,#2]
 80026ce:	8048      	strh	r0, [r1, #2]
	LDR R0,=104
 80026d0:	f04f 0068 	mov.w	r0, #104	; 0x68
	STRH R0,[R1,#4]
 80026d4:	8088      	strh	r0, [r1, #4]
	LDR R0,=0
 80026d6:	f04f 0000 	mov.w	r0, #0
	STRH R0,[R1,#6]
 80026da:	80c8      	strh	r0, [r1, #6]


	LDR R1,=Pacmanloction
 80026dc:	4937      	ldr	r1, [pc, #220]	; (80027bc <ReadAndDisplay_GAMEOVER+0x5e>)
	LDR R0,=325
 80026de:	f240 1045 	movw	r0, #325	; 0x145
	STRH R0,[R1]
 80026e2:	8008      	strh	r0, [r1, #0]
	LDR R0,=111
 80026e4:	f04f 006f 	mov.w	r0, #111	; 0x6f
	STRH R0,[R1,#2]
 80026e8:	8048      	strh	r0, [r1, #2]
	LDR R0,=170
 80026ea:	f04f 00aa 	mov.w	r0, #170	; 0xaa
	STRH R0,[R1,#4]
 80026ee:	8088      	strh	r0, [r1, #4]
	LDR R0,=0
 80026f0:	f04f 0000 	mov.w	r0, #0
	STRH R0,[R1,#6]
 80026f4:	80c8      	strh	r0, [r1, #6]

	BL PACMAN_DRAW_LIVES
 80026f6:	f7ff f984 	bl	8001a02 <PACMAN_DRAW_LIVES>

	LDR R3,=5
 80026fa:	f04f 0305 	mov.w	r3, #5
	LDR R4,=25
 80026fe:	f04f 0419 	mov.w	r4, #25
	LDR R10,=PINK
 8002702:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
	LDR R11,=BLACK
 8002706:	f04f 0b00 	mov.w	fp, #0
	LDR R0,=275
 800270a:	f240 1013 	movw	r0, #275	; 0x113
	LDR R1,=284
 800270e:	f44f 718e 	mov.w	r1, #284	; 0x11c
	BL TFT_SET_DRAWING_AREA
 8002712:	f7fd ff3d 	bl	8000590 <TFT_SET_DRAWING_AREA>
	LDR R1,=2
 8002716:	f04f 0102 	mov.w	r1, #2
	BL TFT_DISPLAY_DIGIT
 800271a:	f7fd fff7 	bl	800070c <TFT_DISPLAY_DIGIT>

	LDR R2,=500000
 800271e:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <ReadAndDisplay_GAMEOVER+0x7e>)
	BL TIM2_START_IT
 8002720:	f7fd fe7b 	bl	800041a <TIM2_START_IT>

	LDR R1,=delay_1_pacman
 8002724:	4929      	ldr	r1, [pc, #164]	; (80027cc <ReadAndDisplay_GAMEOVER+0x6e>)
	LDRB R0,=4
 8002726:	f04f 0004 	mov.w	r0, #4
	STRB R0,[R1]
 800272a:	7008      	strb	r0, [r1, #0]

	POP {R0-R12,PC}
 800272c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08002730 <PACMAN_ENDGAME>:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@width 231, height 231, block 11*11,padding (bottom:5, top:4)
PACMAN_ENDGAME:
	PUSH {R0-R12,LR}
 8002730:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	LDR R10,=BLACK
 8002734:	f04f 0a00 	mov.w	sl, #0
	LDR R0,=0
 8002738:	f04f 0000 	mov.w	r0, #0
	LDR R1,=320
 800273c:	f44f 71a0 	mov.w	r1, #320	; 0x140
	LDR R3,=0
 8002740:	f04f 0300 	mov.w	r3, #0
	LDR R4,=240
 8002744:	f04f 04f0 	mov.w	r4, #240	; 0xf0
	BL TFT_DRAW_RECTANGLE
 8002748:	f7fd ff4c 	bl	80005e4 <TFT_DRAW_RECTANGLE>

@ Draw the pacman gameover

	LDR r5,=PacmanByteMapping_GAMEOVER
 800274c:	4d24      	ldr	r5, [pc, #144]	; (80027e0 <ReadAndDisplay_GAMEOVER+0x82>)
   	LDR r0,=1
 800274e:	f04f 0001 	mov.w	r0, #1
	LDR r1,=12
 8002752:	f04f 010c 	mov.w	r1, #12
	LDR r3,=5
 8002756:	f04f 0305 	mov.w	r3, #5
	LDR r4,=16
 800275a:	f04f 0410 	mov.w	r4, #16

0800275e <ReadAndDisplay_GAMEOVER>:
ReadAndDisplay_GAMEOVER:
	LDRB r6,[r5]
 800275e:	782e      	ldrb	r6, [r5, #0]

	BL SELECT_BLOCK
 8002760:	f7ff f97f 	bl	8001a62 <SELECT_BLOCK>

	ADD r5,r5,#1
 8002764:	f105 0501 	add.w	r5, r5, #1
	ADD r0,r0,#11
 8002768:	f100 000b 	add.w	r0, r0, #11
	ADD r1,r1,#11
 800276c:	f101 010b 	add.w	r1, r1, #11
	CMP r0,#232
 8002770:	28e8      	cmp	r0, #232	; 0xe8
	BNE ReadAndDisplay_GAMEOVER
 8002772:	d1f4      	bne.n	800275e <ReadAndDisplay_GAMEOVER>
	LDR r0,=1
 8002774:	f04f 0001 	mov.w	r0, #1
	LDR r1,=12
 8002778:	f04f 010c 	mov.w	r1, #12
	ADD r3,r3,#11
 800277c:	f103 030b 	add.w	r3, r3, #11
	ADD r4,r4,#11
 8002780:	f104 040b 	add.w	r4, r4, #11
	CMP r3,#236
 8002784:	2bec      	cmp	r3, #236	; 0xec
	BNE ReadAndDisplay_GAMEOVER
 8002786:	d1ea      	bne.n	800275e <ReadAndDisplay_GAMEOVER>

	BL DISPLAY_SCORE_PACMAN
 8002788:	f7ff fba5 	bl	8001ed6 <DISPLAY_SCORE_PACMAN>


	LDR R0,=TIM2_DIER
 800278c:	4815      	ldr	r0, [pc, #84]	; (80027e4 <ReadAndDisplay_GAMEOVER+0x86>)
	LDR R1,=0
 800278e:	f04f 0100 	mov.w	r1, #0
	STR R1,[R0]
 8002792:	6001      	str	r1, [r0, #0]



	POP {R0-R12,PC}
 8002794:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	LDR R0,=PONG_POWERSCORE
 8002798:	200066c9 	.word	0x200066c9
	LDR R0,=PONG_SCORE
 800279c:	200066c4 	.word	0x200066c4
	LDR R0,=PONG_BALLSPEED
 80027a0:	200066cb 	.word	0x200066cb
	LDR R0,=PONG_POWER
 80027a4:	200066ca 	.word	0x200066ca
	LDR R0,=PONG_EXPAND
 80027a8:	200066c8 	.word	0x200066c8
	LDR R0,=PONG_FREEZE
 80027ac:	200066c7 	.word	0x200066c7
	LDR r5,=PacmanByteMapping
 80027b0:	20000019 	.word	0x20000019
	LDR R0,=lives
 80027b4:	20000008 	.word	0x20000008
	LDR R9,=frightened
 80027b8:	20000000 	.word	0x20000000
	LDR R8,=Pacmanloction		@load pacman location in array
 80027bc:	20000011 	.word	0x20000011
	LDR R11,=pellets_count
 80027c0:	20000004 	.word	0x20000004
	LDR R7,=Ghostlocation
 80027c4:	20000009 	.word	0x20000009
	LDR R0,=score
 80027c8:	20000005 	.word	0x20000005
	LDR R6,=delay_1_pacman
 80027cc:	20000002 	.word	0x20000002
	LDR r6,=PacmanByteMapping_INIT_1
 80027d0:	200001d2 	.word	0x200001d2
	LDR R2,=1000000
 80027d4:	000f4240 	.word	0x000f4240
	LDR r6,=PacmanByteMapping_INIT_2
 80027d8:	2000038b 	.word	0x2000038b
	LDR R2,=500000
 80027dc:	0007a120 	.word	0x0007a120
	LDR r5,=PacmanByteMapping_GAMEOVER
 80027e0:	20000544 	.word	0x20000544
	LDR R0,=TIM2_DIER
 80027e4:	4000000c 	.word	0x4000000c

080027e8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	AsmMain();
 80027ec:	f7fd fd29 	bl	8000242 <AsmMain>
    /* Loop forever */
	for(;;);
 80027f0:	e7fe      	b.n	80027f0 <main+0x8>
	...

080027f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f4:	480d      	ldr	r0, [pc, #52]	; (800282c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <LoopForever+0xe>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <LoopForever+0x16>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002822:	f000 f811 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7ff ffdf 	bl	80027e8 <main>

0800282a <LoopForever>:

LoopForever:
  b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   r0, =_estack
 800282c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	200066d0 	.word	0x200066d0
  ldr r2, =_sidata
 8002838:	080028b0 	.word	0x080028b0
  ldr r2, =_sbss
 800283c:	200066d0 	.word	0x200066d0
  ldr r4, =_ebss
 8002840:	200066ec 	.word	0x200066ec

08002844 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC_IRQHandler>
	...

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4d0d      	ldr	r5, [pc, #52]	; (8002880 <__libc_init_array+0x38>)
 800284c:	4c0d      	ldr	r4, [pc, #52]	; (8002884 <__libc_init_array+0x3c>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	2600      	movs	r6, #0
 8002854:	42a6      	cmp	r6, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	4d0b      	ldr	r5, [pc, #44]	; (8002888 <__libc_init_array+0x40>)
 800285a:	4c0c      	ldr	r4, [pc, #48]	; (800288c <__libc_init_array+0x44>)
 800285c:	f000 f818 	bl	8002890 <_init>
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	2600      	movs	r6, #0
 8002866:	42a6      	cmp	r6, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002870:	4798      	blx	r3
 8002872:	3601      	adds	r6, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f855 3b04 	ldr.w	r3, [r5], #4
 800287a:	4798      	blx	r3
 800287c:	3601      	adds	r6, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	080028a8 	.word	0x080028a8
 8002884:	080028a8 	.word	0x080028a8
 8002888:	080028a8 	.word	0x080028a8
 800288c:	080028ac 	.word	0x080028ac

08002890 <_init>:
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	bf00      	nop
 8002894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002896:	bc08      	pop	{r3}
 8002898:	469e      	mov	lr, r3
 800289a:	4770      	bx	lr

0800289c <_fini>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	bf00      	nop
 80028a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a2:	bc08      	pop	{r3}
 80028a4:	469e      	mov	lr, r3
 80028a6:	4770      	bx	lr
